package xxgam.oracle.apps.inv.moveorder.siz.server;



import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.sql.SQLException;

import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import xxgam.oracle.apps.inv.moveorder.siz.webui.XxGamCaptureSizesUniformsCO;

import java.util.ArrayList;

import java.util.HashSet;

import oracle.apps.fnd.framework.OAException;

import oracle.apps.fnd.framework.webui.OAPageContext;

import oracle.jbo.RowSetIterator;

import oracle.jbo.domain.Number;

import xxgam.oracle.apps.inv.moveorder.utils.XxGamInvUtils;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxGamSizesUniformsAMImpl extends OAApplicationModuleImpl {
  /**This is the default constructor (do not remove)
   */
  public XxGamSizesUniformsAMImpl()
  {
  }

  /**Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("xxgam.oracle.apps.inv.moveorder.siz.server", /* package name */
      "XxGamSizesUniformsAMLocal" /* Configuration Name */);
  }
  
  
  /**Container's getter for XxGamPersonalUniformInfoVO1
   */
  public XxGamPersonalUniformInfoVOImpl getXxGamPersonalUniformInfoVO1() {
      return (XxGamPersonalUniformInfoVOImpl)findViewObject("XxGamPersonalUniformInfoVO1");
  }
  
  /**Container's getter for XxGamKitItemsInfoVO1
   */
  public XxGamKitItemsInfoVOImpl getXxGamKitItemsInfoVO1() {
      return (XxGamKitItemsInfoVOImpl)findViewObject("XxGamKitItemsInfoVO1");
  }
  
  public XxGamKitItemsInfoVOImpl getXxGamKitItemsInfoVO1(ResultSet pResultSet){
      return (XxGamKitItemsInfoVOImpl)findViewObject("XxGamKitItemsInfoVO1");
  }

  /**Container's getter for XxGamSizesUniformsHistoryVO1
   */
  public XxGamSizesUniformsHistoryVOImpl getXxGamSizesUniformsHistoryVO1() {
      return (XxGamSizesUniformsHistoryVOImpl)findViewObject("XxGamSizesUniformsHistoryVO1");
  }



  public String fillPersonSizeUniformsInfo(String userName, int userId){
      String retval = null;
      final String methodName = "fillPersonSizeUniformsInfo";
      
      XxGamPersonalUniformInfoVOImpl SizesPersonalUniformInfoVOImpl = getXxGamPersonalUniformInfoVO1();
      
      XxGamPersonalUniformInfoVORowImpl SizesPersonalUniformInfoRow = null;
      
      if (null != SizesPersonalUniformInfoVOImpl){
          if(!SizesPersonalUniformInfoVOImpl.isPreparedForExecution()){
            SizesPersonalUniformInfoVOImpl.executeQuery();
          }
          SizesPersonalUniformInfoRow = (XxGamPersonalUniformInfoVORowImpl)SizesPersonalUniformInfoVOImpl.createRow(); 
           
          OADBTransaction oaDBTransaction =  this.getOADBTransaction();
          Connection connection = oaDBTransaction.getJdbcConnection();
          
          String strPersonID = null;
          /*String strPersonFullName = null; 
          String strEmployeeNumber = null; 
          String strSex = null; 
          String strAssignmentID = null;*/
          
          SizesPersonalUniformInfoRow.setUserID(String.valueOf(userId));
          
          strPersonID = this.getPersonIdFromUserID(userName,connection);
          System.out.println("strPersonID:"+strPersonID);
          
          if (null != strPersonID){
              if(strPersonID.contains("EXCEPTION")){
                return strPersonID; 
              } 
              
              SizesPersonalUniformInfoRow.setPersonID(strPersonID);
          }
          
          String[] arrayActiveAssignmentInfo = this.getActiveAssignmentInfo(strPersonID,connection);
          if(null!=arrayActiveAssignmentInfo[0]){
            if(arrayActiveAssignmentInfo[0].contains("EXCEPTION")){
              return arrayActiveAssignmentInfo[0];
            }
          }
          
          String[] arrayFullNameEmpNumSex = this.getFulNameEmpNumSex(strPersonID,connection);       
          
          if(null!=arrayFullNameEmpNumSex[0]){
              if(arrayFullNameEmpNumSex[0].contains("EXCEPTION")){
                  return arrayFullNameEmpNumSex[0];
              }
              SizesPersonalUniformInfoRow.setPersonFullName(arrayFullNameEmpNumSex[1]);
              SizesPersonalUniformInfoRow.setEmployeeNumber(arrayFullNameEmpNumSex[2]);
              SizesPersonalUniformInfoRow.setSex(arrayFullNameEmpNumSex[3]);
              SizesPersonalUniformInfoRow.setRfc(arrayFullNameEmpNumSex[4]);
          }
          
          String[] arrayPersonTypeId = this.getPersonTypeID(strPersonID, connection);
          if(null != arrayPersonTypeId[0]){
              if(arrayPersonTypeId[0].contains("EXCEPTION")){
                  return arrayPersonTypeId[0];
              }
              SizesPersonalUniformInfoRow.setPersonTypeID(arrayPersonTypeId[1]);
              SizesPersonalUniformInfoRow.setPersonType(arrayPersonTypeId[2]);
              
          }
          
           String strPersonType = arrayPersonTypeId[2];
           System.out.println("arrayPersonTypeId[2]:"+arrayPersonTypeId[2]);
           String[] arrayInvAssignExcept = getInvAssignExcept(strPersonType,connection);
           System.out.println("arrayInvAssignExcept[1]:"+arrayInvAssignExcept[1]);
           
           if(null!=arrayInvAssignExcept[0]){
             if(arrayInvAssignExcept[0].contains("EXCEPTION")){
               return arrayInvAssignExcept[0];
             }
             SizesPersonalUniformInfoRow.setXxGamInvAssignExcept(arrayInvAssignExcept[1]);
            }
          
          String[] arrayOrganizationInfo = this.getOrganizationInfo(strPersonID, connection);
          if(null!=arrayOrganizationInfo){
              if(arrayOrganizationInfo[0].contains("EXCEPTION")){
                  return arrayOrganizationInfo[0];
              }
              SizesPersonalUniformInfoRow.setOrganizationID(arrayOrganizationInfo[1]);
              SizesPersonalUniformInfoRow.setOrganization(arrayOrganizationInfo[2]);
              SizesPersonalUniformInfoRow.setAssigmentID(arrayOrganizationInfo[3]);
          }
          
          String[] arrayGradeInfo = this.getGradeInfo(strPersonID,connection);;
          if(null!=arrayGradeInfo){
              if(arrayGradeInfo[0].contains("EXCEPTION")){
                  return arrayGradeInfo[0];
              }
              
              SizesPersonalUniformInfoRow.setGradeID(arrayGradeInfo[1]);
              SizesPersonalUniformInfoRow.setGrade(arrayGradeInfo[2]);
              SizesPersonalUniformInfoRow.setCategoriaGr(arrayGradeInfo[3]);
          }
          
          String[] arrayPositionInfo = this.getPositionInfo(strPersonID,connection);
          if(null!=arrayPositionInfo[0]){
            if(arrayPositionInfo[0].contains("EXCEPTION")){
              return arrayPositionInfo[0];
            }
            SizesPersonalUniformInfoRow.setPositionID(arrayPositionInfo[1]);
            SizesPersonalUniformInfoRow.setPosition(arrayPositionInfo[2]);
            String strShortPosition = arrayPositionInfo[2].substring(arrayPositionInfo[2].indexOf('.',3)+1); 
            if(null==SizesPersonalUniformInfoRow.getCategoriaGr()||"".equals(SizesPersonalUniformInfoRow.getCategoriaGr())){
              SizesPersonalUniformInfoRow.setCategoriaGr(strShortPosition);
            }
          }
          
          String[] arrayPayrollInfo = this.getPayrollInfo(strPersonID,connection);
          
           if(null!=arrayPayrollInfo[0]){
             if(arrayPayrollInfo[0].contains("EXCEPTION")){
               return arrayPayrollInfo[0];
             }
             SizesPersonalUniformInfoRow.setPayrollID(arrayPayrollInfo[1]);
             SizesPersonalUniformInfoRow.setPayroll(arrayPayrollInfo[2]);
           }
          
          String[] arrayAccountingInfo = this.getAccountingInfo(strPersonID,connection);
          if(null!=arrayAccountingInfo[0]){
            if(arrayAccountingInfo[0].contains("EXCEPTION")){
              return arrayAccountingInfo[0];
            }
            SizesPersonalUniformInfoRow.setCodeCombinationID(arrayAccountingInfo[1]);
            SizesPersonalUniformInfoRow.setStation(arrayAccountingInfo[2]);
            SizesPersonalUniformInfoRow.setAccountCombination(arrayAccountingInfo[3]);
            SizesPersonalUniformInfoRow.setCostCenter(arrayAccountingInfo[4]);
          }
          
          String[] arrayHrLocationZona = this.getHrLocationZonaInfo(strPersonID,connection);
          if(null!=arrayHrLocationZona[0]){
            if(arrayHrLocationZona[0].contains("EXCEPTION")){
              return arrayHrLocationZona[0];
            }
            SizesPersonalUniformInfoRow.setHrLocationCode(arrayHrLocationZona[1]);
            SizesPersonalUniformInfoRow.setHrLocationDesc(arrayHrLocationZona[2]);
            SizesPersonalUniformInfoRow.setZona(arrayHrLocationZona[3]);
          }
          
          String kitsAviables = this.fillAvailableKitsInfo(arrayOrganizationInfo[2]/*Organizacion*/
                                                          ,arrayPositionInfo[2]/*Posicion*/
                                                          ,arrayFullNameEmpNumSex[3]/*Sexo*/
                                                          ,arrayPayrollInfo[2]/*Payroll*/
                                                          ,arrayHrLocationZona[3] /*Zona*/
                                                          ,arrayInvAssignExcept[1] /* Tipo Empleado (P) (E) */
                                                          ,connection);
          if(kitsAviables.contains("EXCEPTION")){
              return kitsAviables;
          }else{
              SizesPersonalUniformInfoRow.setuserKit(kitsAviables);
          }
          
          SizesPersonalUniformInfoVOImpl.insertRow(SizesPersonalUniformInfoRow);
          
      }else{
          System.out.println("DEBUG GNOSISHCM "+ XxGamCaptureSizesUniformsCO.class.getName() + " " + methodName);
          System.out.println("DEBUG GNOSISHCM "+ "Empty VO, sizesPersonalUniformInfo is NULL!");
      } /** END if (null != SizesPersonalUniformInfoVOImpl){ **/
      
      return retval;
  }
  
  
    /**
     * Metodo que encuentra Person ID
     * @param userName, connection
     */
  public String getPersonIdFromUserID(String userName, Connection connection){
      
      String personId = null;
      int counter = 0;
      
      String strPrepStmt = " select employee_id " + 
                         "       ,start_date " + 
                         "       ,end_date " + 
                         "   from fnd_user " + 
                         "  where user_name = ? " + 
                         "    and trunc(sysdate) between start_date " + 
                         "    and nvl(end_date,TO_DATE('31/12/4712', 'DD/MM/YYYY')) ";
                          
      PreparedStatement prepStmt = null;
      ResultSet resultSet = null;
      
      try
      {
        prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
        prepStmt.setString(1,userName);
        resultSet = prepStmt.executeQuery();
        
        while(resultSet.next()){
          personId = resultSet.getString("employee_id");
          counter = counter + 1;
        }
      } catch (SQLException sqle){
          personId = "EXCEPTION al obtener el Person ID:"+sqle.getErrorCode()+" , "+sqle.getMessage();
      }
      
      this.closeResultSet(resultSet);
      this.closePreparedStatement(prepStmt);
      
      if(counter>1){
        personId = "EXCEPTION al obtener el Person ID:Mas de un registro.";
      }
      return personId;
  }
  
  
  /**
   * metodo que valida si el empleado tiene  una asignacion activa o no
   * @param strPersonID
   * @return
   */
   private String[] getActiveAssignmentInfo(String strPersonID
                                       ,Connection pConnection){
      
      String[] retval = new String[3];
      retval[0] = null;
      retval[1] = null;
      retval[2] = null;
      
      int counter = 0;
      
      String strPrepStmt = " select PASTT.USER_STATUS " + 
                           "      ,PASTT.ASSIGNMENT_STATUS_TYPE_ID " + 
                           "  from PER_ALL_ASSIGNMENTS_F paaf " + 
                           "      ,PER_ASSIGNMENT_STATUS_TYPES_TL PASTT " + 
                           " where 1 =1 " + 
                           "  AND PAAF.ASSIGNMENT_STATUS_TYPE_ID = PASTT.ASSIGNMENT_STATUS_TYPE_ID " + 
                           "  and trunc(sysdate) between  paaf.effective_start_date " + 
                           "  and paaf.effective_end_date " + 
                           "  and PASTT.user_status IN ('Active Assignment', 'Suspensi'||chr(50099)||'n Con IMSS y PyD') " + 
                           "  and paaf.person_id = ? ";
                            
      PreparedStatement prpStmt = null;
      ResultSet resulSet = null;
      
      try{
          prpStmt = pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
          prpStmt.setDouble(1, new Double(strPersonID));
          resulSet = prpStmt.executeQuery();
          
          while(resulSet.next()){
              retval[0] = "SUCESFULLY";
              retval[1] = resulSet.getString("USER_STATUS");
              retval[2] = resulSet.getString("ASSIGNMENT_STATUS_TYPE_ID");

              counter = counter + 1;
          }
          
      }catch(SQLException sqle){
          retval[0] = "EXCEPTION al validar si el empleado tiene  asignacion activa o no:"+sqle.getErrorCode()+" , "+sqle.getMessage();
      }
      
      this.closeResultSet(resulSet);
      this.closePreparedStatement(prpStmt);
      
      if(counter > 1){
          retval[0] = "EXCEPTION al validar si el empleado tiene  asignacion activa o no: Mas de un registro";
      }
      
      if(0==counter){
        retval[0] = "EXCEPTION Empleado Inactivo, acudir al area de Recursos Humanos para su Reactivacion.";
      }
      
      return retval;
  }
  
  
    /**
     * metodo que recupera el nombre del empleado, el numero de empleado y su genero
     * @param strPersonID
     * @return
     */
     private String[] getFulNameEmpNumSex(String strPersonID
                                         ,Connection pConnection){
        
        String[] retval = new String[5];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;
        retval[3] = null;
        retval[4] = null;
        
        int counter = 0;
        
        String strPrepStmt = " SELECT   papf.full_name " + 
                              "       , papf.employee_number " + 
                              "       , papf.sex " + 
                              "       , papf.per_information2 rfc " + 
                              " FROM per_all_people_f papf " + 
                              " WHERE 1=1 " + 
                              "    and  trunc(sysdate) >= papf.effective_start_date " + 
                              "    and  trunc(sysdate) <= papf.effective_end_date " + 
                              "    and  papf.employee_number is not null " + 
                              "    and  papf.person_id = ?";
                              
        PreparedStatement prpStmt = null;
        ResultSet resulSet = null;
        
        try{
            prpStmt = pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            prpStmt.setDouble(1, new Double(strPersonID));
            resulSet = prpStmt.executeQuery();
            
            while(resulSet.next()){
                retval[0] = "SUCESFULLY";
                retval[1] = resulSet.getString("full_name");
                retval[2] = resulSet.getString("employee_number");
                retval[3] = resulSet.getString("sex");
                retval[4] = resulSet.getString("rfc");
              
                counter = counter + 1;
            }
            
        }catch(SQLException sqle){
            retval[0] = "EXCEPTION al obtener el Nombre del empleado, numero de empleado y genero:"+sqle.getErrorCode()+" , "+sqle.getMessage();
        }
        
        this.closeResultSet(resulSet);
        this.closePreparedStatement(prpStmt);
        
        if(counter > 1){
            retval[0] = "EXCEPTION al obtener registros, mas de un registro";
        }
        
        return retval;
    }
  
  
  
    /**
    * Metodo que recupera el Person Type ID y Adscripcion.
    * @param strPersonID
    * @param pConnection
    * @return
    */
    private String[] getPersonTypeID(String strPersonID
                                 , Connection pConnection)
    {
        String[] retval = new String[3];
        retval[0] = null;
        retval[1] = null;
        retval[2] = "";
        
        int counter = 0;
        
      String strPrepStmt = " SELECT   pt.person_type_id   " + 
                            "       , pttl.user_person_type   " + 
                            "  FROM   per_person_type_usages_f ptu,   " + 
                            "         per_person_types pt,   " + 
                            "         per_person_types_tl pttl, " + 
                            "         per_all_people_f papf   " + 
                            " WHERE   ptu.person_type_id = pt.person_type_id   " + 
                            "         AND pt.person_type_id = pttl.person_type_id   " + 
                            "         AND TRUNC (SYSDATE) BETWEEN ptu.effective_start_date   " + 
                            "                                 AND  ptu.effective_end_date " + 
                            "         AND TRUNC (SYSDATE) BETWEEN papf.effective_start_date   " + 
                            "         AND  papf.effective_end_date   " + 
                            "         AND pttl.language = USERENV ('LANG') " + 
                            "         and papf.employee_number is not null " + 
                            "         and papf.person_id = ptu.person_id " + 
                            "         AND papf.person_id = ? "+
                            "         AND pt.system_person_type IN ('APL','EMP','EX_APL','EX_EMP','CWK','EX_CWK','OTHER') "+
                            "         ORDER BY DECODE(pt.system_person_type " + 
                            "                        ,'EMP'   ,1 " + 
                            "                        ,'CWK'   ,2 " + 
                            "                        ,'APL'   ,3 " + 
                            "                        ,'EX_EMP',4 " + 
                            "                        ,'EX_CWK',5 " + 
                            "                        ,'EX_APL',6 " + 
                            "                                 ,7 " + 
                            "                        ) ";
                            
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;
        
        try{
            prepStmt = pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            
            while(resultSet.next()){
                retval[0] = "SUCESFULLY";
                retval[1] = resultSet.getString("person_type_id");
                retval[2] = retval[2]+"."+resultSet.getString("user_person_type");
                counter = counter +1;
            }
        }catch(SQLException sqle){
            retval[0] = "EXCEPTION al obtener el tipo de persona:"+sqle.getErrorCode()+" , "+sqle.getMessage();
            return retval;
        }
        
        this.closeResultSet(resultSet);
        this.closePreparedStatement(prepStmt);
        
        if(0==counter){
          retval[0] = "EXCEPTION al obtener el tipo de persona: No se encontraron registros.";
          return retval; 
        }
        
        if(counter >=1){
          retval[2] = retval[2].substring(1,retval[2].length());
            return retval; 
        }
        
        
        return retval;
    }
  
  
    /**
     * Metodo que recupera informacion de la organizacion a la que pertenece el empleado.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getOrganizationInfo(String strPersonID, 
                                         Connection pConnection)
    {
        String[] retval = new String[4];
        retval[0]=null;
        retval[1]=null;
        retval[2]=null;
        retval[3]=null;
        
        int counter = 0;
        String strPrpStmt = " SELECT  hrao.organization_id  org_id   " + 
                         "        ,hrao.name             org_name " + 
                         "        ,paaf.ASSIGNMENT_ID"+
                         " FROM  hr_all_organization_units   hrao " + 
                         "      ,per_all_assignments_f       paaf " + 
                         "      ,per_assignment_status_types past " + 
                         " WHERE  hrao.organization_id = paaf.organization_id " + 
                         " AND  paaf.person_id = ? " + 
                         " and paaf.primary_flag = 'Y' "+
                         " AND  TRUNC(SYSDATE) BETWEEN paaf.effective_start_date " + 
                         "                        AND paaf.effective_end_date " + 
                         " AND  paaf.assignment_status_type_id = past.assignment_status_type_id ";
                         
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;
        
        try{
            prepStmt = pConnection.prepareStatement(strPrpStmt, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            
            while(resultSet.next()){
                retval[0]="SUCCESFULLY";
                retval[1]=resultSet.getString("org_id");
                retval[2]=resultSet.getString("org_name");
                retval[3]=resultSet.getString("ASSIGNMENT_ID");
                counter = counter +1;
            }
        }catch(SQLException sqle){
            retval[0]= "EXCEPTION al obtener la organizacion:"+sqle.getErrorCode()+" , "+sqle.getMessage();
        }
        
        this.closeResultSet(resultSet);
        this.closePreparedStatement(prepStmt);
        
        if(counter>1){
            retval[0]="EXCEPTION al obtener la organizacion: mas de un registro.";
        }
        
        return retval;
    }
    
    
    /**
     * Metodo que recupera informacion de grado del empleado.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getGradeInfo(String strPersonID, Connection pConnection)
    {
    
      String[] retval = new String[4]; 
      retval[0]=null; 
      retval[1]=null; 
      retval[2]=null; 
      retval[3]=null;
      
      int counter = 0;
      String strPrepStmt = " SELECT  pj.job_id "+     
                            "        ,pj.name job_name"+   
                            "        ,pgd.segment4  categoria_gr "+
                            "  FROM   per_jobs pj "+    
                            "        ,per_all_assignments_f paaf "+     
                            "        ,per_grade_definitions pgd "+
                            "        ,per_grades pg "+
                            "  WHERE 1=1 "+
                            "    AND pj.job_id = paaf.job_id "+
                            "    AND paaf.primary_flag = 'Y' "+     
                            "    AND pgd.grade_definition_id(+) = pg.grade_definition_id "+   
                            "    AND pg.grade_id(+) = paaf.grade_id "+
                            "    AND TRUNC(SYSDATE) >= paaf.effective_start_date "+
                            "    AND TRUNC(SYSDATE) <= paaf.effective_end_date "+
                            "    AND TRUNC(SYSDATE) BETWEEN NVL(TRUNC(pj.date_from), TRUNC(SYSDATE)) "+
                            "                           AND NVL(TRUNC(pj.date_to), TO_DATE('31/12/4712', 'DD/MM/YYYY')) "+
                            "    AND paaf.person_id = ? ";
      PreparedStatement prepStmt = null;
      ResultSet resultSet = null;
      
      try
      {
        prepStmt = pConnection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
        prepStmt.setDouble(1,new Double(strPersonID));
        resultSet = prepStmt.executeQuery();
        while(resultSet.next()){
          retval[0] = "SUCESFULL";
          retval[1] = resultSet.getString("job_id");
          retval[2] = resultSet.getString("job_name");
          retval[3] = resultSet.getString("categoria_gr");
          counter = counter +1;
          
        }
      } catch (SQLException sqle)
      {
         retval[0] = "EXCEPTION al obtener el grado de asignacion:"+sqle.getErrorCode()+" , "+sqle.getMessage();
      }
      
      this.closeResultSet(resultSet);
      this.closePreparedStatement(prepStmt);
      
      
      if(counter>1){
        retval[0] = "EXCEPTION al obtener el grado de asignacion: mas de un registro.";
      }
      
      return retval;
    
    }
  
  
    /**
     * Metodo que recupera la informacion del puesto.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getPositionInfo(String strPersonID, Connection pConnection)
    {
     
      String[] retval = new String[3]; 
      retval[0]=null; 
      retval[1]=null; 
      retval[2]=null; 
      
      int counter = 0;
      String strPrepStmt = " SELECT  pap.position_id " + 
                           "       ,pap.name position_name " + 
                           "  FROM   per_all_positions pap " + 
                           "        ,per_all_assignments_f paaf " + 
                           " WHERE 1=1 " + 
                           "    AND pap.position_id = paaf.position_id " + 
                           "    AND paaf.primary_flag = 'Y' " + 
                           "    AND TRUNC(SYSDATE) >= paaf.effective_start_date " + 
                           "    AND TRUNC(SYSDATE) <= paaf.effective_end_date " + 
                           "    AND TRUNC(SYSDATE) BETWEEN NVL(TRUNC(pap.date_effective), TRUNC(SYSDATE)) " + 
                           "                           AND NVL(TRUNC(pap.date_end), TO_DATE('31/12/4712', 'DD/MM/YYYY')) " + 
                           "    AND paaf.person_id = ? ";
      PreparedStatement prepStmt = null;
      ResultSet resultSet = null;
      
      try
      {
        prepStmt = pConnection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
        prepStmt.setDouble(1,new Double(strPersonID));
        resultSet = prepStmt.executeQuery();
        while(resultSet.next()){
          retval[0] = "SUCESFULL";
          retval[1] = resultSet.getString("position_id");
          retval[2] = resultSet.getString("position_name");
          counter = counter +1;
          
        }
      } catch (SQLException sqle)
      {
         retval[0] = "EXCEPTION al obtener el puesto de asignacion:"+sqle.getErrorCode()+" , "+sqle.getMessage();
      }
      
      this.closeResultSet(resultSet);
      this.closePreparedStatement(prepStmt);
      
      
      if(counter>1){
        retval[0] = "EXCEPTION al obtener el puesto de asignacion: mas de un registro.";
      }
      
      if(0==counter){
        retval[0] = "EXCEPTION al obtener el puesto de asignacion: No se encontraron registros.";
      }
      
      return retval;
      
    }
  
  
  
    /**
     * Metodo que recupera la informacion del grupo de pago.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getPayrollInfo(String strPersonID, Connection pConnection)
    {
      String[] retval = new String[3]; 
      retval[0]=null; 
      retval[1]=null; 
      retval[2]=null; 
      
      int counter = 0;
      String strPrepStmt = " select papf.payroll_id " + 
                            "      ,papf.payroll_name " + 
                            " from pay_all_payrolls_f papf " + 
                            "     ,per_all_assignments_f paaf " + 
                            " where trunc(sysdate) between papf.effective_start_date " + 
                            "                       and papf.effective_end_date " + 
                            "  and trunc(sysdate)  between paaf.effective_start_date " + 
                            "                       and paaf.effective_end_date " + 
                            "  and paaf.payroll_id = papf.payroll_id " + 
                            "  AND paaf.primary_flag = 'Y' " + 
                            "  and paaf.person_id = ? ";
      PreparedStatement prepStmt = null;
      ResultSet resultSet = null;
      
      try
      {
        prepStmt = pConnection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
        prepStmt.setDouble(1,new Double(strPersonID));
        resultSet = prepStmt.executeQuery();
        while(resultSet.next()){
          retval[0] = "SUCESFULL";
          retval[1] = resultSet.getString("payroll_id");
          retval[2] = resultSet.getString("payroll_name");
          counter = counter +1;
        }
      } catch (SQLException sqle)
      {
         retval[0] = "EXCEPTION al obtener el grupo de pago de asignacion:"+sqle.getErrorCode()+" , "+sqle.getMessage();
      }
      
      this.closeResultSet(resultSet);
      this.closePreparedStatement(prepStmt);
      
      
      if(counter>1){
        retval[0] = "EXCEPTION al obtener el grupo de pago de asignacion: mas de un registro.";
      }
      
      return retval;
      
    }
  
  
    /**
     * Metodo que recupera informacion de contabilidad
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getAccountingInfo(String strPersonID, Connection pConnection)
    {
    
      String[] retval = new String[5]; 
      retval[0]=null; 
      retval[1]=null; 
      retval[2]=null; 
      retval[3]=null; 
      retval[4]=null;
      
      int counter = 0;
      String strPrepStmt = " SELECT gcc.code_combination_id " + 
                              "   ,gcc.segment3 cost_center " + 
                              "   ,gcc.segment4 station " + 
                              "   ,gcc.segment1||'-'|| " + 
                              "    gcc.segment2||'-'|| " + 
                              "    gcc.segment3||'-'|| " + 
                              "    gcc.segment4||'-'|| " + 
                              "    gcc.segment5||'-'|| " + 
                              "    gcc.segment6||'-'|| " + 
                              "    gcc.segment7||'-'|| " + 
                              "    gcc.segment8 account_combination " + 
                              " FROM per_all_assignments_f paaf " + 
                              "    ,gl_code_combinations gcc " + 
                              " WHERE 1=1 " + 
                              "    AND paaf.default_code_comb_id = gcc.code_combination_id " + 
                              "    AND paaf.primary_flag = 'Y' " + 
                              "    AND TRUNC(SYSDATE) >= paaf.effective_start_date " + 
                              "    AND TRUNC(SYSDATE) <= paaf.effective_end_date " + 
                              "    AND paaf.person_id = ? ";
      PreparedStatement prepStmt = null;
      ResultSet resultSet = null;


      try
      {
        prepStmt = pConnection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
        prepStmt.setDouble(1,new Double(strPersonID));
        resultSet = prepStmt.executeQuery();
        while(resultSet.next()){
          retval[0] = "SUCESFULL";
          retval[1] = resultSet.getString("code_combination_id");
          retval[2] = resultSet.getString("station");
          retval[3] = resultSet.getString("account_combination");
          retval[4] = resultSet.getString("cost_center");
          counter = counter +1;
        }
        
      } catch (SQLException sqle)
      {
        retval[0] = "EXCEPTION al obtener informacion de contabilidad de la asignacion:"+sqle.getErrorCode()+" , "+sqle.getMessage();
      }
      
      this.closeResultSet(resultSet);
      this.closePreparedStatement(prepStmt);
      
      if(counter>1){
        retval[0] = "EXCEPTION al obtener informacion de contabilidad de la asignacion: Mas de un registro.";
      }
      
      if(0==counter){
        retval[0] = "EXCEPTION El empleado no tiene asignado una cuenta contable.";
      }
      
      return retval; 
    
    }
    
  /**
   * Metodo que recupera informacion de contabilidad
   * @param strPersonID
   * @param pConnection
   * @return
   */
  private String[] getHrLocationZonaInfo(String strPersonID, Connection pConnection)
  {
    String[] retval = new String[4]; 
    retval[0]=null; 
    retval[1]=null; 
    retval[2]=null; 
    retval[3]=null; 
    
    int counter = 0;
    String strPrepStmt = " select  hlt.LOCATION_CODE " + 
                          "     ,hlt.DESCRIPTION LOCATION_DESC " + 
                          "     ,pucif.value zona " + 
                          " from   per_all_assignments_f paaf " + 
                          "      ,hr_locations_all_tl hlt " + 
                          "      ,pay_user_column_instances_f pucif " + 
                          "      ,pay_user_tables put " + 
                          "      ,pay_user_rows_f purf " + 
                          "      ,pay_user_columns puc " + 
                          " where 1=1  " + 
                          " and paaf.location_id = hlt.location_id " + 
                          " and trunc(sysdate) " + 
                          " between paaf.effective_start_date and paaf.effective_end_date " + 
                          " and hlt.language =  SYS_CONTEXT('USER', 'LANG')  " + 
                          "  and put.user_table_name = 'XXGAM_PARAMETROS_UNIFORMES' " + 
                          " and put.business_group_id = 81 " + 
                          " and put.user_table_id = purf.user_table_id " + 
                          " and put.user_table_id = puc.user_table_id " + 
                          " and puc.user_column_name = 'Localidad' " + 
                          " and pucif.user_row_id = purf.user_row_id " + 
                          " and pucif.user_column_id = puc.user_column_id " + 
                          " and trunc(sysdate) between purf.effective_start_date " + 
                          "                        and purf.effective_end_date " + 
                          " and trunc(sysdate) between pucif.effective_start_date " + 
                          "                        and pucif.effective_end_date" + 
                          " and purf.row_low_range_or_name = substr (hlt.location_code, 0, 3) " + 
                          " AND paaf.primary_flag = 'Y' " + 
                          " and paaf.person_id = ? ";
    PreparedStatement prepStmt = null;
    ResultSet resultSet = null;


    try
    {
      prepStmt = pConnection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
      prepStmt.setDouble(1,new Double(strPersonID));
      resultSet = prepStmt.executeQuery();
      while(resultSet.next()){
        retval[0] = "SUCESFULL";
        retval[1] = resultSet.getString("LOCATION_CODE");
        retval[2] = resultSet.getString("LOCATION_DESC");
        retval[3] = resultSet.getString("zona");
        counter = counter +1;
      }
      
    } catch (SQLException sqle)
    {
      retval[0] = "EXCEPTION al obtener la zona del empleado:"+sqle.getErrorCode()+" , "+sqle.getMessage();
    }
    
    this.closeResultSet(resultSet);
    this.closePreparedStatement(prepStmt);
    
    if(0==counter){
      retval[0] = "EXCEPTION al obtener localidad y zona del empleado: No se encontraron registros.";
    }
    
    if(counter>1){
      retval[0] = "EXCEPTION al obtener localidad y zona del empleado: Mas de un registro.";
    }
    
    
    return retval; 
  }
  


  /**
   * Metodo que recupera los kits disponibles por cada empleado 
   * @param pStrOrganization
   * @param pStrPosition
   * @param pStrSex
   */
  public ArrayList<String> fillAvailableKitsInfo(String pStrOrganization
                                                ,String pStrPosition
                                                ,String pStrSex
                                                ,String pStrPayroll
                                                ,String pStrZona
                                                ,String pInvAssignExcept)
  {
    String retval = null;
    String strAvailableKits="";
       int counter = 0;
    String strShortOrganization = null; 
    String strShortPosition = null; 
    String strShortPayroll = null; 
    
    ArrayList<String> kitsAssig = new ArrayList<String>();
    
    if(null!=pStrOrganization){
      strShortOrganization = pStrOrganization.substring(0,2);
    }
    if(null!=pStrPosition){
      strShortPosition = pStrPosition.substring(pStrPosition.indexOf('.',3)+1);
    }
    if(null!=pStrPayroll){
      strShortPayroll = pStrPayroll.substring(0,6);
    }
    
    System.out.println("strShortOrganization:"+strShortOrganization);
    System.out.println("strShortPosition:"+strShortPosition);
    System.out.println("pStrSex:"+pStrSex);
    System.out.println("strShortPayroll:"+strShortPayroll);
    System.out.println("pInvAssignExcept:"+pInvAssignExcept);
    
    OADBTransaction oaDBTransaction =  this.getOADBTransaction();
    Connection connection = oaDBTransaction.getJdbcConnection();
    
    String strPrepStmt = " select  substr(flv.description, instr(flv.description, '.', 1)+1) kit " + 
                        "    from  fnd_lookup_values flv " + 
                        "   where  1=1 " + 
                        "    AND flv.lookup_type = 'XXGAM_ASIG_KIT_UNIF_"+strShortOrganization+"' " + 
                        "    AND flv.enabled_flag = 'Y' " + 
                        "    AND flv.language = SYS_CONTEXT('USER', 'LANG') " + 
                        "    and trunc(sysdate) between nvl(flv.start_date_active,trunc(sysdate)) " + 
                        "                           and nvl(flv.end_date_active,TO_DATE('31/12/4712', 'DD/MM/YYYY')) " + 
                        "    and substr(flv.description, 0, instr(flv.description, '.', 1)) = ? " + 
                        "    AND substr(flv.lookup_code, instr(flv.lookup_code, '.', 1, 2)+1) = ? "+
                      /*  "    and substr(flv.meaning,instr(flv.meaning,'.')+1,6) = ? "; */
                        "    and substr(flv.meaning,instr(flv.meaning,'.')+1) = ? "+
                        "    and flv.lookup_code like ? ";
    PreparedStatement prepStmt = null;
    ResultSet resultSet = null;

    try
    {
      prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
      prepStmt.setString(1,strShortPosition+".");
      prepStmt.setString(2,pStrSex);
      prepStmt.setString(3,strShortPayroll+"."+pStrZona);
      prepStmt.setString(4,"%"+pInvAssignExcept+"%");
      resultSet = prepStmt.executeQuery();
      
      while(resultSet.next()){
        System.out.println("DEBUG GNOSISHCM kit "+ counter +":  "+resultSet.getString("kit"));
        counter = counter +1;
        kitsAssig.add(resultSet.getString("kit"));
        strAvailableKits = strAvailableKits+"'"+resultSet.getString("kit")+"',";
      }
      
    } catch (SQLException sqle)
    {
      kitsAssig.add("EXCEPTION al obtener los kits disponibles en funcion de organizacion, puesto, genero. "+sqle.getErrorCode()+" , "+sqle.getMessage());
      return kitsAssig;
    }
    
    System.out.println("strAvailableKits:"+strAvailableKits);
    
    closeResultSet(resultSet);
    closePreparedStatement(prepStmt);
    if(0==counter){
      kitsAssig.add("EXCEPTION al obtener los kits disponibles en funcion de organizacion, puesto, genero: No se encontraron registros.");
    }else{
     retval = strAvailableKits;
    }
    
    
    /************************************************************************
    * Regla de negocio: Si un empleado no tiene una UNI creada puede seguir el flujo 
    * de captura de tallas y creacion de UNIS sin validar la apertura de periodos
    *****************************************************************************/
    
    String strNumUNIS =  this.getNumberUNIS();  
    System.out.println("strNumUNIS:"+strNumUNIS);
    if(null!=strNumUNIS){
      if(strNumUNIS.contains("EXCEPTION")){
        kitsAssig.add(strNumUNIS); 
      }else if(!"0".equals(strNumUNIS)){
        
        String valAperturaPeriodos = this.valAperturaPeriodsKits(strAvailableKits,connection);
        if(null!=valAperturaPeriodos){
          if(valAperturaPeriodos.contains("EXCEPTION")){
            kitsAssig.add(valAperturaPeriodos);   
          }
        }
        
      } /** if(!"0".equals(strNumUNIS)){ **/
    }
    
    
    return kitsAssig; 
    
  }
  
    /**
     * Metodo que recupera los kits disponibles por cada empleado y los
     * devuelve en una cadena
     * @param pStrOrganization
     * @param pStrPosition
     * @param pStrSex
     * @param connection
     */
    public String fillAvailableKitsInfo(String pStrOrganization
                                      ,String pStrPosition
                                      ,String pStrSex
                                      ,String pStrPayroll
                                      ,String pStrZona
                                      ,String pStrInvAssignExcept
                                      ,Connection connection)
    {
      String retval = "";
      String strAvailableKits="";
      int counter = 0;
      String strShortOrganization = null; 
      String strShortPosition = null; 
      String strShortPayroll = null; 
      
      
      if(null!=pStrOrganization){
        strShortOrganization = pStrOrganization.substring(0,2);
      }
      if(null!=pStrPosition){
        strShortPosition = pStrPosition.substring(pStrPosition.indexOf('.',3)+1);
      }
      if(null!=pStrPayroll){
        strShortPayroll = pStrPayroll.substring(0,6);
      }
      
      System.out.println("strShortOrganization:"+strShortOrganization);
      System.out.println("strShortPosition:"+strShortPosition);
      System.out.println("pStrSex:"+pStrSex);
      System.out.println("pStrZona:"+pStrZona);
      System.out.println("strShortPayroll:"+strShortPayroll);
      System.out.println("pStrInvAssignExcept:"+pStrInvAssignExcept);
      
      String strPrepStmt = " select  substr(flv.description, instr(flv.description, '.', 1)+1) kit " + 
                          "    from  fnd_lookup_values flv " + 
                          "   where  1=1 " + 
                          "    AND flv.lookup_type = 'XXGAM_ASIG_KIT_UNIF_"+strShortOrganization+"' " + 
                          "    AND flv.enabled_flag = 'Y' " + 
                          "    AND flv.language = SYS_CONTEXT('USER', 'LANG') " + 
                          "    and trunc(sysdate) between nvl(flv.start_date_active,trunc(sysdate)) " + 
                          "                           and nvl(flv.end_date_active,TO_DATE('31/12/4712', 'DD/MM/YYYY')) " + 
                          "    and substr(flv.description, 0, instr(flv.description, '.', 1)) = ? " + 
                          "    AND substr(flv.lookup_code, instr(flv.lookup_code, '.', 1, 2)+1) = ? "+
                         /* "    and substr(flv.meaning,instr(flv.meaning,'.')+1,6) = ? "; */
                          " and substr(flv.meaning,instr(flv.meaning,'.')+1) = ? "+
                          " and flv.lookup_code like ? ";
      PreparedStatement prepStmt = null;
      ResultSet resultSet = null;

      try
      {
        prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
        prepStmt.setString(1,strShortPosition+".");
        prepStmt.setString(2,pStrSex);
        prepStmt.setString(3,strShortPayroll+"."+pStrZona);
        prepStmt.setString(4,"%"+pStrInvAssignExcept+"%");
        resultSet = prepStmt.executeQuery();
        
        while(resultSet.next()){
          System.out.println("DEBUG GNOSISHCM kit "+ counter +":  "+resultSet.getString("kit"));
          counter = counter +1;
          strAvailableKits = strAvailableKits+" "+resultSet.getString("kit")+" ";
        }
        
      } catch (SQLException sqle)
      {
        strAvailableKits = "EXCEPTION al obtener los kits disponibles en funcion de organizacion, puesto, genero. "+sqle.getErrorCode()+" , "+sqle.getMessage();
        return retval; 
      }
      
      closeResultSet(resultSet);
      closePreparedStatement(prepStmt);
      if(0==counter){
        retval = "EXCEPTION al obtener los kits disponibles en funcion de organizacion, puesto, genero: No se encontraron registros.";
        return retval; 
      }else{
       retval = strAvailableKits;
      }
      
      return retval; 
      
    }
  
    /**
     * Metodo que recupera los kits para los empleados
     * @param pHashSet
     * @param pKitAssig
     */
    
    public String fillPersonSizeKitAssig(HashSet<String> pHashSet, String pKitAssig){
        String retval = null;
        String methodName = "fillPersonSizeKitAssig";
        String LinesQuery = null;
        int counter = 0;
        
        System.out.println("Into "+ methodName);
        System.out.println("DEBUG GNOSISHCM pKitAssig: "+pKitAssig);
        XxGamKitItemsInfoVOImpl KitItemsInfoVOImpl = this.getXxGamKitItemsInfoVO1();
        XxGamKitItemsInfoVORowImpl KitItemsInfoVORow = null;
        
        if (null != KitItemsInfoVOImpl){
            if(!KitItemsInfoVOImpl.isPreparedForExecution()){
              KitItemsInfoVOImpl.executeQuery();
            }
            
            OADBTransaction oaDBTransaction =  this.getOADBTransaction();
            Connection connection = oaDBTransaction.getJdbcConnection();
            
            String strPrepStmt = " SELECT XID.KIT_COD " + 
                                    "   , XID.DOTA_ID " + 
                                    "   , XID.UNIFORM_TYPE_COD " + 
                                    "   , XID.PLANTA_QTY " + 
                                    "   , XID.EVENT_QTY " + 
                                    "   , XID.MEASURE_UNIT_COD " + 
                                    "   , XID.CYCLE_COD " + 
                                    "   , XID.NOMENCLATURE " + 
                                    "   , XID.NP_COD " + 
                                    " FROM XXGAM_INV_DOTA XID " +  
                                    " WHERE 1=1 " + 
                                    " AND NVL(XID.SUST_FLAG,'X') <> 'Y' "+
                                    " AND XID.KIT_COD = ? ";
                                    //"    AND XID.DOTA_ID = ? ";
             PreparedStatement prepStmt = null;
             ResultSet resultSet = null;
                                    
             try{
                 prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                 prepStmt.setString(1, pKitAssig);
                 resultSet = prepStmt.executeQuery();
                 
                 if(resultSet.isFirst()){
                     System.out.println("DEBUG GNOSISHCM First Register in resultSet");
                 }else{
                     System.out.println("DEBUG GNOSISHCM  NOT First Register in resultSet");
                     
                 }
                 
                 while(resultSet.next()){
                    /** Regla de Negocio 27012017 **/
                    LinesQuery = /* resultSet.getString("UNIFORM_TYPE_COD")+"-"+ **/
                                /* resultSet.getString("PLANTA_QTY")+"-"+ */
                                /* resultSet.getString("EVENT_QTY")+"-"+  */
                                /* resultSet.getString("MEASURE_UNIT_COD")+"-"+ */
                                /* resultSet.getString("CYCLE_COD")+"-"+ */
                                 resultSet.getString("NOMENCLATURE")+"-"+ 
                                 resultSet.getString("NP_COD");
                                 
                    if(!(isInHashSet(pHashSet, LinesQuery))){
                          System.out.println("DEBUG GNOSISHCM isInHashSet is TRUE");
                          KitItemsInfoVORow = (XxGamKitItemsInfoVORowImpl)KitItemsInfoVOImpl.createRow();
                          KitItemsInfoVORow.setKitCode(resultSet.getString("KIT_COD"));
                          KitItemsInfoVORow.setDotaId(resultSet.getString("DOTA_ID"));
                          KitItemsInfoVORow.setUniformTypeCode(resultSet.getString("UNIFORM_TYPE_COD"));
                          KitItemsInfoVORow.setPlantaQTY(resultSet.getString("PLANTA_QTY"));
                          KitItemsInfoVORow.setEventQTY(resultSet.getString("EVENT_QTY"));
                          KitItemsInfoVORow.setMeasureUnitCode(resultSet.getString("MEASURE_UNIT_COD"));
                          KitItemsInfoVORow.setCycleCode(resultSet.getString("CYCLE_COD"));
                          KitItemsInfoVORow.setNomenclature(resultSet.getString("NOMENCLATURE"));
                          KitItemsInfoVORow.setNPCode(resultSet.getString("NP_COD"));
                          
                          /*Consultaremos la tabla de historial para recuperar los valores correspondientes*/
                          XxGamPersonalUniformInfoVOImpl SizesPersonalUniformInfoVOImpl = getXxGamPersonalUniformInfoVO1();
                           
                          XxGamPersonalUniformInfoVORowImpl SizesPersonalUniformInfoRow = null;
                          if(null!=SizesPersonalUniformInfoVOImpl){
                              System.out.println("Into SizesPersonalUniformInfoVOImpl");
                              SizesPersonalUniformInfoRow = (XxGamPersonalUniformInfoVORowImpl)SizesPersonalUniformInfoVOImpl.first();
                              String[] arrayPersonIds = new String[6];
                              String[] outArraySizes = new String[5];
                              
                              arrayPersonIds[0]=SizesPersonalUniformInfoRow.getPersonID();
                              arrayPersonIds[1]=SizesPersonalUniformInfoRow.getAssigmentID();
                              arrayPersonIds[2]=SizesPersonalUniformInfoRow.getGradeID();
                              arrayPersonIds[3]=SizesPersonalUniformInfoRow.getCodeCombinationID();
                              arrayPersonIds[4]=SizesPersonalUniformInfoRow.getPersonTypeID();
                              arrayPersonIds[5]=resultSet.getString("NOMENCLATURE");
                              
                              outArraySizes[0] = "EXCEPTION" ;
                              sizesConsult(arrayPersonIds, outArraySizes);
                              
                              if(!(outArraySizes[0].contains("EXCEPTION"))){
                                  KitItemsInfoVORow.setTallaId(outArraySizes[1]);
                                  KitItemsInfoVORow.setSizeLOV(outArraySizes[2]);
                                  KitItemsInfoVORow.setInventoryId(outArraySizes[3]);
                                  KitItemsInfoVORow.setObservaciones(outArraySizes[4]);//Add by SEJR 30032017
                                  System.out.println("Sucess Sizes");
                              }
                          
                              
                          }
                          
                          retval = "SUCESS";
                          counter = counter + 1;
                          System.out.println("DEBUG GNOSISHCM retval:  "+ retval+"  counter:  "+ counter);
                          /*Llamado a metodo para almacenar cadena*/
                          if(setHashSet(pHashSet, LinesQuery)){
                              KitItemsInfoVOImpl.insertRow(KitItemsInfoVORow);
                          }
                    }else{
                        retval = "Some line exist in VO";
                        System.out.println("DEBUG GNOSISHCM : "+retval);
                        counter = counter + 1;
                    }
                 }
             }catch(SQLException sqle){
                 System.out.println("DEBUG GNOSISHCM "+ "SQLEXCEPTION"+ sqle.getErrorCode()+" , "+sqle.getMessage());
                 retval = "EXCEPTION al obtener los kits disponibles en funcion de organizacion, puesto, genero. "+sqle.getErrorCode()+" , "+sqle.getMessage();
             }
            closeResultSet(resultSet);
            closePreparedStatement(prepStmt);
            
            /**Recuperamos los kits disponibles*/
        }
        if(counter==0){
            retval = "EXCEPTION, No data recovered Kit:"+pKitAssig;
            System.out.println("DEBUG GNOSISHCM "+ retval);
        }

        return retval;
    }
    
  /**
       * Metodo que actualiza las tallas o ingresa nuevos registros
       * en caso de no existir historial
       * MODIFICADO!!!!!
       * @param kitTypes
       * @param pKitValues
       * @param pageContext
       */
      public String setSizesUpdateInsert(ArrayList<String> kitTypes
                                         , String[] pKitValues
                                         , OAPageContext pageContext){
          String methodName = "setSizesUpdateInsert";
          String retval = "EXCEPTION";
          int counterUpdates = 0;
          
          String[] arrayParameters = new String[6];
          
          System.out.println("DEBUG GNOSISHCM Into "+methodName);
          
          /*Recuperamos iformacion de Empleado*/
          XxGamPersonalUniformInfoVOImpl ConsultPersonalUniformInfoVOImpl = this.getXxGamPersonalUniformInfoVO1();
          XxGamPersonalUniformInfoVORowImpl ConsultPersonalUniformInfoVORowImpl = null;
          
          if(null!=ConsultPersonalUniformInfoVOImpl){
              ConsultPersonalUniformInfoVORowImpl = (XxGamPersonalUniformInfoVORowImpl)ConsultPersonalUniformInfoVOImpl.first();
              
              System.out.println("DEBUG GNOSISHCM Into TempPersonalUniformInfoVOImpl");
              
              System.out.println("PersonID:  "+ConsultPersonalUniformInfoVORowImpl.getPersonID());
              System.out.println("AssignmentID:  "+ConsultPersonalUniformInfoVORowImpl.getAssigmentID());
              System.out.println("JobID:  "+ConsultPersonalUniformInfoVORowImpl.getGradeID());
              System.out.println("CodeCombination:  "+ConsultPersonalUniformInfoVORowImpl.getCodeCombinationID());
              System.out.println("PersonTypeID:  "+ConsultPersonalUniformInfoVORowImpl.getPersonTypeID());
              System.out.println("pDotaId:  "+pKitValues[1]);
              System.out.println("pTallaId:  "+pKitValues[2]);
              System.out.println("SizeLOV:  "+pKitValues[3]);
              System.out.println("InventoryId:  "+pKitValues[4]);
              System.out.println("Nomenclature:  "+pKitValues[6]);
              System.out.println("[New]Observaciones: "+pKitValues[9]); //Add by SEJR 30032017
              /*OADBTransaction oaDBTransaction =  this.getOADBTransaction();//Add by SEJR 30032017
              Connection connection = oaDBTransaction.getJdbcConnection(); //Add by SEJR 30032017
              String v_grupoPago = this.getGrupoPagoFromLkp("03 SOB - SOBRECARGO",connection);//Add by SEJR 30032017
              System.out.println("[NEW GRUPO DE PAGO] obteniendo:"+v_grupoPago);//Add by SEJR 30032017*/
              arrayParameters[0]=null;
              arrayParameters[1]=ConsultPersonalUniformInfoVORowImpl.getPersonID();
              arrayParameters[2]=ConsultPersonalUniformInfoVORowImpl.getAssigmentID();
              arrayParameters[3]=ConsultPersonalUniformInfoVORowImpl.getGradeID();
              arrayParameters[4]=ConsultPersonalUniformInfoVORowImpl.getCodeCombinationID();
              arrayParameters[5]=ConsultPersonalUniformInfoVORowImpl.getPersonTypeID();
              
          }
          
          /*Limpiamos Cache de Entity Object*/
          getTransaction().clearEntityCache(null);
          
          XxGamSizesUniformsHistoryVOImpl SizesUniformsHistoryVOImpl = this.getXxGamSizesUniformsHistoryVO1();
          
          if(null!=SizesUniformsHistoryVOImpl){
              System.out.println("DEBUG GNOSISHCM Into SizesUniformsHistoryVOImpl");
              
              if(!SizesUniformsHistoryVOImpl.isPreparedForExecution()){
                System.out.println("Into !SizesUniformsHistoryVOImpl.isPreparedForExecution()");
                SizesUniformsHistoryVOImpl.initQueryUpdateRegisters(arrayParameters, pKitValues[6]);
                System.out.println("Fetched Row Count:"+SizesUniformsHistoryVOImpl.getFetchedRowCount());
              }else{
                  System.out.println("Into !SizesUniformsHistoryVOImpl.isPreparedForExecution()ELSE");
                  SizesUniformsHistoryVOImpl.initQueryUpdateRegisters(arrayParameters, pKitValues[6]); 
                  System.out.println("Fetched Row Count:"+SizesUniformsHistoryVOImpl.getFetchedRowCount());
              }
              
              System.out.println("XxGamSizesUniformsHistoryVO RowCount"+SizesUniformsHistoryVOImpl.getRowCount());
              System.out.println("XxGamSizesUniformsHistoryVO FetchedRowCount()"+SizesUniformsHistoryVOImpl.getFetchedRowCount());
              
              System.out.println("Result of Excecute  SizesUniformsHistoryVOImpl  " + arrayParameters[0]);
              
              RowSetIterator rowSetIteratorHistory = SizesUniformsHistoryVOImpl.createRowSetIterator(null);
              XxGamSizesUniformsHistoryVORowImpl SizesUniformsHistoryVORow = null;
              
              System.out.println("rowSetIteratorHistory count:  "+rowSetIteratorHistory.getRowCount());
              System.out.println("rowSetIteratorHistory count:  "+rowSetIteratorHistory.getFetchedRowCount());
              
              if(!(arrayParameters[0].contains("EXCEPTION"))){
                  if(null!=rowSetIteratorHistory){
                      if(rowSetIteratorHistory.getFetchedRowCount() != 0){
                          System.out.println("DEBUG GNOSISHCM have registers! UPDATE PROCESS");
                          
                          OADBTransaction oaDBTransaction =  this.getOADBTransaction();
                          Connection connection = oaDBTransaction.getJdbcConnection();
                          HashSet<String> KitsHashSet = new HashSet<String>();
                          while(rowSetIteratorHistory.hasNext()){
                              System.out.println("DEBUG GNOSISHCM Into rowSetIteratorHistory.hasNext");
                              SizesUniformsHistoryVORow = (XxGamSizesUniformsHistoryVORowImpl)rowSetIteratorHistory.next();
                              
                              /**Modificacion por NRC 14-feb-2017*/
                              /**Lineas originales*/
                              /**SizesUniformsHistoryVORow.setTallaId(pKitValues[2]);
                              SizesUniformsHistoryVORow.setTallaNbr(pKitValues[3]);
                              SizesUniformsHistoryVORow.setInventoryId(converteStringToNumber(pKitValues[4]));*/
                              /**fin lineas originales*/
                              System.out.println("Consult KIT: "+SizesUniformsHistoryVORow.getKitCod());
                              
                              String[] updateValues = this.paramsKitConsult(  connection
                                                                            , SizesUniformsHistoryVORow.getKitCod()
                                                                            , pKitValues[6]
                                                                            , pKitValues[4]/*Inventory Id*/
                                                                            );
                                                                            
                              if(!updateValues[0].contains("EXCEPTION")){
                                      /**si hace match con KIT actualiza*/
                                      SizesUniformsHistoryVORow.setDotaId(updateValues[1]);
                                      SizesUniformsHistoryVORow.setTallaId(updateValues[2]);
                                      SizesUniformsHistoryVORow.setTallaNbr(pKitValues[3]);
                                      SizesUniformsHistoryVORow.setInventoryId(converteStringToNumber(pKitValues[4]));
                                      SizesUniformsHistoryVORow.setAttribute1(pKitValues[9]); //Add by SEJR 30032017
                                      System.out.println("[New Sucess Update]Observaciones:"+pKitValues[9]); //Add by SEJR 30032017
                                      retval = "Sucess Update";
                              }
                              KitsHashSet.add(SizesUniformsHistoryVORow.getKitCod());
                              System.out.println("retval in Update: "+retval);
                              counterUpdates = counterUpdates + 1;
                              /**fin modificacion 14-feb-2017*/
                              //retval = "Sucess Update";
                              //counterUpdates = counterUpdates + 1;
                              System.out.println("counterUpdate:  "+counterUpdates);
                          }
                          
                          for(String kitTemp:kitTypes){
                              if(!isInHashSet(KitsHashSet, kitTemp)){
                                  String[] updateValues = this.paramsKitConsult(  connection
                                                                                , kitTemp
                                                                                , pKitValues[6]
                                                                                , pKitValues[4]/*Inventory Id*/
                                                                                );
                                  if(!updateValues[0].contains("EXCEPTION")){
                                      /**si el KIT no esta, INSERTA un Registro*/
                                      XxGamSizesUniformsHistoryVORowImpl SizesUniformsHistoryVORowInsert = (XxGamSizesUniformsHistoryVORowImpl)SizesUniformsHistoryVOImpl.createRow();
                                      System.out.println("No match KIT: "+kitTemp);
                                       SizesUniformsHistoryVORowInsert.setUnifId(getOADBTransaction().getSequenceValue("XXGAM_INV_SIZ_UNIF_HISTORY_S"));
                                       SizesUniformsHistoryVORowInsert.setPersonId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getPersonID()));
                                       SizesUniformsHistoryVORowInsert.setAssignmentId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getAssigmentID()));
                                       SizesUniformsHistoryVORowInsert.setJobId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getGradeID()));
                                       SizesUniformsHistoryVORowInsert.setCodeCombinationId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getCodeCombinationID()));
                                       SizesUniformsHistoryVORowInsert.setPersonTypeId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getPersonTypeID()));
                                       SizesUniformsHistoryVORowInsert.setKitCod(kitTemp);
                                       SizesUniformsHistoryVORowInsert.setDotaId(updateValues[1]);
                                       SizesUniformsHistoryVORowInsert.setTallaId(updateValues[2]);
                                       SizesUniformsHistoryVORowInsert.setTallaNbr(pKitValues[3]);
                                       SizesUniformsHistoryVORowInsert.setNomenclature(pKitValues[6]);
                                       SizesUniformsHistoryVORowInsert.setInventoryId(converteStringToNumber(pKitValues[4]));
                                       SizesUniformsHistoryVORowInsert.setAttribute1(pKitValues[9]); //Add by SEJR 30032017
                                       System.out.println("[New Update/Insert]Observaciones:"+pKitValues[9]); //Add by SEJR 30032017
                                       System.out.println("XXGAM_INV_SIZ_UNIF_HISTORY_S:"+ SizesUniformsHistoryVORowInsert.getUnifId());
                                       
                                      SizesUniformsHistoryVOImpl.insertRow(SizesUniformsHistoryVORowInsert);
                                      retval = "Sucess Update/Insert";
                                  }
                                  System.out.println(retval);
                              }
                          }
                          
                          getTransaction().setClearCacheOnCommit(Boolean.TRUE.booleanValue());
                          this.commit();
                      }
                      else{
                          System.out.println("DEBUG GNOSISHCM no register exists!! INSERT PROCESS");
                          
                          /*recuperamos AM de LOV*/
                          /**System.out.println("PersonID:  "+ConsultPersonalUniformInfoVORowImpl.getPersonID());
                          System.out.println("AssignmentID:  "+ConsultPersonalUniformInfoVORowImpl.getAssigmentID());
                          System.out.println("JobID:  "+ConsultPersonalUniformInfoVORowImpl.getGradeID());
                          System.out.println("CodeCombination:  "+ConsultPersonalUniformInfoVORowImpl.getCodeCombinationID());
                          System.out.println("PersonTypeID:  "+ConsultPersonalUniformInfoVORowImpl.getPersonTypeID());
                          System.out.println("pDotaId:  "+pKitValues[1]);
                          System.out.println("pTallaId:  "+pKitValues[2]);
                          System.out.println("SizeLOV:  "+pKitValues[3]);
                          System.out.println("InventoryId:  "+pKitValues[4]);*/
                          
                          /*Investigamos si existe en todos los kits el Articulo*/
                          
                          /*levantamos la conexion para evitar retraso*/
                          OADBTransaction oaDBTransaction =  this.getOADBTransaction();
                          Connection connection = oaDBTransaction.getJdbcConnection();
                          
                          /*Ciclo para comprobar que existen en cada Kit*/
                           System.out.println("Sequence: "+getOADBTransaction().getSequenceValue("XXGAM_INV_SIZ_UNIF_HISTORY_S"));
                          for(String kitTemp:kitTypes){
                              /*preguntamos si existe Articulo en KIT*/
                              if(this.kitConsult(connection, kitTemp, pKitValues)){
                                  System.out.println("DEBUG GNOSISHCM Into kitConsult()");
                                  System.out.println("Before Insert");
                                  
                                  String[] updateValues = this.paramsKitConsult(  connection
                                                                                , kitTemp
                                                                                , pKitValues[6]
                                                                                , pKitValues[4]/*Inventory Id*/
                                                                                );
                                  if(!updateValues[0].contains("EXCEPTION")){
                                      SizesUniformsHistoryVORow = (XxGamSizesUniformsHistoryVORowImpl)SizesUniformsHistoryVOImpl.createRow();
                                      
                                      SizesUniformsHistoryVORow.setUnifId(getOADBTransaction().getSequenceValue("XXGAM_INV_SIZ_UNIF_HISTORY_S"));
                                      SizesUniformsHistoryVORow.setPersonId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getPersonID()));
                                      SizesUniformsHistoryVORow.setAssignmentId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getAssigmentID()));
                                      SizesUniformsHistoryVORow.setJobId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getGradeID()));
                                      SizesUniformsHistoryVORow.setCodeCombinationId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getCodeCombinationID()));
                                      SizesUniformsHistoryVORow.setPersonTypeId(converteStringToNumber(ConsultPersonalUniformInfoVORowImpl.getPersonTypeID()));
                                      SizesUniformsHistoryVORow.setKitCod(kitTemp);
                                      SizesUniformsHistoryVORow.setDotaId(updateValues[1]);
                                      SizesUniformsHistoryVORow.setTallaId(updateValues[2]);
                                      SizesUniformsHistoryVORow.setTallaNbr(pKitValues[3]);
                                      SizesUniformsHistoryVORow.setNomenclature(pKitValues[6]);
                                      SizesUniformsHistoryVORow.setInventoryId(converteStringToNumber(pKitValues[4]));
                                      SizesUniformsHistoryVORow.setAttribute1(pKitValues[9]); //Add by SEJR 30032017
                                      System.out.println("[New Sucess Insert]Observaciones:"+pKitValues[9]); //Add by SEJR 30032017
                                      /**Agrgado por NRC 13-feb-2017*/
                                      /*SizesUniformsHistoryVORow.setOperatingUnitId();*/
                                      /*SizesUniformsHistoryVORow.setHrOrgId();*/
                                      /*SizesUniformsHistoryVORow.setInvOrgId();*/
                                      
                                    /*  getTransaction().setClearCacheOnCommit(Boolean.TRUE.booleanValue()); */
                                     
                                      SizesUniformsHistoryVOImpl.insertRow(SizesUniformsHistoryVORow);
                                  }
                                  this.commit();
                                  System.out.println("Insert!");
                                  retval = "Sucess Insert";
                              }/**END if(this.kitConsult(connection, kitTemp, pKitValues))*/
                          }/**END for(String kitTemp:kitTypes)*/
                      }/**END else if(rowSetIteratorHistory.getFetchedRowCount() != 0)*/
                  
                  }/**END if(null!=rowSetIteratorHistory)*/
                  rowSetIteratorHistory.closeRowSetIterator();
              }
              
          }
          
          
          System.out.println("DEBUG GNOSISHCM retval: "+retval);
          return retval;                                
      }    
   
    /**
     * Metodo que determina si algun articulo pertenece a mas de un kit
     * en caso de no devuelve falso
     * @param connection
     * @param kitType
     * @param kitValues
     */
   public boolean kitConsult(Connection connection, String kitType, String[] kitValues){
       String methodName = "kitConsult";
       boolean retval = false;
       String flag = "EXCEPTION";
       
       System.out.println("DEBUG GNOSISHCM Into:  "+methodName);
       
       String strQuery = " SELECT DISTINCT 'X' FLAG "+
                         "  FROM XXGAM_INV_DOTA " +
                         "  WHERE 1=1 " +
                         "      AND KIT_COD = ? " +
                         "      AND NP_COD = ? " +
                         "      AND NOMENCLATURE = ?  ";
                        /***********************************
                         "      AND PLANTA_QTY = ? " +
                         "      AND EVENT_QTY = ? ";
                        ***********************************/    
       PreparedStatement prepStmt = null;
       ResultSet resultSet = null;
       
       try{
           System.out.println("DEBUG GNOSISHCM Into Prep Statement");
           prepStmt = connection.prepareStatement(strQuery,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
           prepStmt.setString(1, kitType);
           prepStmt.setString(2, kitValues[5]);
           prepStmt.setString(3, kitValues[6]);
          /** prepStmt.setString(4, kitValues[7]); **/
          /**  prepStmt.setString(5, kitValues[8]); **/
           
           resultSet = prepStmt.executeQuery();
           while(resultSet.next()){
               flag = resultSet.getString("FLAG");
           }
           
       }catch(SQLException sqle){
           System.out.println("DEBUG GNOSISHCM EXCEPTION");
           System.out.println("CAUSE:  " + sqle.getCause() +"CODE: " +sqle.getErrorCode());
       }
       this.closePreparedStatement(prepStmt);
       this.closeResultSet(resultSet);
       System.out.println("flag:   "+flag);
       if(!(flag.contains("EXCEPTION"))){
           retval = true;
       }
       
       return retval;
   }
    /**
     * Metodo de recupera tallas ya guardadas en historial
     * @param pArrayPersonIds
     */
    public void sizesConsult(String[] pArrayPersonIds, String[] pOutSizes){
        String methodName = "sizesConsult";
        String retval="EXCEPTION";
        
        OADBTransaction oaDBTransaction =  this.getOADBTransaction();
        Connection connection = oaDBTransaction.getJdbcConnection();
        
        String stmtQuery = " SELECT TALLA_ID "+
                            "        ,TALLA_NBR "+
                            "        ,INVENTORY_ID "+
                            "        ,ATTRIBUTE1 "+ //Add by SEJR 30032017
                            "  FROM XXGAM_INV_SIZ_UNIF_HISTORY "+
                            "  WHERE 1=1 "+
                            "    AND PERSON_ID = ?  "+
                            "    AND ASSIGNMENT_ID = ?  "+
                            "    AND JOB_ID =  ?"+ 
                            "    AND CODE_COMBINATION_ID = ?  "+
                            "    AND PERSON_TYPE_ID = ?  "+
                            "    AND NOMENCLATURE = ?  ";
                            
        PreparedStatement prepStatement = null;
        ResultSet resultSet = null;
        
        try{
            prepStatement = connection.prepareStatement(stmtQuery,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            prepStatement.setString(1, pArrayPersonIds[0]);
            prepStatement.setString(2, pArrayPersonIds[1]);
            prepStatement.setString(3, pArrayPersonIds[2]);
            prepStatement.setString(4, pArrayPersonIds[3]);
            prepStatement.setString(5, pArrayPersonIds[4]);
            prepStatement.setString(6, pArrayPersonIds[5]);
            resultSet = prepStatement.executeQuery();
            
            while(resultSet.next()){
                pOutSizes[0] = "Succes!";
                pOutSizes[1] = resultSet.getString("TALLA_ID");
                pOutSizes[2] = resultSet.getString("TALLA_NBR");
                pOutSizes[3] = resultSet.getString("INVENTORY_ID");
                pOutSizes[4] = resultSet.getString("ATTRIBUTE1"); // Add by SEJR 30032017
            }
            
        }catch(SQLException sqle){
            System.out.println("DEBUG GNOSISHCM EXCEPTION IN "+methodName);
            System.out.println(sqle.getCause()+" "+sqle.getMessage());
            pOutSizes[0] = retval;
        }
        
      this.closePreparedStatement(prepStatement);
      this.closeResultSet(resultSet);
        
        
    }
   
    /**
     * Metodo de prueba que usa HashSet Class
     * @param pHashSet
     * @param pLines
     */
    private boolean isInHashSet(HashSet<String> pHashSet, String pLines){
        boolean retval = true;
        try{
            retval=pHashSet.contains(pLines);
        }catch(Exception e){
            System.out.println("DEBUG GNOSISHCM EXCEPTION:  "+e.getCause()+e.getMessage());
        }
        return retval;
    }
    
    /**
     * Metodo de prueba que usa HashSet Class
     * @param pElement
     */
    private boolean setHashSet(HashSet<String> pHashSet, String pElement){
        boolean retval = false;
        try{
            pHashSet.add(pElement);
            retval = true;
        }catch(Exception e){
            System.out.println("DEBUG GNOSISHCM EXCEPTION:  "+e.getCause()+e.getMessage());
        }
        return retval;
    }
  
    /**
     * Metodo que cierra un Result Set
     * @param pResultSet
     */
    private void closeResultSet(ResultSet pResultSet)
    {
      if(null!=pResultSet){
        try
        {
          pResultSet.close();
        } catch (SQLException sqle)
        {
         throw new OAException(sqle.getErrorCode()+ " , "+sqle.getMessage(),OAException.ERROR);
        }
      }
    }
    
    
    /**
     * Metodo que cierra un Prepared Statement
     * @param pPrepStmt
     */
    private void closePreparedStatement(PreparedStatement pPrepStmt)
    {
       if(null!=pPrepStmt){
        try
        {
          pPrepStmt.close();
        } catch (SQLException sqle)
        {
           throw new OAException(sqle.getErrorCode()+ " , "+sqle.getMessage(),OAException.ERROR);
        }
      }
    }
    
    
    /**
     * Metodo que hace Commit
     */
    public void commit() {
        String methodName = "commit";
        String errorMsg = null;
        System.out.println("DEBUG GNOSISHCM Into "+methodName);
        
        try {
            getDBTransaction().commit();
        } catch (Exception exception) {
            exception.printStackTrace();
            if (exception != null) {
                if (exception.getMessage() != null) {
                    errorMsg = exception.getMessage();
                } else if (exception.getClass() != null)
                    errorMsg = exception.getClass().toString();
                else {
                    errorMsg = "Ocurre Exception";
                }
            }

            throw new OAException(errorMsg, (byte)0);
        }
    }
    
    private Number converteStringToNumber(String pValue){
        String methodName = "converteIntegerToNumber";
        Number retvalNumber = null;
        if(null==pValue){
         return null; 
        }
        
        System.out.println("DEBUG GNOSISHCM Into : "+methodName+" parameter:"+pValue);
        
        try {
            retvalNumber = new Number(pValue);
        } catch (Exception e) {
            System.out.println("DEBUG GNOSISHCM EXCEPTION");
            System.out.println("Excp: "+e.getCause()+"   "+e.getMessage());
        }
        return retvalNumber;
    }



  
  
  /**
   * Metodo que valida que ninguna talla se quede sin llenar 
   * @return
   */
  public com.sun.java.util.collections.List valAllTallasFilled()
  {
    com.sun.java.util.collections.List retval = new com.sun.java.util.collections.ArrayList(); 
    XxGamKitItemsInfoVOImpl KitItemsInfoVOImpl = getXxGamKitItemsInfoVO1(); 
    XxGamKitItemsInfoVORowImpl KitItemsInfoVORowImpl = null; 
    RowSetIterator KitItemsInfoIter = KitItemsInfoVOImpl.createRowSetIterator(null);
    while(KitItemsInfoIter.hasNext()){
      KitItemsInfoVORowImpl = (XxGamKitItemsInfoVORowImpl)KitItemsInfoIter.next();
      String strSizeLOV = KitItemsInfoVORowImpl.getSizeLOV(); 
      String strInventoryId = KitItemsInfoVORowImpl.getInventoryId(); 
      String strTallaId = KitItemsInfoVORowImpl.getTallaId();
      String strNomenclature = KitItemsInfoVORowImpl.getNomenclature(); 
      if(null==strSizeLOV||null==strInventoryId||null==strTallaId
        ||("".equals(strSizeLOV)||"".equals(strInventoryId)||"".equals(strTallaId))){
          retval.add(new OAException(strNomenclature+": no dejar vacio.",OAException.ERROR));
        }
    }
    KitItemsInfoVOImpl.closeRowSetIterator();
  
    return retval; 
  }


  /**
   * Validar linea por linea las que las tallas que eligieron sean validas 
   * @return
   */
  public com.sun.java.util.collections.List validValuesRowByRow()
  {
    
    com.sun.java.util.collections.List retval = new com.sun.java.util.collections.ArrayList();
    
    OADBTransaction oaDBTransaction =  this.getOADBTransaction();
    Connection connection = oaDBTransaction.getJdbcConnection();
    
    XxGamKitItemsInfoVOImpl KitItemsInfoVOImpl = getXxGamKitItemsInfoVO1(); 
    XxGamKitItemsInfoVORowImpl KitItemsInfoVORowImpl = null; 
    RowSetIterator KitItemsInfoIter = KitItemsInfoVOImpl.createRowSetIterator(null);
    while(KitItemsInfoIter.hasNext()){
      KitItemsInfoVORowImpl = (XxGamKitItemsInfoVORowImpl)KitItemsInfoIter.next();
      String strDotaID = KitItemsInfoVORowImpl.getDotaId();
      String strSizeLov = KitItemsInfoVORowImpl.getSizeLOV();
      String strNomenclature = KitItemsInfoVORowImpl.getNomenclature();
      String strNPCode = KitItemsInfoVORowImpl.getNPCode(); 
      if(null!=strSizeLov&&!"".equals(strSizeLov)){
        
        String[] arrayValidarTallasCorrectas = this.validarTallasCorrectas(strDotaID
                                                                          ,strSizeLov
                                                                          ,strNPCode
                                                                          ,connection);
        if(null!=arrayValidarTallasCorrectas[0]){
          if(arrayValidarTallasCorrectas[0].contains("EXCEPTION")){
            retval.add(new OAException(strNomenclature+": "+arrayValidarTallasCorrectas[0],OAException.ERROR));
          }else{
           KitItemsInfoVORowImpl.setTallaId(arrayValidarTallasCorrectas[1]);
           KitItemsInfoVORowImpl.setSizeLOV(arrayValidarTallasCorrectas[2]);
           KitItemsInfoVORowImpl.setInventoryId(arrayValidarTallasCorrectas[3]);
          }
         }  /** end if(null!=arrayValidarTallasCorrectas[0]){ **/  
        
      } /** End if(null!=strSizeLov&&!"".equals(strSizeLov)){ **/                                                            
    }/** End While **/
    KitItemsInfoVOImpl.closeRowSetIterator();
    
    
    return retval; 
    
  }

  
  /**
   * Metodo que valida que las tallas que se eligieron sean correctas 
   * @param strDotaID
   * @param strSizeLov
   * @param connection
   * @return
   */
  private String[] validarTallasCorrectas(String strDotaID
                                        , String strSizeLov 
                                        , String strNPCode
                                        , Connection connection)
  {
    String[] retval = new String[4]; 
    retval[0] = "SUCCESS"; 
    retval[1] = null;
    retval[2] = null;
    retval[3] = null;
    
    int counter = 0; 
    
    String stmtQuery = " select    xit.dota_id " + 
                       "        , xit.talla_id " + 
                       "        , xid.nomenclature||'  '||xit.talla_nbr description " + 
                       "        , xit.kit_cod " + 
                       "        , xit.talla_nbr " + 
                       "        , xit.inventory_id " + 
                       "        , xit.inventory_cod " + 
                       "        , xit.np_cod " + 
                       " from      xxgam_inv_talla xit " + 
                       "        , xxgam_inv_dota xid " + 
                       " where 1=1 " + 
                       " and xit.dota_id = xid.dota_id " + 
                       " and xid.dota_id = ? " + 
                       " and xit.talla_nbr = ? "+
                       " and xit.np_cod = ?";
                        
    PreparedStatement prepStatement = null;
    ResultSet resultSet = null;
    try{
      prepStatement = connection.prepareStatement(stmtQuery,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
      prepStatement.setDouble(1,new Double(strDotaID));
      prepStatement.setString(2,strSizeLov);
      prepStatement.setString(3,strNPCode);
      
      resultSet = prepStatement.executeQuery(); 
      while(resultSet.next()){
        counter = counter +1;
        retval[1] = resultSet.getString("talla_id");
        retval[2] = resultSet.getString("talla_nbr");
        retval[3] = resultSet.getString("inventory_id");
      } /** End While **/
    } catch (SQLException sqle)
    {
      retval[0] = "EXCEPTION al validar la talla:"+strSizeLov+" ,dotaID:"+strDotaID+" ,"+sqle.getMessage()+", "+sqle.getErrorCode();
      return retval;
    }
    
    if(0==counter){
      retval[0] = "EXCEPTION al validar la talla:"+strSizeLov+" ,dotaID:"+strDotaID+". No se encontraron Registros.";
      return retval;
    }
    
    if(counter>1){
      retval[0] = "EXCEPTION al validar la talla:"+strSizeLov+" ,dotaID:"+strDotaID+". Mas de un Registro. ";
      return retval;
    }
    
    this.closePreparedStatement(prepStatement);
    this.closeResultSet(resultSet);
    
    
    return retval; 
   
  }

  /**
   * Metodo que valida que los kits que tenga asignado un empleado 
   * se encuntro dentro del periodo de apertura
   * @param strAvailableKits
   * @param connection
   * @return
   */
  private String valAperturaPeriodsKits(String strAvailableKits, 
                                        Connection connection)
  {
    String retval ="SUCCESS";
    int counter = 0; 
    String strShortAvailableKits = strAvailableKits.substring(0,strAvailableKits.length()-1);
    String stmtQuery = " select flv.lookup_code   " + 
                       "      ,flv.meaning    " + 
                       "      ,flv.description   " + 
                       "      ,flv.enabled_flag   " + 
                       "      ,flv.start_date_active   " + 
                       "      ,flv.end_date_active   " + 
                       " from  fnd_lookup_values flv   " + 
                       " where  flv.lookup_type = 'XXGAM_APERTURA_DE_PERIODOS'  " + 
                       "  and  flv.language = sys_context('USER','LANG')   " + 
                       "  and  trunc(sysdate) between nvl(flv.start_date_active,trunc(sysdate)) " + 
                       "  and  nvl(flv.end_date_active,to_date('31/12/4712','DD/MM/YYYY')) " + 
                       "  and  flv.meaning in ("+strShortAvailableKits+") ";
    PreparedStatement prepStatement = null;
    ResultSet resultSet = null;
    
    try{
      prepStatement = connection.prepareStatement(stmtQuery,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
      resultSet = prepStatement.executeQuery(); 
      while(resultSet.next()){
        counter = counter+1;
      }
                      
    } catch (SQLException sqle)
    {
      retval ="EXCEPTION: al validar en el lookup XXGAM_APERTURA_DE_PERIODOS "+sqle.getMessage()+" , "+sqle.getErrorCode();
      return retval;
    }
    
    System.out.println("counter apertura periodos:"+counter);
    
    if(0==counter){
      retval ="EXCEPTION Los kits:"+strShortAvailableKits+" no estan abiertos." ;
      return retval;
    }
    
       return retval; 
  }

  /**
    * Metodo que recupera la asignacion por excepcion de Uniformes
    * @param strPersonType
    * @param connection
    * @return
    */
   private String[] getInvAssignExcept(String strPersonType, 
                                       Connection connection)
   {
     String[] retval = new String[2]; 
     retval[0] = "SUCCESS"; 
     retval[1] = null;
     int counter = 0; 
     String strPrepStmt = " select flv.lookup_code " + 
                         "        ,flv.meaning " + 
                         "        ,flv.description " + 
                         "        ,flv.language " + 
                         "        ,flv.start_date_active " + 
                         "        ,flv.end_date_active " + 
                         "  from fnd_lookup_values flv " + 
                         " where flv.lookup_type = 'XXGAM_INV_ASSIGN_EXCEPT' " + 
                         "   and flv.language=sys_context('USER','LANG') " + 
                         "   and flv.enabled_flag ='Y' " + 
                         "   and trunc(sysdate) between nvl(flv.start_date_active,trunc(sysdate)) " + 
                         "   and NVL(flv.end_date_active,to_date('31/12/4712','DD/MM/YYYY')) " + 
                         "   and upper(flv.meaning) = upper(?) ";
     PreparedStatement prepStmt = null;
     ResultSet resultSet = null;
     try
     {
       prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
       prepStmt.setString(1,strPersonType);
       resultSet = prepStmt.executeQuery();
       while(resultSet.next()){
         counter = counter +1; 
         retval[1] = resultSet.getString("description");
       }
     } catch (SQLException sqle)
     {
       retval[0] ="EXCEPTION al validar el tipo de empleado:"+strPersonType+", en el lookup XXGAM_INV_ASSIGN_EXCEPT. "+sqle.getErrorCode()+" , "+sqle.getMessage();
       return retval; 
     }
     
     closeResultSet(resultSet);
     closePreparedStatement(prepStmt);
     
     if(0==counter){
       retval[0] ="EXCEPTION al validar el tipo de empleado:"+strPersonType+", en el lookup XXGAM_INV_ASSIGN_EXCEPT. No se encontraron registros." ;
       return retval; 
     }
     
     if(counter>1){
       retval[0] ="EXCEPTION al validar el tipo de empleado:"+strPersonType+", en el lookup XXGAM_INV_ASSIGN_EXCEPT. Mas de un registro." ;
       return retval; 
     }
     
     return retval;
     
   }

      /**
       * Metodo que obtiene el DotaId y TallaId del Kit Correspondiente
       * en caso de no existir devuelve una excepcion.
       * @param connection
       * @param kitType
       * @param nomenclature
       * @param invId
       */
      public String[] paramsKitConsult(Connection connection, String kitType, String nomenclature, String invId){
         String methodName = "paramsKitConsult";
         String[] retval = new String[3];
         retval[0]="EXCEPTION";
          retval[1]=null;
          retval[2]=null;
         
         /*System.out.println("DEBUG GNOSISHCM Into:  "+methodName);*/
         
         String strQuery = "  select " +
                          "          XIT.DOTA_ID "+
                          "        , XIT.TALLA_ID "+
                          "        , XIT.INVENTORY_ID "+
                          "        , XID.NOMENCLATURE "+
                          "        , XIT.KIT_COD "+
                          "  from   XXGAM_INV_TALLA XIT "+
                          "        , XXGAM_INV_DOTA XID "+
                          "  where 1=1 "+
                          "  and XIT.DOTA_ID = XID.DOTA_ID "+
                          "  and  XIT.KIT_COD = ? "+
                          "  and XID.NOMENCLATURE = ? "+
                          "  and XIT.inventory_id = ? ";
                              
         PreparedStatement prepStmt = null;
         ResultSet resultSet = null;
         
         try{
             prepStmt = connection.prepareStatement(strQuery,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
             prepStmt.setString(1, kitType);
             prepStmt.setString(2, nomenclature);
             prepStmt.setString(3, invId);
             
             resultSet = prepStmt.executeQuery();
             while(resultSet.next()){
                 //flag = resultSet.getString("FLAG");
                 retval[0]="Sucess!";
                 retval[1]=resultSet.getString("DOTA_ID");
                 retval[2]=resultSet.getString("TALLA_ID");
             }
             
         }catch(SQLException sqle){
             System.out.println("DEBUG GNOSISHCM EXCEPTION");
             System.out.println("CAUSE:  " + sqle.getCause() +"CODE: " +sqle.getErrorCode());
         }
         this.closePreparedStatement(prepStmt);
         this.closeResultSet(resultSet);
         /*System.out.println("retval[0]:   "+retval[0]);*/

         return retval;
      }


      /**Metodo modificado por NRC 23 feb 2017*/
      public String valAperturaPeriodsKitsV2(String strAvailableKits, 
                                            Connection connection)
      {
        String retval ="SUCCESS";
        int counter = 0; 
        /*String strShortAvailableKits = strAvailableKits.substring(0,strAvailableKits.length()-1);*/
        String stmtQuery = " select flv.lookup_code   " + 
                           "      ,flv.meaning    " + 
                           "      ,flv.description   " + 
                           "      ,flv.enabled_flag   " + 
                           "      ,flv.start_date_active   " + 
                           "      ,flv.end_date_active   " + 
                           " from  fnd_lookup_values flv   " + 
                           " where  flv.lookup_type = 'XXGAM_APERTURA_DE_PERIODOS'  " + 
                           "  and  flv.language = sys_context('USER','LANG')   " + 
                           "  and  trunc(sysdate) between nvl(flv.start_date_active,trunc(sysdate)) " + 
                           "  and  nvl(flv.end_date_active,to_date('31/12/4712','DD/MM/YYYY')) " + 
                           "  and  flv.meaning = ?";
        PreparedStatement prepStatement = null;
        ResultSet resultSet = null;
        
        try{
          prepStatement = connection.prepareStatement(stmtQuery,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
          prepStatement.setString(1, strAvailableKits);
          resultSet = prepStatement.executeQuery(); 
          
          while(resultSet.next()){
            System.out.println("XX");
            counter = counter+1;
          }
                          
        } catch (SQLException sqle)
        {
          retval ="EXCEPTION: al validar en el lookup XXGAM_APERTURA_DE_PERIODOS "+sqle.getMessage()+" , "+sqle.getErrorCode();
          return retval;
        }
        
        System.out.println("counter apertura periodos:"+counter);
        
        if(0==counter){
          retval ="EXCEPTION El kit:"+strAvailableKits+" no esta abierto." ;
          return retval;
        }
          this.closePreparedStatement(prepStatement);
          this.closeResultSet(resultSet);
        
           return retval; 
      }

       /**
       * Metodo que revisa si existen UNIS en el periodo de apertura
       * @param pPersonId
       * @param pKitCod
       * @param connection
       */
      public String validateExistUnis(  String pPersonId
                                      , String pCategory
                                      , String pKitCod
                                      , Connection connection){
          String retval = "Success";
          
          int counter = 0; 
          
          String stmtQuery = 
                      "  select xis.NRO_SOLICITUD  "+
                      "        ,xis.PERSON_ID  "+
                      "        ,xis.EMPLOYEE_NUMBER  "+
                      "        ,xis.SOLI_DATE  "+
                      "        ,xis.STATUS  "+
                      "  from XXGAM_INV_SOLI xis  "+
                      "  where 1=1  "+
                      "  and xis.person_id = ?  "+
                      "  and exists     (  "+
                      "                        select 'Y'  "+
                      "                        from  fnd_lookup_values flv  "     +
                      "                        where  flv.lookup_type = 'XXGAM_APERTURA_DE_PERIODOS'  "+
                      "                        and  flv.language = sys_context('USER','LANG')  "+
                      "                        and  trunc(xis.SOLI_DATE) between nvl(flv.start_date_active,trunc(sysdate))  "+
                      "                        and  nvl(flv.end_date_active,to_date('31/12/4712','DD/MM/YYYY'))  "+
                      "                        and  flv.meaning = ?  "+
                      "                    )  " +
                      " and xis.category = ? ";
                      
          PreparedStatement prepStatement = null;
          ResultSet resultSet = null;
          
          try{
            prepStatement = connection.prepareStatement(stmtQuery,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            prepStatement.setString(1, pPersonId);
            prepStatement.setString(2, pKitCod);
            prepStatement.setString(3, pCategory);
            resultSet = prepStatement.executeQuery(); 
            while(resultSet.next()){
              counter = counter+1;
            }
                            
          } catch (SQLException sqle)
          {
            retval ="EXCEPTION: al validar UNIS existentes "+sqle.getMessage()+" , "+sqle.getErrorCode();
            return retval;
          }
          
          System.out.println("counter UNIS:"+counter);
          
          if(0!=counter){
            retval ="EXCEPTION Ya existe una Uni en curso " ;
            return retval;
          }
          this.closePreparedStatement(prepStatement);
          this.closeResultSet(resultSet);
          return retval;
      }

  /**
   * Metodo que obtiene el numero de UNIS por empleado 
   * @return
   */
  public String getNumberUNIS()
  {
    String retval = null;
    OADBTransaction oaDBTransaction =  this.getOADBTransaction();
    Connection connection = oaDBTransaction.getJdbcConnection();
    XxGamPersonalUniformInfoVOImpl PersonalUniformInfoVOImpl = getXxGamPersonalUniformInfoVO1(); 
    XxGamPersonalUniformInfoVORowImpl PersonalUniformInfoVORowImpl= null; 
    if(null!=PersonalUniformInfoVOImpl){
      PersonalUniformInfoVORowImpl = (XxGamPersonalUniformInfoVORowImpl)PersonalUniformInfoVOImpl.getCurrentRow();
      if(null!=PersonalUniformInfoVORowImpl){
        oracle.jbo.domain.Number numPersonID=null;
        try
        {
          numPersonID = new  oracle.jbo.domain.Number(PersonalUniformInfoVORowImpl.getPersonID());
        } catch (SQLException e)
        {
          throw new OAException("Exception al convertir a numerico el PersonID:"+PersonalUniformInfoVORowImpl.getPersonID(),OAException.ERROR); 
        }
        if(null!=numPersonID){
         String retval2nd = XxGamInvUtils.getNumberUNIS(numPersonID
                                                       ,connection); 
         if(null!=retval2nd){
           if(retval2nd.contains("EXCEPTION")){
             return retval2nd;
           }else{
            retval = retval2nd;
           }
         }                                              
        }
      }
    } /** END if(null!=PersonalUniformInfoVOImpl){ **/
    return retval; 
  }
  /**
   * Funcion que obtiene grupo de pago definido en lookup
   * @param p_grupoPago, connection
   */
  public String getGrupoPagoFromLkp(String p_grupoPago, Connection connection)
  {
    String v_grupoPago = null;
    int counter = 0;
    String strPrepStmt = " SELECT FLV.meaning " + 
                                " FROM FND_LOOKUP_VALUES FLV " + 
                                " WHERE 1 = 1" +
                                "  AND FLV.DESCRIPTION = ? " + 
                                "  AND FLV.LOOKUP_TYPE = 'XXGAM_UNIF_OBSERVACIONES_LKP' " + 
                                "  AND FLV.LANGUAGE    = sys_context('USER','LANG')  " + 
                                "  AND NVL(FLV.END_DATE_ACTIVE, (SYSDATE)+1 )>=TRUNC(SYSDATE)" + 
                                "  AND FLV.VIEW_APPLICATION_ID = TO_NUMBER('700')" + 
                                "  AND FLV.ENABLED_FLAG = 'Y' ";
    PreparedStatement prepStmt = null;
    ResultSet resultSet = null;       
    try{
       prepStmt = connection.prepareStatement(strPrepStmt,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
       prepStmt.setString(1,p_grupoPago);
       resultSet = prepStmt.executeQuery();
       
       while(resultSet.next()){
               v_grupoPago = resultSet.getString("meaning");
               counter = counter + 1;
       }
    } 
    catch (SQLException sqle)
    {
       v_grupoPago = "EXCEPTION al obtener el Grupo de Pago:"+sqle.getErrorCode()+" , "+sqle.getMessage();
    }
    this.closeResultSet(resultSet);
    this.closePreparedStatement(prepStmt);
           
    if(counter > 1)
    {
       v_grupoPago = "EXCEPTION al obtener el Grupo de Pago en Lookup:Mas de un registro.";
    }
    return v_grupoPago;
  }
    /**
     * Funcion que valida grupo de pago para habilitar captura de Observaciones
     * @param p_grupoPago
     */
    public boolean getValidGrupoPago(String p_grupoPago)
    {      
      boolean v_valid = false;
      String v_grupoPago;
      OADBTransaction oaDBTransaction =  this.getOADBTransaction();//Add by SEJR 30032017
      Connection connection = oaDBTransaction.getJdbcConnection(); //Add by SEJR 30032017
      v_grupoPago = this.getGrupoPagoFromLkp(p_grupoPago,connection);//Add by SEJR 30032017
      System.out.println("[getValidGrupoPago] obteniendo de lkp:"+v_grupoPago);//Add by SEJR 30032017
      if (null != v_grupoPago)
      {
        if(v_grupoPago.contains("EXCEPTION"))
        {
          v_valid = false;
        }
        else
        {
          v_valid = true;
        }
      }
      return v_valid;
    }
  
}
