package xxgam.oracle.apps.inv.moveorder.siz.lov.server;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.domain.Number;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxGamSizeUniformsSizesInfoLOVImpl extends OAViewObjectImpl {
    /**This is the default constructor (do not remove)
     */
    public XxGamSizeUniformsSizesInfoLOVImpl() {
    }

    public void initQuery(Number pDotaId) {
        this.setMaxFetchSize(-1);
        System.out.println("Enter initQuery(Number");
        String methodName = "initQuery";

        ViewCriteria viewCriteria = this.createViewCriteria();
        ViewCriteriaRow viewCriteriaRow = viewCriteria.createViewCriteriaRow();

        try {
            viewCriteriaRow.setAttribute("DotaId", pDotaId);

            viewCriteria.add(viewCriteriaRow);

            this.applyViewCriteria(viewCriteria);

            this.executeQuery();

            while (this.hasNext()) {
                this.next();
            }

        } catch (Exception e) {
            System.out.println("DEBUG GNOSISHCM Exception Into " + methodName);
            System.out.println(e.getCause() + "  " + e.getMessage());
            throw new OAException("Error al cargar Catalogo", 
                                  OAException.ERROR);
        }

    }

    /*public void initQuery(Number pDotaId){

        this.clearQueryIdentif();

        setWhereClause(null);
        setWhereClauseParams(null);

        if (pDotaId != null) {
           this.setWhereClause("DOTA_ID = :1");
           this.setWhereClauseParam(0, pDotaId);
           this.executeQuery();
        }
        while(this.hasNext()){
          this.next();
        }
    }*/

    public void initQuery(String pDotaId) {
        String methodName = "initQuery";
        System.out.println("DEBUG GNOSISHCM Into " + methodName);

        System.out.println("DEBUG GNOSISHCM pDotaId: " + pDotaId);
        Number nDotaId = this.converteStringToNumber(pDotaId);
        this.clearQueryIdentif();

        setWhereClause(null);
        setWhereClauseParams(null);

        if (pDotaId != null) {

            this.setWhereClause("DOTA_ID = ?");
            this.setWhereClauseParam(0, nDotaId);
            System.out.println("DEBUG GNOSISHCM Query Statement");
            System.out.println(this.getQuery());
            this.executeQuery();
        }
    }

    public void clearQueryIdentif() {
        String methodName = "clearQuery";
        System.out.println("DEBUG GNOSISHCM Into  " + methodName);

        clearCache();
        setWhereClause(null);
        setWhereClauseParams(null);

        setWhereClause("1 = :1");
        setWhereClauseParam(0, Integer.valueOf(0));
        executeQuery();
    }

    public Number converteStringToNumber(String pValue) {
        String methodName = "converteIntegerToNumber";
        Number retvalNumber = null;

        System.out.println("DEBUG GNOSISHCM Into : " + methodName);

        try {
            retvalNumber = new Number(pValue);
        } catch (Exception e) {
            System.out.println("DEBUG GNOSISHCM EXCEPTION");
            System.out.println("Excp: " + e.getCause() + "   " + 
                               e.getMessage());
        }
        return retvalNumber;
    }

    /** Metodo que no permite desplegado de informacion **/
    void initSizesInfoEmpty() {
        System.out.println("Enter initSizesInfoEmpty.");
        this.setMaxFetchSize(0);
        this.executeQuery();
    }

}
