package xxgam.oracle.apps.inv.moveorder.vta.server;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.webui.OAPageContext;

import oracle.jbo.RowSetIterator;
import oracle.jbo.SQLStmtException;
import oracle.jbo.domain.Number;

import oracle.jdbc.OracleCallableStatement;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxGamOrderUniformsAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public XxGamOrderUniformsAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
            /* Configuration Name */launchTester("xxgam.oracle.apps.inv.moveorder.vta.server", 
                                                 "XxGamOrderUniformsAMLocal");
    }

    /**Container's getter for XxGamPersonVtaUniformInfoVO1
     */
    public XxGamPersonVtaUniformInfoVOImpl getXxGamPersonVtaUniformInfoVO1() {
        return (XxGamPersonVtaUniformInfoVOImpl)findViewObject("XxGamPersonVtaUniformInfoVO1");
    }

    /**Container's getter for XxGamInputOrderUniformsVO1
     */
    public XxGamInputOrderUniformsVOImpl getXxGamInputOrderUniformsVO1() {
        return (XxGamInputOrderUniformsVOImpl)findViewObject("XxGamInputOrderUniformsVO1");
    }


    /**Container's getter for XxGamReviewInpOrderUniformsVO1
     */
    public XxGamReviewInpOrderUniformsVOImpl getXxGamReviewInpOrderUniformsVO1() {
        return (XxGamReviewInpOrderUniformsVOImpl)findViewObject("XxGamReviewInpOrderUniformsVO1");
    }

    /**Container's getter for XxGamSalesOrderHdrInfoVO1
     */
    public XxGamSalesOrderHdrInfoVOImpl getXxGamSalesOrderHdrInfoVO1() {
        return (XxGamSalesOrderHdrInfoVOImpl)findViewObject("XxGamSalesOrderHdrInfoVO1");
    }

    /**Container's getter for XxGamInvVtaUnifHdrVO1
     */
    public XxGamInvVtaUnifHdrVOImpl getXxGamInvVtaUnifHdrVO1() {
        return (XxGamInvVtaUnifHdrVOImpl)findViewObject("XxGamInvVtaUnifHdrVO1");
    }

    /**Container's getter for XxGamFollOrderUnifHdrVO1
     */
    public XxGamFollOrderUnifHdrVOImpl getXxGamFollOrderUnifHdrVO1() {
        return (XxGamFollOrderUnifHdrVOImpl)findViewObject("XxGamFollOrderUnifHdrVO1");
    }

    /**Container's getter for XxGamInvVtaUnifLinVO1
     */
    public XxGamInvVtaUnifLinVOImpl getXxGamInvVtaUnifLinVO1() {
        return (XxGamInvVtaUnifLinVOImpl)findViewObject("XxGamInvVtaUnifLinVO1");
    }

    /**Container's getter for XxGamFollOrderUnifLinVO1
     */
    public XxGamFollOrderUnifLinVOImpl getXxGamFollOrderUnifLinVO1() {
        return (XxGamFollOrderUnifLinVOImpl)findViewObject("XxGamFollOrderUnifLinVO1");
    }

    public String fillPersonVtaUniformsInfo(String pStrUserName) {
        String retval = null;
        XxGamPersonVtaUniformInfoVOImpl PersonVtaUniformInfoVOImpl = 
            getXxGamPersonVtaUniformInfoVO1();
        XxGamPersonVtaUniformInfoVORowImpl PersonVtaUniformInfoVORowImpl = 
            null;

        if (null != PersonVtaUniformInfoVOImpl) {
            if (!PersonVtaUniformInfoVOImpl.isPreparedForExecution()) {
                PersonVtaUniformInfoVOImpl.executeQuery();
            }
            PersonVtaUniformInfoVORowImpl = 
                    (XxGamPersonVtaUniformInfoVORowImpl)PersonVtaUniformInfoVOImpl.createRow();
            PersonVtaUniformInfoVORowImpl.setPayroll("Payroll");
            PersonVtaUniformInfoVORowImpl.setPersonID("PersonID");

            OADBTransaction oaDBTransaction = this.getOADBTransaction();
            Connection connection = oaDBTransaction.getJdbcConnection();

            String strPersonID = null;
            String strPersonFullName = null;
            String strEmployeeNumber = null;
            String strSex = null;
            String strAssignmentID = null;

            strPersonID = getPersonIdFromUserID(pStrUserName, connection);
            if (null != strPersonID) {
                if (strPersonID.contains("EXCEPTION")) {
                    return strPersonID;
                }
                PersonVtaUniformInfoVORowImpl.setPersonID(strPersonID);
            }

            String[] arrayActiveAssignmentInfo = 
                this.getActiveAssignmentInfo(strPersonID, connection);
            if (null != arrayActiveAssignmentInfo[0]) {
                if (arrayActiveAssignmentInfo[0].contains("EXCEPTION")) {
                    return arrayActiveAssignmentInfo[0];
                }
            }


            String[] arrayFulNameEmpNumSex = 
                getFulNameEmpNumSex(strPersonID, connection);

            if (null != arrayFulNameEmpNumSex[0]) {
                if (arrayFulNameEmpNumSex[0].contains("EXCEPTION")) {
                    return arrayFulNameEmpNumSex[0];
                }
                PersonVtaUniformInfoVORowImpl.setPersonFullName(arrayFulNameEmpNumSex[1]);
                PersonVtaUniformInfoVORowImpl.setEmployeeNumber(arrayFulNameEmpNumSex[2]);
                PersonVtaUniformInfoVORowImpl.setSex(arrayFulNameEmpNumSex[3]);
                PersonVtaUniformInfoVORowImpl.setRfc(arrayFulNameEmpNumSex[4]);
            }

            String[] arrayPersonTypeID = 
                getPersonTypeID(strPersonID, connection);
            if (null != arrayPersonTypeID[0]) {
                if (arrayPersonTypeID[0].contains("EXCEPTION")) {
                    return arrayPersonTypeID[0];
                }
                PersonVtaUniformInfoVORowImpl.setPersonTypeID(arrayPersonTypeID[1]);
                PersonVtaUniformInfoVORowImpl.setPersonType(arrayPersonTypeID[2]);
            }

            String strPersonType = arrayPersonTypeID[2];
            System.out.println("arrayPersonTypeID[2]:" + arrayPersonTypeID[2]);
            String[] arrayInvAssignExcept = 
                getInvAssignExcept(strPersonType, connection);
            System.out.println("arrayInvAssignExcept[1]:" + 
                               arrayInvAssignExcept[1]);

            if (null != arrayInvAssignExcept[0]) {
                if (arrayInvAssignExcept[0].contains("EXCEPTION")) {
                    return arrayInvAssignExcept[0];
                }
                PersonVtaUniformInfoVORowImpl.setXxGamInvAssignExcept(arrayInvAssignExcept[1]);
            }

            strAssignmentID = getAssignmentID(strPersonID, connection);
            if (null != strAssignmentID) {
                if (strAssignmentID.contains("EXCEPTION")) {
                    return strAssignmentID;
                }
                PersonVtaUniformInfoVORowImpl.setAssigmentID(strAssignmentID);
            }

            String[] arrayOrganizationInfo = 
                getOrganizationInfo(strPersonID, connection);
            if (null != arrayOrganizationInfo[0]) {
                if (arrayOrganizationInfo[0].contains("EXCEPTION")) {
                    return arrayOrganizationInfo[0];
                }
                PersonVtaUniformInfoVORowImpl.setOrganizationID(arrayOrganizationInfo[1]);
                PersonVtaUniformInfoVORowImpl.setOrganization(arrayOrganizationInfo[2]);
            }

            String[] arrayGradeInfo = getGradeInfo(strPersonID, connection);
            if (null != arrayGradeInfo[0]) {
                if (arrayGradeInfo[0].contains("EXCEPTION")) {
                    return arrayGradeInfo[0];
                }
                PersonVtaUniformInfoVORowImpl.setGradeID(arrayGradeInfo[1]);
                PersonVtaUniformInfoVORowImpl.setGrade(arrayGradeInfo[2]);
                PersonVtaUniformInfoVORowImpl.setCategoriaGr(arrayGradeInfo[3]);
            }

            String[] arrayPositionInfo = 
                getPositionInfo(strPersonID, connection);
            if (null != arrayPositionInfo[0]) {
                if (arrayPositionInfo[0].contains("EXCEPTION")) {
                    return arrayPositionInfo[0];
                }
                PersonVtaUniformInfoVORowImpl.setPositionID(arrayPositionInfo[1]);
                PersonVtaUniformInfoVORowImpl.setPosition(arrayPositionInfo[2]);
            }

            String[] arrayPayrollInfo = 
                getPayrollInfo(strPersonID, connection);

            if (null != arrayPayrollInfo[0]) {
                if (arrayPayrollInfo[0].contains("EXCEPTION")) {
                    return arrayPayrollInfo[0];
                }
                PersonVtaUniformInfoVORowImpl.setPayrollID(arrayPayrollInfo[1]);
                PersonVtaUniformInfoVORowImpl.setPayroll(arrayPayrollInfo[2]);
            }

            String[] arrayAccountingInfo = 
                getAccountingInfo(strPersonID, connection);
            if (null != arrayAccountingInfo[0]) {
                if (arrayAccountingInfo[0].contains("EXCEPTION")) {
                    return arrayAccountingInfo[0];
                }
                PersonVtaUniformInfoVORowImpl.setCodeCombinationID(arrayAccountingInfo[1]);
                PersonVtaUniformInfoVORowImpl.setStation(arrayAccountingInfo[2]);
                PersonVtaUniformInfoVORowImpl.setAccountCombination(arrayAccountingInfo[3]);
                PersonVtaUniformInfoVORowImpl.setCostCenter(arrayAccountingInfo[4]);
            }

            String[] arrayHrLocationZonaInfo = 
                getHrLocationZonaInfo(strPersonID, connection);
            if (null != arrayHrLocationZonaInfo[0]) {
                if (arrayHrLocationZonaInfo[0].contains("EXCEPTION")) {
                    return arrayHrLocationZonaInfo[0];
                }
                PersonVtaUniformInfoVORowImpl.setHrLocationCode(arrayHrLocationZonaInfo[1]);
                PersonVtaUniformInfoVORowImpl.setHrLocationDesc(arrayHrLocationZonaInfo[2]);
                PersonVtaUniformInfoVORowImpl.setZona(arrayHrLocationZonaInfo[3]);
            }

            String[] arrayOperatingUnitInfo = 
                getOperatingUnitInfo(arrayOrganizationInfo[2], connection);
            if (null != arrayOperatingUnitInfo[0]) {
                if (arrayOperatingUnitInfo[0].contains("EXCEPTION")) {
                    return arrayOperatingUnitInfo[0];
                }
                PersonVtaUniformInfoVORowImpl.setOperatingUnitID(arrayOperatingUnitInfo[1]);
                PersonVtaUniformInfoVORowImpl.setOperatingUnit(arrayOperatingUnitInfo[2]);
            }

            PersonVtaUniformInfoVOImpl.insertRow(PersonVtaUniformInfoVORowImpl);

        } /** END  if(null!=PersonVtaUniformInfoVOImpl){ **/

        return retval;

    }

    /**
     * Metodo que recupera el person id a partir del user ID.
     * @return
     */
    private String getPersonIdFromUserID(String pStrUserName, 
                                         Connection pConnection) {
        String retval = null;
        int counter = 0;
        String strPrepStmt = 
            " select employee_id " + "       ,start_date " + "       ,end_date " + 
            "   from fnd_user " + "  where user_name = ? " + 
            "    and trunc(sysdate) between start_date " + 
            "    and nvl(end_date,TO_DATE('31/12/4712', 'DD/MM/YYYY')) ";

        /****  Se suben a un nivel mas alto
   OADBTransaction oaDBTransaction =  this.getOADBTransaction();
   Connection connection = oaDBTransaction.getJdbcConnection();
   ***/
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;
        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setString(1, pStrUserName);
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval = resultSet.getString("employee_id");
                counter = counter + 1;
            }

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener el Person ID:" + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (counter > 1) {
            retval = "EXCEPTION al obtener el Person ID:Mas de un registro.";
        }

        return retval;
    }


    /**
     * Metodo que cierra un Result Set
     * @param pResultSet
     */
    private void closeResultSet(ResultSet pResultSet) {
        if (null != pResultSet) {
            try {
                pResultSet.close();
            } catch (SQLException sqle) {
                throw new OAException(sqle.getErrorCode() + " , " + 
                                      sqle.getMessage(), OAException.ERROR);
            }
        }
    }

    /**
     * Metodo que cierra un Prepared Statement
     * @param pPrepStmt
     */
    private void closePreparedStatement(PreparedStatement pPrepStmt) {
        if (null != pPrepStmt) {
            try {
                pPrepStmt.close();
            } catch (SQLException sqle) {
                throw new OAException(sqle.getErrorCode() + " , " + 
                                      sqle.getMessage(), OAException.ERROR);
            }
        }
    }


    /**
     * metodo que valida si el empleado tiene  una asignacion activa o no
     * @param strPersonID
     * @return
     */
    private String[] getActiveAssignmentInfo(String strPersonID, 
                                             Connection pConnection) {

        String[] retval = new String[3];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;

        int counter = 0;

        String strPrepStmt = 
            " select PASTT.USER_STATUS " + "      ,PASTT.ASSIGNMENT_STATUS_TYPE_ID " + 
            "  from PER_ALL_ASSIGNMENTS_F paaf " + 
            "      ,PER_ASSIGNMENT_STATUS_TYPES_TL PASTT " + " where 1 =1 " + 
            "  AND PAAF.ASSIGNMENT_STATUS_TYPE_ID = PASTT.ASSIGNMENT_STATUS_TYPE_ID " + 
            "  and trunc(sysdate) between  paaf.effective_start_date " + 
            "  and paaf.effective_end_date " + 
            "  and PASTT.user_status IN ('Active Assignment', 'Suspensi'||chr(50099)||'n Con IMSS y PyD') " + 
            "  and paaf.person_id = ? ";

        PreparedStatement prpStmt = null;
        ResultSet resulSet = null;

        try {
            prpStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prpStmt.setDouble(1, new Double(strPersonID));
            resulSet = prpStmt.executeQuery();

            while (resulSet.next()) {
                retval[0] = "SUCESFULLY";
                retval[1] = resulSet.getString("USER_STATUS");
                retval[2] = resulSet.getString("ASSIGNMENT_STATUS_TYPE_ID");

                counter = counter + 1;
            }

        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al validar si el empleado tiene  asignacion activa o no:" + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
        }

        this.closeResultSet(resulSet);
        this.closePreparedStatement(prpStmt);

        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al validar si el empleado tiene  asignacion activa o no: Mas de un registro";
        }

        if (0 == counter) {
            retval[0] = 
                    "EXCEPTION Empleado Inactivo, acudir al area de Recursos Humanos para su Reactivacion.";
        }

        return retval;
    }

    /**
     * metodo que recupera el nombre del empleado, el numero de empleado y su genero
     * @param strPersonID
     * @return
     */
    private String[] getFulNameEmpNumSex(String strPersonID, 
                                         Connection pConnection) {
        String[] retval = new String[5];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;
        retval[3] = null;
        retval[4] = null;

        int counter = 0;
        String strPrepStmt = 
            " SELECT   papf.full_name " + "       , papf.employee_number " + 
            "       , papf.sex " + "       , papf.per_information2 rfc " + 
            " FROM per_all_people_f papf " + " WHERE 1=1 " + 
            "    and  trunc(sysdate) >= papf.effective_start_date " + 
            "    and  trunc(sysdate) <= papf.effective_end_date " + 
            "    and  papf.employee_number is not null " + 
            "    and  papf.person_id = ?";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;


        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval[0] = "SUCESFULL";
                retval[1] = resultSet.getString("full_name");
                retval[2] = resultSet.getString("employee_number");
                retval[3] = resultSet.getString("sex");
                retval[4] = resultSet.getString("rfc");
                counter = counter + 1;
            }

        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener el Nombre del empleado, numero de empleado y genero:" + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al obtener Nombre del empleado, numero de empleado y genero:Mas de un registro.";
        }


        return retval;

    }

    /**
     * Metodo que recupera el Person Type ID y Adscripcion.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getPersonTypeID(String strPersonID, 
                                     Connection pConnection) {
        String[] retval = new String[3];
        retval[0] = null;
        retval[1] = null;
        retval[2] = "";

        int counter = 0;
        String strPrepStmt = 
            " SELECT   pt.person_type_id   " + "       , pttl.user_person_type   " + 
            "  FROM   per_person_type_usages_f ptu,   " + 
            "         per_person_types pt,   " + 
            "         per_person_types_tl pttl, " + 
            "         per_all_people_f papf   " + 
            " WHERE   ptu.person_type_id = pt.person_type_id   " + 
            "         AND pt.person_type_id = pttl.person_type_id   " + 
            "         AND TRUNC (SYSDATE) BETWEEN ptu.effective_start_date   " + 
            "                                 AND  ptu.effective_end_date " + 
            "         AND TRUNC (SYSDATE) BETWEEN papf.effective_start_date   " + 
            "         AND  papf.effective_end_date   " + 
            "         AND pttl.language = USERENV ('LANG') " + 
            "         and papf.employee_number is not null " + 
            "         and papf.person_id = ptu.person_id " + 
            "         AND papf.person_id = ? " + 
            "         AND pt.system_person_type IN ('APL','EMP','EX_APL','EX_EMP','CWK','EX_CWK','OTHER') " + 
            "         ORDER BY DECODE(pt.system_person_type " + 
            "                        ,'EMP'   ,1 " + 
            "                        ,'CWK'   ,2 " + 
            "                        ,'APL'   ,3 " + 
            "                        ,'EX_EMP',4 " + 
            "                        ,'EX_CWK',5 " + 
            "                        ,'EX_APL',6 " + 
            "                                 ,7 " + 
            "                        ) ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;


        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval[0] = "SUCESFULL";
                retval[1] = resultSet.getString("person_type_id");
                retval[2] = 
                        retval[2] + "." + resultSet.getString("user_person_type");
                counter = counter + 1;

            }

        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener el tipo de persona:" + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval[0] = 
                    "EXCEPTION al obtener el tipo de persona: No se encontraron registros.";
            return retval;
        }

        if (counter >= 1) {
            retval[2] = retval[2].substring(1, retval[2].length());
            return retval;
        }

        return retval;
    }

    /**
     * Metodo que recupera el ID de la asignacion de un empleado
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String getAssignmentID(String strPersonID, 
                                   Connection pConnection) {
        String retval = null;
        int counter = 0;
        String strPrepStmt = 
            " SELECT  paaf.assignment_id " + " FROM  per_all_assignments_f       paaf " + 
            "    ,per_assignment_status_types past " + 
            " WHERE  paaf.person_id = ?" + 
            " AND  TRUNC(SYSDATE) BETWEEN paaf.effective_start_date " + 
            "                        AND paaf.effective_end_date " + 
            " AND  paaf.assignment_status_type_id = past.assignment_status_type_id " + 
            " AND  past.user_status IN ('Active Assignment', 'Suspensi'||chr(50099)||'n Con IMSS y PyD')  ";

        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;


        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval = resultSet.getString("assignment_id");
                counter = counter + 1;
            }

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener el id de la asignacion:" + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);


        if (counter > 1) {
            retval = 
                    "EXCEPTION al obtener el id de la asignacion: mas de un registro";
        }


        return retval;
    }

    /**
     * Metodo que recupera informacion de la organizacion a la que pertenece el empleado.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getOrganizationInfo(String strPersonID, 
                                         Connection pConnection) {
        String[] retval = new String[3];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;

        int counter = 0;
        String strPrepStmt = 
            " SELECT  hrao.organization_id  org_id   " + "        ,hrao.name             org_name " + 
            " FROM  hr_all_organization_units   hrao " + 
            "      ,per_all_assignments_f       paaf " + 
            "      ,per_assignment_status_types past " + 
            " WHERE  hrao.organization_id = paaf.organization_id " + 
            " AND  paaf.person_id = ? " + 
            " AND  TRUNC(SYSDATE) BETWEEN paaf.effective_start_date " + 
            "                        AND paaf.effective_end_date " + 
            "    AND paaf.primary_flag = 'Y' " + 
            " AND  paaf.assignment_status_type_id = past.assignment_status_type_id ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval[0] = "SUCESFULL";
                retval[1] = resultSet.getString("org_id");
                retval[2] = resultSet.getString("org_name");
                counter = counter + 1;

            }
        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener la organizacion:" + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);


        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al obtener la organizacion: mas de un registro.";
        }

        return retval;
    }


    /**
     * Metodo que recupera informacion de grado del empleado.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getGradeInfo(String strPersonID, Connection pConnection) {

        String[] retval = new String[4];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;
        retval[3] = null;

        int counter = 0;
        String strPrepStmt = 
            " SELECT  pj.job_id " + "        ,pj.name job_name" + 
            "        ,pgd.segment4  categoria_gr " + "  FROM   per_jobs pj " + 
            "        ,per_all_assignments_f paaf " + 
            "        ,per_grade_definitions pgd " + "        ,per_grades pg " + 
            "  WHERE 1=1 " + "    AND pj.job_id = paaf.job_id " + 
            "    AND paaf.primary_flag = 'Y' " + 
            "    AND pgd.grade_definition_id(+) = pg.grade_definition_id " + 
            "    AND pg.grade_id(+) = paaf.grade_id " + 
            "    AND TRUNC(SYSDATE) >= paaf.effective_start_date " + 
            "    AND TRUNC(SYSDATE) <= paaf.effective_end_date " + 
            "    AND TRUNC(SYSDATE) BETWEEN NVL(TRUNC(pj.date_from), TRUNC(SYSDATE)) " + 
            "                           AND NVL(TRUNC(pj.date_to), TO_DATE('31/12/4712', 'DD/MM/YYYY')) " + 
            "    AND paaf.person_id = ? ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval[0] = "SUCESFULL";
                retval[1] = resultSet.getString("job_id");
                retval[2] = resultSet.getString("job_name");
                retval[3] = resultSet.getString("categoria_gr");
                counter = counter + 1;

            }
        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener el grado de asignacion:" + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);


        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al obtener el grado de asignacion: mas de un registro.";
        }

        return retval;

    }

    /**
     * Metodo que recupera la informacion del puesto.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getPositionInfo(String strPersonID, 
                                     Connection pConnection) {

        String[] retval = new String[3];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;

        int counter = 0;
        String strPrepStmt = 
            " SELECT  pap.position_id " + "       ,pap.name position_name " + 
            "  FROM   per_all_positions pap " + 
            "        ,per_all_assignments_f paaf " + " WHERE 1=1 " + 
            "    AND pap.position_id = paaf.position_id " + 
            "    AND paaf.primary_flag = 'Y' " + 
            "    AND TRUNC(SYSDATE) >= paaf.effective_start_date " + 
            "    AND TRUNC(SYSDATE) <= paaf.effective_end_date " + 
            "    AND TRUNC(SYSDATE) BETWEEN NVL(TRUNC(pap.date_effective), TRUNC(SYSDATE)) " + 
            "                           AND NVL(TRUNC(pap.date_end), TO_DATE('31/12/4712', 'DD/MM/YYYY')) " + 
            "    AND paaf.person_id = ? ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval[0] = "SUCESFULL";
                retval[1] = resultSet.getString("position_id");
                retval[2] = resultSet.getString("position_name");
                counter = counter + 1;

            }
        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener el puesto de asignacion:" + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);


        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al obtener el puesto de asignacion: mas de un registro.";
        }

        if (0 == counter) {
            retval[0] = 
                    "EXCEPTION al obtener el puesto de asignacion: No se encontraron registros.";
        }

        return retval;

    }

    /**
     * Metodo que recupera la informacion del grupo de pago.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getPayrollInfo(String strPersonID, 
                                    Connection pConnection) {
        String[] retval = new String[3];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;

        int counter = 0;
        String strPrepStmt = 
            " select papf.payroll_id " + "      ,papf.payroll_name " + 
            " from pay_all_payrolls_f papf " + 
            "     ,per_all_assignments_f paaf " + 
            " where trunc(sysdate) between papf.effective_start_date " + 
            "                       and papf.effective_end_date " + 
            "  and trunc(sysdate)  between paaf.effective_start_date " + 
            "                       and paaf.effective_end_date " + 
            "  and paaf.payroll_id = papf.payroll_id " + 
            "    AND paaf.primary_flag = 'Y' " + "  and paaf.person_id = ? ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval[0] = "SUCESFULL";
                retval[1] = resultSet.getString("payroll_id");
                retval[2] = resultSet.getString("payroll_name");
                counter = counter + 1;
            }
        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener el grupo de pago de asignacion:" + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);


        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al obtener el grupo de pago de asignacion: mas de un registro.";
        }

        return retval;

    }

    /**
     * Metodo que recupera informacion de contabilidad
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getAccountingInfo(String strPersonID, 
                                       Connection pConnection) {

        String[] retval = new String[5];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;
        retval[3] = null;
        retval[4] = null;

        int counter = 0;
        String strPrepStmt = 
            " SELECT gcc.code_combination_id " + "   ,gcc.segment4 station " + 
            "   ,gcc.segment3 cost_center " + "   ,gcc.segment1||'-'|| " + 
            "    gcc.segment2||'-'|| " + "    gcc.segment3||'-'|| " + 
            "    gcc.segment4||'-'|| " + "    gcc.segment5||'-'|| " + 
            "    gcc.segment6||'-'|| " + "    gcc.segment7||'-'|| " + 
            "    gcc.segment8 account_combination " + 
            " FROM per_all_assignments_f paaf " + 
            "    ,gl_code_combinations gcc " + " WHERE 1=1 " + 
            "    AND paaf.default_code_comb_id = gcc.code_combination_id " + 
            "    AND paaf.primary_flag = 'Y' " + 
            "    AND TRUNC(SYSDATE) >= paaf.effective_start_date " + 
            "    AND TRUNC(SYSDATE) <= paaf.effective_end_date " + 
            "    AND paaf.person_id = ? ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;


        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval[0] = "SUCESFULL";
                retval[1] = resultSet.getString("code_combination_id");
                retval[2] = resultSet.getString("station");
                retval[3] = resultSet.getString("account_combination");
                retval[4] = resultSet.getString("cost_center");
                counter = counter + 1;
            }

        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener informacion de contabilidad de la asignacion:" + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al obtener informacion de contabilidad de la asignacion: Mas de un registro.";
        }

        if (0 == counter) {
            retval[0] = 
                    "EXCEPTION El empleado no tiene asignado una cuenta contable.";
        }

        return retval;

    }

    /**
     * Metodo que recupera informacion le localidad y Zona
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getHrLocationZonaInfo(String strPersonID, 
                                           Connection pConnection) {

        String[] retval = new String[4];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;
        retval[3] = null;

        int counter = 0;
        String strPrepStmt = 
            " select  hlt.LOCATION_CODE " + "     ,hlt.DESCRIPTION LOCATION_DESC " + 
            "     ,pucif.value zona " + " from   per_all_assignments_f paaf " + 
            "      ,hr_locations_all_tl hlt " + 
            "      ,pay_user_column_instances_f pucif " + 
            "      ,pay_user_tables put " + "      ,pay_user_rows_f purf " + 
            "      ,pay_user_columns puc " + " where 1=1  " + 
            " and paaf.location_id = hlt.location_id " + 
            " and trunc(sysdate) " + 
            " between paaf.effective_start_date and paaf.effective_end_date " + 
            " and hlt.language =  SYS_CONTEXT('USER', 'LANG')  " + 
            "  and put.user_table_name = 'XXGAM_PARAMETROS_UNIFORMES' " + 
            " and put.business_group_id = 81 " + 
            " and put.user_table_id = purf.user_table_id " + 
            " and put.user_table_id = puc.user_table_id " + 
            " and puc.user_column_name = 'Localidad' " + 
            " and pucif.user_row_id = purf.user_row_id " + 
            " and pucif.user_column_id = puc.user_column_id " + 
            " and trunc(sysdate) between purf.effective_start_date " + 
            "                        and purf.effective_end_date " + 
            " and trunc(sysdate) between pucif.effective_start_date " + 
            "                        and pucif.effective_end_date" + 
            " and purf.row_low_range_or_name = substr (hlt.location_code, 0, 3) " + 
            " AND paaf.primary_flag = 'Y' " + " and paaf.person_id = ? ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;


        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strPersonID));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval[0] = "SUCESFULL";
                retval[1] = resultSet.getString("LOCATION_CODE");
                retval[2] = resultSet.getString("LOCATION_DESC");
                retval[3] = resultSet.getString("zona");
                counter = counter + 1;
            }

        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener localidad y zona del empleado:" + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al obtener localidad y zona del empleado: Mas de un registro.";
        }

        if (0 == counter) {
            retval[0] = 
                    "EXCEPTION al obtener localidad y zona del empleado: No se encontraron registros.";
        }

        return retval;

    }


    /**
     * Metodo que recupera informacion de la Unida Operativa a la que pertenece el empleado.
     * @param strPersonID
     * @param pConnection
     * @return
     */
    private String[] getOperatingUnitInfo(String strHrOrganization, 
                                          Connection pConnection) {
        String[] retval = new String[3];
        retval[0] = null;
        retval[1] = null;
        retval[2] = null;

        int counter = 0;
        String strPrepStmt = 
            " SELECT   org.ORGANIZATION_ID org_id" + "       , org.NAME org_name " + 
            "       , SUBSTR (org.NAME, 0, 2) " + 
            "  FROM   hr_all_organization_units org " + 
            "       , hr_organization_information_v hoi " + 
            " WHERE   org.organization_id = hoi.organization_id " + 
            "   AND hoi.org_information1 = 'OPERATING_UNIT' " + 
            "   AND SUBSTR (org.NAME, 0, 2) = ? ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    pConnection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                 ResultSet.CONCUR_READ_ONLY);
            prepStmt.setString(1, strHrOrganization.substring(0, 2));
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                retval[0] = "SUCESFULL";
                retval[1] = resultSet.getString("org_id");
                retval[2] = resultSet.getString("org_name");
                counter = counter + 1;

            }
        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener la Unidad Operativa:" + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);


        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al obtener la Unidad Operativa: mas de un registro.";
        }

        return retval;
    }


    /**
     * Metodo que recupera los kits disponibles por cada empleado 
     * @param pStrOrganization
     * @param pStrPosition
     * @param pStrSex
     * @param pStrPayroll 
     */
    public String fillAvailableKitsInfo(String pStrOrganization, 
                                        String pStrPosition, String pStrSex, 
                                        String pStrPayroll, String pStrZona, 
                                        String pStrInvAssignExcept) {
        String retval = null;
        String strAvailableKits = "";
        int counter = 0;
        String strShortOrganization = null;
        String strShortPosition = null;
        String strShortPayroll = null;

        if (null != pStrOrganization) {
            strShortOrganization = pStrOrganization.substring(0, 2);
        }
        if (null != pStrPosition) {
            strShortPosition = 
                    pStrPosition.substring(pStrPosition.indexOf('.', 3) + 1);
        }
        if (null != pStrPayroll) {
            strShortPayroll = pStrPayroll.substring(0, 6);
        }

        System.out.println("strShortOrganization:" + strShortOrganization);
        System.out.println("strShortPosition:" + strShortPosition);
        System.out.println("pStrSex:" + pStrSex);
        System.out.println("strShortPayroll:" + strShortPayroll);
        System.out.println("pStrZona:" + pStrZona);
        System.out.println("pStrInvAssignExcept:" + pStrInvAssignExcept);

        OADBTransaction oaDBTransaction = this.getOADBTransaction();
        Connection connection = oaDBTransaction.getJdbcConnection();

        String strPrepStmt =
            /* "    and substr(flv.meaning,instr(flv.meaning,'.')+1,6) = ? "; */
            " select  substr(flv.description, instr(flv.description, '.', 1)+1) kit " + 
            "    from  fnd_lookup_values flv " + "   where  1=1 " + 
            "    AND flv.lookup_type = 'XXGAM_ASIG_KIT_UNIF_" + 
            strShortOrganization + "' " + "    AND flv.enabled_flag = 'Y' " + 
            "    AND flv.language = SYS_CONTEXT('USER', 'LANG') " + 
            "    and trunc(sysdate) between nvl(flv.start_date_active,trunc(sysdate)) " + 
            "                           and nvl(flv.end_date_active,TO_DATE('31/12/4712', 'DD/MM/YYYY')) " + 
            "    and substr(flv.description, 0, instr(flv.description, '.', 1)) = ? " + 
            "    AND substr(flv.lookup_code, instr(flv.lookup_code, '.', 1, 2)+1) = ? " + 
            "    and substr(flv.meaning,instr(flv.meaning,'.')+1) = ? " + 
            "    and flv.lookup_code like ? ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            prepStmt.setString(1, strShortPosition + ".");
            prepStmt.setString(2, pStrSex);
            prepStmt.setString(3, strShortPayroll + "." + pStrZona);
            prepStmt.setString(4, "%" + pStrInvAssignExcept + "%");
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                System.out.println(resultSet.getString("kit"));
                counter = counter + 1;
                strAvailableKits = 
                        strAvailableKits + "'" + resultSet.getString("kit") + 
                        "',";
            }
        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener los kits disponibles en funcion de organizacion, puesto, genero. " + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);
        if (0 == counter) {
            retval = 
                    "EXCEPTION al obtener los kits disponibles en funcion de organizacion, puesto, genero: No se encontraron registros.";
        } else {
            retval = strAvailableKits;
        }

        return retval;

    }


    /**
     * Metodo que pobla la informacion disponible en funcion de los kits
     * @param pStrAvailableKits
     * @return
     */
    public String fillInputOrderUniforms(String pStrAvailableKits) {

        String retval = null;
        int counter = 0;
        java.util.Set<String> setValRecords = new java.util.HashSet<String>();
        String strNewAvailableKits = 
            pStrAvailableKits.substring(0, pStrAvailableKits.length() - 1);
        System.out.println("pStrAvailableKits:" + pStrAvailableKits);
        System.out.println("strNewAvailableKits:" + strNewAvailableKits);
        XxGamInputOrderUniformsVOImpl InputOrderUniformsVOImpl = 
            getXxGamInputOrderUniformsVO1();
        XxGamInputOrderUniformsVORowImpl InputOrderUniformsVORowImpl = null;

        OADBTransaction oaDBTransaction = this.getOADBTransaction();
        Connection connection = oaDBTransaction.getJdbcConnection();

        String strPrepStmt = 
            " select KIT_ID             " + "        ,KIT_COD            " + 
            "        ,DOTA_ID            " + "        ,UNIFORM_TYPE_COD   " + 
            "        ,PLANTA_QTY         " + "        ,EVENT_QTY          " + 
            "        ,MEASURE_UNIT_COD   " + "        ,CYCLE_COD          " + 
            "        ,NOMENCLATURE       " + "        ,NP_COD             " + 
            "        ,SUST_FLAG          " + "   from XXGAM_INV_DOTA      " + 
            "  where KIT_COD in (" + strNewAvailableKits + ") " + 
            "    and upper(NOMENCLATURE) not like '%IPAD%' " + 
            "    and upper(NOMENCLATURE) not like '%I_PAD%' " + 
            "    and upper(NOMENCLATURE) not like '%I PAD%' " + 
            "    and upper(NOMENCLATURE) not like '%I-PAD%' " + 
            "   order by KIT_ID asc ";

        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;


        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                counter = counter + 1;

                if (null != InputOrderUniformsVOImpl) {
                    if (!InputOrderUniformsVOImpl.isPreparedForExecution()) {
                        InputOrderUniformsVOImpl.executeQuery();
                    }
                    InputOrderUniformsVORowImpl = 
                            (XxGamInputOrderUniformsVORowImpl)InputOrderUniformsVOImpl.createRow();
                    /****
          resultSet.getString("KIT_ID");
          resultSet.getString("KIT_COD");
          resultSet.getString("DOTA_ID");
          resultSet.getString("UNIFORM_TYPE_COD");
          resultSet.getString("PLANTA_QTY");
          resultSet.getString("EVENT_QTY");
          resultSet.getString("MEASURE_UNIT_COD");
          resultSet.getString("CYCLE_COD");
          resultSet.getString("NOMENCLATURE");
          resultSet.getString("NP_COD");
          resultSet.getString("SUST_FLAG");  **/

                    String strValRecords = 
                        /* resultSet.getString("UNIFORM_TYPE_COD")+  */
                        /* resultSet.getString("PLANTA_QTY")+        */
                        /* resultSet.getString("EVENT_QTY")+         */
                        /* resultSet.getString("MEASURE_UNIT_COD")+  */
                        /* resultSet.getString("CYCLE_COD")+         */
                        /* resultSet.getString("SUST_FLAG")+         */
                        resultSet.getString("NP_COD") + 
                        resultSet.getString("NOMENCLATURE");

                    if (setValRecords.add(strValRecords)) {
                        InputOrderUniformsVORowImpl.setKitID(resultSet.getString("KIT_ID"));
                        InputOrderUniformsVORowImpl.setKitCod(resultSet.getString("KIT_COD"));
                        InputOrderUniformsVORowImpl.setDotaID(resultSet.getString("DOTA_ID"));
                        InputOrderUniformsVORowImpl.setUniformTypeCod(resultSet.getString("UNIFORM_TYPE_COD"));
                        InputOrderUniformsVORowImpl.setPlantaQty(resultSet.getString("PLANTA_QTY"));
                        InputOrderUniformsVORowImpl.setEventQty(resultSet.getString("EVENT_QTY"));
                        InputOrderUniformsVORowImpl.setMeasureUnitCod(resultSet.getString("MEASURE_UNIT_COD"));
                        InputOrderUniformsVORowImpl.setCycleCod(resultSet.getString("CYCLE_COD"));
                        InputOrderUniformsVORowImpl.setNomenclature(resultSet.getString("NOMENCLATURE"));
                        InputOrderUniformsVORowImpl.setNpCod(resultSet.getString("NP_COD"));
                        InputOrderUniformsVORowImpl.setSustFlag(resultSet.getString("SUST_FLAG"));

                        InputOrderUniformsVOImpl.insertRow(InputOrderUniformsVORowImpl);

                    } /** END  if(setValRecords.add()){ **/

                } /** END if (null!=InputOrderUniformsVOImpl){ **/

            } /** END resultSet.getString("SUST_FLAG") **/

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener las prendas. " + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
            return retval;
        }


        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);
        if (0 == counter) {
            retval = 
                    "EXCEPTION al obtener las prendas: No se encontraron  registros.";
            return retval;
        }

        return retval;
    }

    /**
     * Metodo que recupera el Id de la lista de precios configurada en oracle inventory catalogos
     * @param pageContext
     * @return
     */
    public String putPriceListHdrID(OAPageContext pageContext) {
        String retval = null;
        String strOrganization = null;
        String strPosition = null;
        String strShortOrganization = null;
        String strShortPosition = null;
        String strPayroll = null;
        int counter = 0;

        XxGamPersonVtaUniformInfoVOImpl PersonVtaUniformInfoVOImpl = 
            getXxGamPersonVtaUniformInfoVO1();
        XxGamPersonVtaUniformInfoVORowImpl PersonVtaUniformInfoVORowImpl = 
            null;
        if (null != PersonVtaUniformInfoVOImpl) {
            RowSetIterator PersonVtaUniformInfoIterator = 
                PersonVtaUniformInfoVOImpl.createRowSetIterator(null);
            if (PersonVtaUniformInfoIterator.hasNext()) {
                PersonVtaUniformInfoVORowImpl = 
                        (XxGamPersonVtaUniformInfoVORowImpl)PersonVtaUniformInfoIterator.next();
            }
            PersonVtaUniformInfoIterator.closeRowSetIterator();
        } /** END if(null!=PersonVtaUniformInfoVOImpl){ **/

        if (null != PersonVtaUniformInfoVORowImpl) {
            strOrganization = PersonVtaUniformInfoVORowImpl.getOrganization();
            strPosition = PersonVtaUniformInfoVORowImpl.getPosition();
            strPayroll = PersonVtaUniformInfoVORowImpl.getPayroll();
            strShortOrganization = strOrganization.substring(0, 2);
        }

        OADBTransaction oaDBTransaction = this.getOADBTransaction();
        Connection connection = oaDBTransaction.getJdbcConnection();

        String strPrepStmt = 
            " select PRICE_LIST_HDR_ID " + "        ,payroll " + 
            "        ,PRICE_LIST_DESC " + 
            "        ,substr(operative_unit,1,2) " + 
            "    from XXGAM_INV_VTA_UNIF_CONFIG " + 
            "   where substr(operative_unit,1,2) = ? " + 
            "     and payroll  = ? ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;


        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            prepStmt.setString(1, strShortOrganization);
            prepStmt.setString(2, strPayroll);
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                counter = counter + 1;
                pageContext.putSessionValue("sPriceListHdrID", 
                                            resultSet.getString("PRICE_LIST_HDR_ID"));
                break;
            }

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener el ID de la lista de precios. " + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval = 
                    "EXCEPTION al obtener la lista de precios: No se encontraron registros para este empleado.";
            return retval;
        }

        return retval;
    }

    /**
     * Metodo que valida si es necesario poblar el view Object XxGamPersonVtaUniformInfoVO
     * @return
     */
    public String valFillPersonVtaUniforms() {
        String retval = "Y";
        XxGamPersonVtaUniformInfoVOImpl PersonVtaUniformInfoVOImpl = 
            getXxGamPersonVtaUniformInfoVO1();
        if (null != PersonVtaUniformInfoVOImpl) {
            System.out.println("FetchedRowCount:" + 
                               PersonVtaUniformInfoVOImpl.getFetchedRowCount());
            if (PersonVtaUniformInfoVOImpl.getFetchedRowCount() > 0) {
                retval = "N";
                return retval;
            }
        }
        return retval;
    }

    /**
     * Metodo que valida si es necesario poblar el view Object XxGamInputOrderUniformsVO
     * @return
     */
    public String valFillInputOrderUniforms() {
        String retval = "Y";
        XxGamInputOrderUniformsVOImpl InputOrderUniformsVOImpl = 
            getXxGamInputOrderUniformsVO1();
        if (null != InputOrderUniformsVOImpl) {
            if (InputOrderUniformsVOImpl.getFetchedRowCount() > 0) {
                retval = "N";
                return retval;
            }
        }
        return retval;
    }

    /**
     * Metodo que inicializa aquella informacion que se ingreso para revision
     * @return
     */
    public com.sun.java.util.collections.List initReviewInputInfo() {
        com.sun.java.util.collections.List retval = 
            new com.sun.java.util.collections.ArrayList();
        XxGamInputOrderUniformsVOImpl InputOrderUniformsVOImpl = 
            getXxGamInputOrderUniformsVO1();
        XxGamReviewInpOrderUniformsVOImpl ReviewInpOrderUniformsVOImpl = 
            getXxGamReviewInpOrderUniformsVO1();

        XxGamInputOrderUniformsVORowImpl InputOrderUniformsVORowImpl = null;
        XxGamReviewInpOrderUniformsVORowImpl ReviewInpOrderUniformsVORowImpl = 
            null;

        OADBTransaction oaDBTransaction = this.getOADBTransaction();
        Connection connection = oaDBTransaction.getJdbcConnection();

        if (null != InputOrderUniformsVOImpl) {
            RowSetIterator InputOrderUniformsIterator = 
                InputOrderUniformsVOImpl.createRowSetIterator(null);
            while (InputOrderUniformsIterator.hasNext()) {
                InputOrderUniformsVORowImpl = 
                        (XxGamInputOrderUniformsVORowImpl)InputOrderUniformsIterator.next();
                if (null != InputOrderUniformsVORowImpl.getTallaID() && 
                    !"".equals(InputOrderUniformsVORowImpl.getTallaID()) && 
                    (null != InputOrderUniformsVORowImpl.getQuantity() && 
                     !"".equals(InputOrderUniformsVORowImpl.getQuantity()))) {
                    if (null != ReviewInpOrderUniformsVOImpl) {
                        if (!ReviewInpOrderUniformsVOImpl.isPreparedForExecution()) {
                            ReviewInpOrderUniformsVOImpl.executeQuery();
                        }

                        String strInventoryID = 
                            InputOrderUniformsVORowImpl.getInventoryID();
                        String strInvOrgID = 
                            InputOrderUniformsVORowImpl.getOrganizationID();
                        String strQuantity = 
                            InputOrderUniformsVORowImpl.getQuantity();
                        String strTallaNbr = 
                            InputOrderUniformsVORowImpl.getTallaNbr();
                        String strNomenclature = 
                            InputOrderUniformsVORowImpl.getNomenclature();
                        String strValCantidadDisponible = 
                            this.valCantidadDisponible(strInventoryID, 
                                                       strInvOrgID, 
                                                       strQuantity, 
                                                       strTallaNbr, 
                                                       connection);

                        System.out.println("strValCantidadDisponible:" + 
                                           strValCantidadDisponible);
                        if (null != strValCantidadDisponible) {
                            if (!strValCantidadDisponible.contains("DISPONIBLE")) {
                                retval.add(new OAException(strNomenclature + 
                                                           ":" + 
                                                           strValCantidadDisponible, 
                                                           OAException.ERROR));
                            }
                        }

                        ReviewInpOrderUniformsVORowImpl = 
                                (XxGamReviewInpOrderUniformsVORowImpl)ReviewInpOrderUniformsVOImpl.createRow();

                        ReviewInpOrderUniformsVORowImpl.setKitID(InputOrderUniformsVORowImpl.getKitID());
                        ReviewInpOrderUniformsVORowImpl.setKitCod(InputOrderUniformsVORowImpl.getKitCod());
                        ReviewInpOrderUniformsVORowImpl.setDotaID(InputOrderUniformsVORowImpl.getDotaID());
                        ReviewInpOrderUniformsVORowImpl.setUniformTypeCod(InputOrderUniformsVORowImpl.getUniformTypeCod());
                        ReviewInpOrderUniformsVORowImpl.setPlantaQty(InputOrderUniformsVORowImpl.getPlantaQty());
                        ReviewInpOrderUniformsVORowImpl.setEventQty(InputOrderUniformsVORowImpl.getEventQty());
                        ReviewInpOrderUniformsVORowImpl.setMeasureUnitCod(InputOrderUniformsVORowImpl.getMeasureUnitCod());
                        ReviewInpOrderUniformsVORowImpl.setCycleCod(InputOrderUniformsVORowImpl.getCycleCod());
                        ReviewInpOrderUniformsVORowImpl.setNomenclature(InputOrderUniformsVORowImpl.getNomenclature());
                        ReviewInpOrderUniformsVORowImpl.setNpCod(InputOrderUniformsVORowImpl.getNpCod());
                        ReviewInpOrderUniformsVORowImpl.setSustFlag(InputOrderUniformsVORowImpl.getSustFlag());
                        ReviewInpOrderUniformsVORowImpl.setTallaID(InputOrderUniformsVORowImpl.getTallaID());
                        ReviewInpOrderUniformsVORowImpl.setTallaNbr(InputOrderUniformsVORowImpl.getTallaNbr());
                        ReviewInpOrderUniformsVORowImpl.setInventoryID(InputOrderUniformsVORowImpl.getInventoryID());
                        ReviewInpOrderUniformsVORowImpl.setInventoryCod(InputOrderUniformsVORowImpl.getInventoryCod());
                        ReviewInpOrderUniformsVORowImpl.setOrganizationID(InputOrderUniformsVORowImpl.getOrganizationID());
                        ReviewInpOrderUniformsVORowImpl.setQuantity(InputOrderUniformsVORowImpl.getQuantity());
                        ReviewInpOrderUniformsVORowImpl.setPrice(InputOrderUniformsVORowImpl.getPrice());

                        try {
                            ReviewInpOrderUniformsVORowImpl.setTotAmount(new oracle.jbo.domain.Number(InputOrderUniformsVORowImpl.getQuantity()).multiply(InputOrderUniformsVORowImpl.getPrice()));
                        } catch (SQLException sqle) {
                            retval.add(new OAException("EXCEPTION Al calcular el monto total:" + 
                                                       sqle.getErrorCode() + 
                                                       " , " + 
                                                       sqle.getMessage(), 
                                                       OAException.ERROR));
                            return retval;
                        }

                        ReviewInpOrderUniformsVOImpl.insertRow(ReviewInpOrderUniformsVORowImpl);
                    }
                }
            } /** End While **/
            InputOrderUniformsIterator.closeRowSetIterator();
        }

        return retval;

    } /** END Method **/

    /**
     * Metodo que remueve registros del View Object XxGamReviewInpOrderUniformsVO
     * @return
     */
    public String cleanReviewInputInfo() {
        String retval = null;
        XxGamReviewInpOrderUniformsVOImpl ReviewInpOrderUniformsVOImpl = 
            getXxGamReviewInpOrderUniformsVO1();
        if (null != ReviewInpOrderUniformsVOImpl) {
            ReviewInpOrderUniformsVOImpl.executeQuery();
            while (ReviewInpOrderUniformsVOImpl.hasNext()) {
                ReviewInpOrderUniformsVOImpl.next();
                ReviewInpOrderUniformsVOImpl.removeCurrentRow();
            }
        }

        return retval;

    } /** END Method **/


    /**
     * Metodo que poblara la informacion de la cabecera de Orden de Venta 
     * @return
     */
    public String fillSalesOrderHdrInfo() {
        String retval = null;
        String strOperativeUnitID = null;
        String strPayroll = null;
        int counter = 0;

        String strPriceListDesc = null;
        String strPriceListHdrID = null;
        String strPriceList = null;
        String strClient = null;
        String strShipping = null;
        String strBilling = null;

        XxGamPersonVtaUniformInfoVOImpl PersonVtaUniformInfoVOImpl = 
            getXxGamPersonVtaUniformInfoVO1();
        XxGamPersonVtaUniformInfoVORowImpl PersonVtaUniformInfoVORowImpl = 
            null;
        if (null != PersonVtaUniformInfoVOImpl) {

            RowSetIterator PersonVtaUniformInfoIterator = 
                PersonVtaUniformInfoVOImpl.createRowSetIterator(null);
            if (PersonVtaUniformInfoIterator.hasNext()) {
                PersonVtaUniformInfoVORowImpl = 
                        (XxGamPersonVtaUniformInfoVORowImpl)PersonVtaUniformInfoIterator.next();
                strOperativeUnitID = 
                        PersonVtaUniformInfoVORowImpl.getOperatingUnitID();
                strPayroll = PersonVtaUniformInfoVORowImpl.getPayroll();
            }
            PersonVtaUniformInfoIterator.closeRowSetIterator();
        } /** END if(null!=PersonVtaUniformInfoVOImpl){ **/

        OADBTransaction oaDBTransaction = this.getOADBTransaction();
        Connection connection = oaDBTransaction.getJdbcConnection();

        String strPrepStmt = 
            " select PRICE_LIST_DESC " + "     ,PRICE_LIST_HDR_ID " + 
            "     ,PRICE_LIST " + "     ,CLIENT " + "     ,SHIPPING " + 
            "     ,BILLING " + " from XXGAM_INV_VTA_UNIF_CONFIG " + 
            " where operative_unit_id = ? " + "  and payroll = ? ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        System.out.println("strOperativeUnitID:" + strOperativeUnitID);
        System.out.println("strPayroll:" + strPayroll);

        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strOperativeUnitID));
            prepStmt.setString(2, strPayroll);
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                counter = counter + 1;
                strPriceListDesc = resultSet.getString("PRICE_LIST_DESC");
                strPriceListHdrID = resultSet.getString("PRICE_LIST_HDR_ID");
                strPriceList = resultSet.getString("PRICE_LIST");
                strClient = resultSet.getString("CLIENT");
                strShipping = resultSet.getString("SHIPPING");
                strBilling = resultSet.getString("BILLING");
            } /** END While **/

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener Lista de Precios, Numero Cliente, Envio y Facturacion. " + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval = 
                    "EXCEPTION al obtener Lista de Precios, Numero Cliente, Envio y Facturacion. No se encontraron registros ";
            return retval;
        } else if (counter > 1) {
            retval = 
                    "EXCEPTION al obtener Lista de Precios, Numero Cliente, Envio y Facturacion. Mas de un registro ";
            return retval;
        }


        String strTransactionTypeID = 
            getSOTransactionTypeID(strPriceListDesc, connection);
        if (null != strTransactionTypeID) {
            if (strTransactionTypeID.contains("EXCEPTION")) {
                return strTransactionTypeID;
            }
        }

        String strCustomerID = getSOCustomerID(strClient, connection);
        if (null != strCustomerID) {
            if (strCustomerID.contains("EXCEPTION")) {
                return strCustomerID;
            }
        }

        String strShipLocID = 
            getSOShipLocID(strOperativeUnitID, strShipping, connection);
        if (null != strShipLocID) {
            if (strShipLocID.contains("EXCEPTION")) {
                return strShipLocID;
            }
        }

        String strBillLocID = 
            getSOBillLocID(strOperativeUnitID, strBilling, connection);
        if (null != strBillLocID) {
            if (strBillLocID.contains("EXCEPTION")) {
                return strBillLocID;
            }
        }

        XxGamSalesOrderHdrInfoVOImpl SalesOrderHdrInfoVOImpl = 
            getXxGamSalesOrderHdrInfoVO1();
        XxGamSalesOrderHdrInfoVORowImpl SalesOrderHdrInfoVORowImpl = null;
        if (null != SalesOrderHdrInfoVOImpl) {
            if (!SalesOrderHdrInfoVOImpl.isPreparedForExecution()) {
                SalesOrderHdrInfoVOImpl.executeQuery();
            }
            SalesOrderHdrInfoVORowImpl = 
                    (XxGamSalesOrderHdrInfoVORowImpl)SalesOrderHdrInfoVOImpl.createRow();
            SalesOrderHdrInfoVORowImpl.setTransactionTypeID(strTransactionTypeID);
            SalesOrderHdrInfoVORowImpl.setTransactionType(strPriceListDesc);
            SalesOrderHdrInfoVORowImpl.setListHdrID(strPriceListHdrID);
            SalesOrderHdrInfoVORowImpl.setListHdr(strPriceList);
            SalesOrderHdrInfoVORowImpl.setCustomerID(strCustomerID);
            SalesOrderHdrInfoVORowImpl.setCustomerNum(strClient);

            SalesOrderHdrInfoVORowImpl.setShipLocID(strShipLocID);
            SalesOrderHdrInfoVORowImpl.setShipLocNum(strShipping);

            SalesOrderHdrInfoVORowImpl.setBillLocID(strBillLocID);
            SalesOrderHdrInfoVORowImpl.setBillLocNum(strBilling);

            SalesOrderHdrInfoVORowImpl.setCurrencyCode("MXN");

            SalesOrderHdrInfoVOImpl.insertRow(SalesOrderHdrInfoVORowImpl);
        } /** End if(null!=SalesOrderHdrInfoVOImpl){ **/


        return retval;
    }


    /**
     * Metodo para obtener El tipo de transaccion de la Sale Order
     * @param strPriceListDesc
     * @param connection
     * @return
     */
    private String getSOTransactionTypeID(String strPriceListDesc, 
                                          Connection connection) {
        String retval = null;
        int counter = 0;
        String strPrepStmt = 
            " select   T.TRANSACTION_TYPE_ID " + "        ,T.NAME " + 
            "        ,T.DESCRIPTION      " + 
            "  FROM   OE_TRANSACTION_TYPES_TL T " + 
            "        ,OE_TRANSACTION_TYPES_all B " + 
            " WHERE   B.TRANSACTION_TYPE_ID = T.TRANSACTION_TYPE_ID " + 
            "   AND   T.LANGUAGE = USERENV ('LANG') " + 
            "   and   t.name in (?) ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;


        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            prepStmt.setString(1, strPriceListDesc);
            resultSet = prepStmt.executeQuery();

            while (resultSet.next()) {
                counter = counter + 1;
                retval = resultSet.getString("TRANSACTION_TYPE_ID");
            }

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener el tipo de transaccion del Sale Order. " + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval = 
                    "EXCEPTION al obtener el tipo de transaccion del Sale Order: No se encontraron registros.";
            return retval;
        } else if (counter > 1) {
            retval = 
                    "EXCEPTION al obtener el tipo de transaccion del Sale Order: Mas de un registro. ";
            return retval;
        }

        return retval;
    }

    /**
     * Metodo que recupera el Id del cliente de la Sale Order.
     * @param strClient
     * @param connection
     * @return
     */
    private String getSOCustomerID(String strClient, Connection connection) {
        String retval = null;
        int counter = 0;
        String strPrepStmt = 
            " select CUST_ACCT.CUST_ACCOUNT_ID " + "       ,CUST_ACCT.ACCOUNT_NUMBER " + 
            "   from hz_cust_accounts CUST_ACCT " + 
            "       ,hz_parties PARTY " + 
            "  where CUST_ACCT.PARTY_ID = PARTY.PARTY_ID " + 
            "    and CUST_ACCT.ACCOUNT_NUMBER in (?) ";

        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            prepStmt.setString(1, strClient);
            resultSet = prepStmt.executeQuery();

            while (resultSet.next()) {
                counter = counter + 1;
                retval = resultSet.getString("CUST_ACCOUNT_ID");
            }

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener el ID del Cliente del Sale Order. " + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval = 
                    "EXCEPTION al obtener el ID del Cliente del Sale Order: No se encontraron registros.";
            return retval;
        } else if (counter > 1) {
            retval = 
                    "EXCEPTION al obtener el ID del Cliente del Sale Order: Mas de un registro. ";
            return retval;
        }

        return retval;

    }

    /**
     * Metodo que recupera el Id de del lugar de envio del Sale Order. 
     * @param strShipping
     * @param connection
     * @return
     */
    private String getSOShipLocID(String strOperativeUnitID, 
                                  String strShipping, Connection connection) {
        String retval = null;
        int counter = 0;
        String strPrepStmt =
            /*  "   where ship_su.org_id = ? " +  */
            " select ship_su.SITE_USE_ID ship_loc_id " + 
            "        ,ship_su.location " + 
            "    from hz_cust_site_uses_all ship_su " + "   where 1=1 " + 
            "     and ship_su.location in (?) ";

        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            /********************************************************
      prepStmt.setDouble(1,new Double(strOperativeUnitID));
      prepStmt.setString(2,strShipping);
      ********************************************************/
            prepStmt.setString(1, strShipping);

            resultSet = prepStmt.executeQuery();

            while (resultSet.next()) {
                counter = counter + 1;
                retval = resultSet.getString("ship_loc_id");
            }

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener el ID del Lugar de Envio del Sale Order. " + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval = 
                    "EXCEPTION al obtener el ID del Lugar de Envio:" + strShipping + 
                    " del Pedido de Venta: No se encontraron registros.";
            return retval;
        } else if (counter > 1) {
            retval = 
                    "EXCEPTION al obtener el ID del Lugar de Envio:" + strShipping + 
                    " del Pedido de Venta: Mas de un registro. ";
            return retval;
        }

        return retval;


    }

    /**
     * Metodo para obtener Id  del lugar de Faturacion
     * @param strOperativeUnitID
     * @param strBilling
     * @param connection
     * @return
     */
    private String getSOBillLocID(String strOperativeUnitID, String strBilling, 
                                  Connection connection) {
        String retval = null;
        int counter = 0;
        String strPrepStmt =
            /* " where bill_su.org_id = ? " + */
            " select bill_su.SITE_USE_ID bill_loc_id " + 
            "       ,bill_su.location " + 
            " from hz_cust_site_uses_all bill_su " + " where 1=1 " + 
            "  and bill_su.location in (?)    ";

        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            /********************************************************
      prepStmt.setDouble(1,new Double(strOperativeUnitID));
      prepStmt.setString(2,strBilling);
      *********************************************************/
            prepStmt.setString(1, strBilling);

            resultSet = prepStmt.executeQuery();

            while (resultSet.next()) {
                counter = counter + 1;
                retval = resultSet.getString("bill_loc_id");
            }

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al obtener el ID del Lugar de Facturacion del Sale Order. " + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval = 
                    "EXCEPTION al obtener el ID del Lugar de Facturacion del Sale Order: No se encontraron registros.";
            return retval;
        } else if (counter > 1) {
            retval = 
                    "EXCEPTION al obtener el ID del Lugar de Facturacion del Sale Order: Mas de un registro. ";
            return retval;
        }

        return retval;

    }

    /**
     * Metodo que pobla la cabecera de un Sale Order que se genera desde Autoservicio
     * @return
     */
    public String populateSOHeaderInfo() {
        String retval = null;
        oracle.jbo.domain.Number numHdrID = null;
        XxGamInvVtaUnifHdrVOImpl InvVtaUnifHdrVOImpl = 
            getXxGamInvVtaUnifHdrVO1();
        XxGamInvVtaUnifHdrVORowImpl InvVtaUnifHdrVORowImpl = null;

        XxGamPersonVtaUniformInfoVOImpl PersonVtaUniformInfoVOImpl = 
            getXxGamPersonVtaUniformInfoVO1();
        XxGamPersonVtaUniformInfoVORowImpl PersonVtaUniformInfoVORowImpl = 
            null;
        if (null != PersonVtaUniformInfoVOImpl) {
            PersonVtaUniformInfoVORowImpl = 
                    (XxGamPersonVtaUniformInfoVORowImpl)PersonVtaUniformInfoVOImpl.getCurrentRow();
        }

        XxGamSalesOrderHdrInfoVOImpl SalesOrderHdrInfoVOImpl = 
            getXxGamSalesOrderHdrInfoVO1();
        XxGamSalesOrderHdrInfoVORowImpl SalesOrderHdrInfoVORowImpl = null;
        if (null != SalesOrderHdrInfoVOImpl) {
            SalesOrderHdrInfoVORowImpl = 
                    (XxGamSalesOrderHdrInfoVORowImpl)SalesOrderHdrInfoVOImpl.getCurrentRow();
        }

        OADBTransaction oaDBTransaction = getOADBTransaction();


        if (null != InvVtaUnifHdrVOImpl) {
            try {
                if (!InvVtaUnifHdrVOImpl.isPreparedForExecution()) {
                    InvVtaUnifHdrVOImpl.executeQuery();
                }

                try {
                    numHdrID = 
                            oaDBTransaction.getSequenceValue("XXGAM_INV_VTA_UNIF_HDR_S");
                } catch (SQLStmtException SQLStmte) {
                    retval = 
                            "EXCEPTION al consultar la secuencia XXGAM_INV_VTA_UNIF_HDR_S: " + 
                            SQLStmte.getErrorCode() + " , " + 
                            SQLStmte.getMessage();
                    return retval;
                }

                InvVtaUnifHdrVORowImpl = 
                        (XxGamInvVtaUnifHdrVORowImpl)InvVtaUnifHdrVOImpl.createRow();

                InvVtaUnifHdrVORowImpl.setHdrId(numHdrID);
                InvVtaUnifHdrVORowImpl.setPersonId(new oracle.jbo.domain.Number(PersonVtaUniformInfoVORowImpl.getPersonID()));
                InvVtaUnifHdrVORowImpl.setFullName(PersonVtaUniformInfoVORowImpl.getPersonFullName());
                InvVtaUnifHdrVORowImpl.setEmployeeNumber(PersonVtaUniformInfoVORowImpl.getEmployeeNumber());
                InvVtaUnifHdrVORowImpl.setAssigmentId(new oracle.jbo.domain.Number(PersonVtaUniformInfoVORowImpl.getAssigmentID()));
                InvVtaUnifHdrVORowImpl.setOperatingUnitId(new oracle.jbo.domain.Number(PersonVtaUniformInfoVORowImpl.getOperatingUnitID()));
                InvVtaUnifHdrVORowImpl.setHrOrgId(new oracle.jbo.domain.Number(PersonVtaUniformInfoVORowImpl.getOrganizationID()));

                InvVtaUnifHdrVORowImpl.setSoTransactionTypeId(new oracle.jbo.domain.Number(SalesOrderHdrInfoVORowImpl.getTransactionTypeID()));
                InvVtaUnifHdrVORowImpl.setSoListHdrId(new oracle.jbo.domain.Number(SalesOrderHdrInfoVORowImpl.getListHdrID()));
                InvVtaUnifHdrVORowImpl.setSoCustId(new oracle.jbo.domain.Number(SalesOrderHdrInfoVORowImpl.getCustomerID()));
                InvVtaUnifHdrVORowImpl.setSoShipId(new oracle.jbo.domain.Number(SalesOrderHdrInfoVORowImpl.getShipLocID()));
                InvVtaUnifHdrVORowImpl.setSoBillId(new oracle.jbo.domain.Number(SalesOrderHdrInfoVORowImpl.getBillLocID()));
                InvVtaUnifHdrVORowImpl.setSoCurrencyCode(SalesOrderHdrInfoVORowImpl.getCurrencyCode());

                InvVtaUnifHdrVOImpl.insertRow(InvVtaUnifHdrVORowImpl);
            } catch (SQLException sqle) {
                retval = 
                        "EXCEPTION al poblar la tabla XXGAM_INV_VTA_UNIF_HDR. " + 
                        sqle.getErrorCode() + " , " + sqle.getMessage();
                return retval;
            }

        }

        if (null != numHdrID) {
            return numHdrID.toString();
        }

        return retval;
    }

    /**
     * Metodo que crea Una Sales Order en el Modulo de Order Managment
     * @return
     */
    public String createSalesOrderByApi(String strVtaUniHeaderID) {
        String retval = null;
        String strErrmsg = null;
        String strErrcod = null;
        String strSOReturnStatus = null;

        String strCallableStmt = 
            " BEGIN " + "  APPS.XXGAM_INV_VTA_UNIF_PKG.CREATE_SO_BY_API ( pso_errmsg => :1" + 
            "                                     , pso_errcod => :2" + 
            "                                     , pso_return_status => :3" + 
            "                                     , pni_vta_uni_id    => :4" + 
            "  ); " + " END;  ";

        OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();

        OracleCallableStatement oraclecallablestatement = 
            (OracleCallableStatement)oadbtransaction.createCallableStatement(strCallableStmt, 
                                                                             1);


        try {
            oraclecallablestatement.registerOutParameter(1, Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(2, Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(3, Types.VARCHAR);
            oraclecallablestatement.setDouble(4, 
                                              new Double(strVtaUniHeaderID));

            oraclecallablestatement.execute();

            strErrmsg = oraclecallablestatement.getString(1);
            strErrcod = oraclecallablestatement.getString(2);
            strSOReturnStatus = oraclecallablestatement.getString(3);

            System.out.println("strErrmsg:" + strErrmsg);
            System.out.println("strErrcod:" + strErrcod);
            System.out.println("strSOReturnStatus:" + strSOReturnStatus);

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al crear el Sales Order en Order Managment. " + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
            return retval;
        }

        /** retval = strErrmsg+" , "+strErrcod;  **/
        retval = strErrmsg;

        if (null != strSOReturnStatus) {
            if ("FAILED".equalsIgnoreCase(strSOReturnStatus)) {
                retval = "EXCEPTION No Se logro crear el pedido de venta.";
                return retval;
            }
        }

        return retval;
    }


    /**
     * 
     * @param strXxGamHeaderID
     * @return
     */
    public String populateSOLinesInfo(String strXxGamHeaderID) {
        String retval = null;
        oracle.jbo.domain.Number numLineID = null;
        XxGamReviewInpOrderUniformsVOImpl ReviewInpOrderUniformsVOImpl = 
            getXxGamReviewInpOrderUniformsVO1();
        XxGamReviewInpOrderUniformsVORowImpl ReviewInpOrderUniformsVORowImpl = 
            null;
        XxGamInvVtaUnifLinVOImpl InvVtaUnifLinVOImpl = 
            getXxGamInvVtaUnifLinVO1();
        XxGamInvVtaUnifLinVORowImpl InvVtaUnifLinVORowImpl = null;

        OADBTransaction oaDBTransaction = getOADBTransaction();

        RowSetIterator ReviewInpOrderUniformsIter = 
            ReviewInpOrderUniformsVOImpl.createRowSetIterator(null);
        while (ReviewInpOrderUniformsIter.hasNext()) {
            ReviewInpOrderUniformsVORowImpl = 
                    (XxGamReviewInpOrderUniformsVORowImpl)ReviewInpOrderUniformsIter.next();

            if (null != InvVtaUnifLinVOImpl) {
                try {
                    if (!InvVtaUnifLinVOImpl.isPreparedForExecution()) {
                        InvVtaUnifLinVOImpl.executeQuery();
                    }

                    InvVtaUnifLinVORowImpl = 
                            (XxGamInvVtaUnifLinVORowImpl)InvVtaUnifLinVOImpl.createRow();
                    numLineID = 
                            oaDBTransaction.getSequenceValue("XXGAM_INV_VTA_UNIF_LIN_S");
                    InvVtaUnifLinVORowImpl.setLinId(numLineID);
                    InvVtaUnifLinVORowImpl.setHdrId(new oracle.jbo.domain.Number(strXxGamHeaderID));
                    InvVtaUnifLinVORowImpl.setSoInvItemId(new oracle.jbo.domain.Number(ReviewInpOrderUniformsVORowImpl.getInventoryID()));
                    InvVtaUnifLinVORowImpl.setSoOrderedQty(new oracle.jbo.domain.Number(ReviewInpOrderUniformsVORowImpl.getQuantity()));
                    InvVtaUnifLinVORowImpl.setSoShipFromOrgId(new oracle.jbo.domain.Number(ReviewInpOrderUniformsVORowImpl.getOrganizationID()));
                    InvVtaUnifLinVORowImpl.setKitId(new oracle.jbo.domain.Number(ReviewInpOrderUniformsVORowImpl.getKitID()));
                    InvVtaUnifLinVORowImpl.setKitCod(ReviewInpOrderUniformsVORowImpl.getKitCod());
                    InvVtaUnifLinVORowImpl.setDotaId(new oracle.jbo.domain.Number(ReviewInpOrderUniformsVORowImpl.getDotaID()));
                    InvVtaUnifLinVORowImpl.setTallaId(new oracle.jbo.domain.Number(ReviewInpOrderUniformsVORowImpl.getTallaID()));
                    InvVtaUnifLinVORowImpl.setTallaNbr(ReviewInpOrderUniformsVORowImpl.getTallaNbr());

                    InvVtaUnifLinVOImpl.insertRow(InvVtaUnifLinVORowImpl);
                } catch (SQLException sqle) {
                    retval = 
                            "EXCEPTION al poblar la tabla XXGAM_INV_VTA_UNIF_LIN. " + 
                            sqle.getErrorCode() + " , " + sqle.getMessage();
                    return retval;
                }
            }

        }
        ReviewInpOrderUniformsIter.closeRowSetIterator();

        retval = "SUCCES";
        return retval;
    }


    /**
     * Metodo que inicializa el View Object Detalles de un pedido de venta de uniformes..
     * @param numOperatingUnitID
     * @param numSoHeaderId
     */
    public void exeFollowOrderUniformsLines(Number numOperatingUnitID, 
                                            Number numSoHeaderId) {

        XxGamFollOrderUnifLinVOImpl FollOrderUnifLinVOImpl = 
            getXxGamFollOrderUnifLinVO1();
        if (null != FollOrderUnifLinVOImpl) {
            /* FollOrderUnifLinVOImpl.setpOrgID(numOperatingUnitID); */
            FollOrderUnifLinVOImpl.setpSoHeaderID(numSoHeaderId);
            FollOrderUnifLinVOImpl.executeQuery();
        }

    }

    public com.sun.java.util.collections.List valAmntInputOrderUnif() {
        com.sun.java.util.collections.List retval = 
            new com.sun.java.util.collections.ArrayList();
        XxGamInputOrderUniformsVOImpl InputOrderUniformsVOImpl = 
            getXxGamInputOrderUniformsVO1();
        XxGamInputOrderUniformsVORowImpl InputOrderUniformsVORowImpl = null;
        int counter = 0;
        if (null != InputOrderUniformsVOImpl) {
            RowSetIterator IterInputOrderUniforms = 
                InputOrderUniformsVOImpl.createRowSetIterator(null);
            while (IterInputOrderUniforms.hasNext()) {
                String strQuantity = null;
                String strNomenclature = null;
                String strTallaNbr = null;
                oracle.jbo.domain.Number numQuantity = null;
                InputOrderUniformsVORowImpl = 
                        (XxGamInputOrderUniformsVORowImpl)IterInputOrderUniforms.next();
                strNomenclature = 
                        InputOrderUniformsVORowImpl.getNomenclature();
                strQuantity = InputOrderUniformsVORowImpl.getQuantity();
                strTallaNbr = InputOrderUniformsVORowImpl.getTallaNbr();
                if (null != strQuantity && !"".equals(strQuantity)) {
                    try {
                        numQuantity = 
                                new oracle.jbo.domain.Number(strQuantity);
                    } catch (SQLException sqle) {
                        retval.add(new OAException(strNomenclature + ": " + 
                                                   sqle.getMessage() + " , " + 
                                                   sqle.getErrorCode(), 
                                                   OAException.ERROR));
                    }

                    if (null != numQuantity) {
                        if (-1 == numQuantity.compareTo(0)) {
                            retval.add(new OAException(strNomenclature + 
                                                       ": La cantidad ingresada no puede ser menor a cero.", 
                                                       OAException.ERROR));
                        }
                        if (0 == numQuantity.compareTo(0)) {
                            retval.add(new OAException(strNomenclature + 
                                                       ": La cantidad ingresada no puede ser igual a cero.", 
                                                       OAException.ERROR));
                        }
                        try {
                            java.lang.Integer.parseInt(numQuantity.toString());
                        } catch (NumberFormatException nfe) {
                            retval.add(new OAException(strNomenclature + 
                                                       ": La cantidad ingresada no puede tener decimales.", 
                                                       OAException.ERROR));
                        }
                    }

                } /** END if(null!=strQuantity&&!"".equals(strQuantity)){ **/

                if (null != strTallaNbr && !"".equals(strTallaNbr)) {
                    if (null == numQuantity) {
                        retval.add(new OAException(strNomenclature + 
                                                   ": Si ingresa la talla debe ingresar la cantidad.", 
                                                   OAException.ERROR));
                    } else {
                        counter = counter + 1;
                    }

                }

                if (null != numQuantity) {
                    if (null == strTallaNbr || "".equals(strTallaNbr)) {
                        retval.add(new OAException(strNomenclature + 
                                                   ": Si ingresa la cantidad debe de ingresar la talla.", 
                                                   OAException.ERROR));
                    }
                }


            } /** END while(IterInputOrderUniforms.hasNext()){ **/
            IterInputOrderUniforms.closeRowSetIterator();
        }

        if (0 == counter) {
            retval.add(new OAException("Debe ingresar al menos un registro", 
                                       OAException.ERROR));
        }


        return retval;
    }

    /**
     * Metodo que ordena los registros del View Object XxGamInputOrderUniformsVO
     */
    public void sortInputOrderUniformsVO() {
        System.out.println("Ingresa Para Ordenar Registros.");
        XxGamInputOrderUniformsVOImpl InputOrderUniformsVOImpl = 
            getXxGamInputOrderUniformsVO1();
        if (null != InputOrderUniformsVOImpl) {
            InputOrderUniformsVOImpl.setSortBy("Nomenclature");
            InputOrderUniformsVOImpl.setQueryMode(InputOrderUniformsVOImpl.QUERY_MODE_SCAN_VIEW_ROWS);
            InputOrderUniformsVOImpl.executeQuery();

        }
    }

    /**
     * Metodo que pobla la informacion del Subtotal, Inmpuesto, Total
     */
    public String[] fillSubtotalIvaInfo() {

        String[] retval = new String[4];
        retval[0] = "SUCCESS";
        retval[1] = null;
        retval[2] = null;
        retval[3] = null;

        XxGamReviewInpOrderUniformsVOImpl ReviewInpOrderUniformsVOImpl = 
            getXxGamReviewInpOrderUniformsVO1();
        XxGamReviewInpOrderUniformsVORowImpl ReviewInpOrderUniformsVORowImpl = 
            null;

        RowSetIterator ReviewInpOrderUnifIterator = 
            ReviewInpOrderUniformsVOImpl.createRowSetIterator(null);
        oracle.jbo.domain.Number numSubtotal = new oracle.jbo.domain.Number(0);

        oracle.jbo.domain.Number numRazonIvaArLoc = 
            new oracle.jbo.domain.Number(0);
        oracle.jbo.domain.Number numImpuesto = new oracle.jbo.domain.Number(0);
        oracle.jbo.domain.Number numTotal = new oracle.jbo.domain.Number(0);

        while (ReviewInpOrderUnifIterator.hasNext()) {
            ReviewInpOrderUniformsVORowImpl = 
                    (XxGamReviewInpOrderUniformsVORowImpl)ReviewInpOrderUnifIterator.next();
            numSubtotal = 
                    numSubtotal.add(ReviewInpOrderUniformsVORowImpl.getTotAmount());
        }
        ReviewInpOrderUnifIterator.closeRowSetIterator();

        retval[1] = numSubtotal.toString();

        OADBTransaction oaDBTransaction = this.getOADBTransaction();
        Connection connection = oaDBTransaction.getJdbcConnection();

        String[] arrayGetIvaArLoc = this.getIvaArLocInfo(connection);
        System.out.println("Razon IvaArLoc:" + arrayGetIvaArLoc[1]);
        if (null != arrayGetIvaArLoc[0]) {
            if (arrayGetIvaArLoc[0].contains("EXCEPTION")) {
                retval[0] = arrayGetIvaArLoc[0];
                return retval;
            }
            try {
                numRazonIvaArLoc = 
                        new oracle.jbo.domain.Number(arrayGetIvaArLoc[1]);
            } catch (SQLException sqle) {
                retval[0] = 
                        "EXCEPTION al convertir la tasa de iva a numerico:" + 
                        sqle.getMessage() + " , " + sqle.getSQLState();
                return retval;
            }
        } /** END if(null!=arrayGetIvaArLoc[0]){ **/

        numImpuesto = numSubtotal.multiply(numRazonIvaArLoc).multiply(0.01);

        retval[2] = numImpuesto.toString();

        numTotal = numImpuesto.add(numSubtotal);

        retval[3] = numTotal.toString();

        return retval;

    }

    /**
     * Metodo que recupera la informacion de impuestos.
     * @param connection
     * @return
     */
    private String[] getIvaArLocInfo(Connection connection) {
        String[] retval = new String[2];
        retval[0] = "SUCCESS";
        retval[1] = null;

        int counter = 0;
        String strPrepStmt = 
            " SELECT   RateTLEO.TAX_RATE_ID, " + "                   RateTLEO.TAX_RATE_CODE, " + 
            "                   RateTLEO.EFFECTIVE_FROM, " + 
            "                   RateTLEO.EFFECTIVE_TO, " + 
            "                   RateTLEO.TAX_REGIME_CODE, " + 
            "                   RateTLEO.TAX, " + 
            "                   RateTLEO.TAX_STATUS_CODE, " + 
            "                   RateTLEO.RATE_TYPE_CODE, " + 
            "                   RateTLEO.PERCENTAGE_RATE, " + 
            "                   RateTLEO.QUANTITY_RATE, " + 
            "                   RateTLEO.UOM_CODE, " + 
            "                   RateTLEO.TAX_JURISDICTION_CODE, " + 
            "                   RateTLEO.RECOVERY_TYPE_CODE, " + 
            "                   RateTLEO.ACTIVE_FLAG, " + 
            "                   RateTLEO.DEF_REC_SETTLEMENT_OPTION_CODE, " + 
            "                   RateTLEO.DEFAULT_RATE_FLAG, " + 
            "                   RateTLEO.DEFAULT_FLG_EFFECTIVE_FROM, " + 
            "                   RateTLEO.DEFAULT_FLG_EFFECTIVE_TO, " + 
            "                   RateTLEO.DEFAULT_REC_TYPE_CODE, " + 
            "                   RateTLEO.DEFAULT_REC_RATE_CODE, " + 
            "                   RateTLEO.OFFSET_TAX, " + 
            "                   RateTLEO.OFFSET_STATUS_CODE, " + 
            "                   RateTLEO.OFFSET_TAX_RATE_CODE, " + 
            "                   RateTLEO.RECOVERY_RULE_CODE, " + 
            "                   RateTLEO.TAX_RATE_NAME, " + 
            "                   RateTLEO.VAT_TRANSACTION_TYPE_CODE, " + 
            "                   RateTLEO.CONTENT_OWNER_ID, " + 
            "                   RateTLEO.CONTENT_OWNER_NAME AS CONTENT_OWNER, " + 
            "                   RateTLEO.ALLOW_ADHOC_TAX_RATE_FLAG, " + 
            "                   RateTLEO.ADJ_FOR_ADHOC_AMT_CODE, " + 
            "                   RateTLEO.RECORD_TYPE_CODE, " + 
            "                   RateTLEO.TAXABLE_BASIS_FORMULA_CODE, " + 
            "                   RateTLEO.INCLUSIVE_TAX_FLAG, " + 
            "                   RateTLEO.TAX_INCLUSIVE_OVERRIDE_FLAG, " + 
            "                   RateTLEO.OBJECT_VERSION_NUMBER, " + 
            "                   RateTLEO.ALLOW_EXEMPTIONS_FLAG, " + 
            "                   RateTLEO.ALLOW_EXCEPTIONS_FLAG, " + 
            "                   RateTLEO.VAT_TRANSACTION_TYPE_CODE TRANS_VAT_TYPE_CODE, " + 
            "                   RateTLEO.RECOVERY_RULE_CODE TRANS_REC_RULE_CODE, " + 
            "                   RateTLEO.DEFAULT_REC_RATE_CODE TRANS_DEF_REC_RATE_CODE, " + 
            "                   RateTLEO.DESCRIPTION, " + 
            "                   RateTLEO.UPDATE_ACCESS, " + 
            "                   RateTLEO.TAX_CLASS " + 
            "            FROM   ZX_MCO_EO_RATES_V RateTLEO " + 
            "           WHERE   RateTLEO.ACTIVE_FLAG = 'Y' " + 
            "             and TAX_RATE_CODE = 'IVA_AR_LOC' ";

        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            resultSet = prepStmt.executeQuery();

            while (resultSet.next()) {
                counter = counter + 1;
                retval[1] = resultSet.getString("PERCENTAGE_RATE");
            }

        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al obtener la razon del Iva IVA_AR_LOC: " + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval[0] = 
                    "EXCEPTION al obtener la razon del Iva IVA_AR_LOC: No se encontraron registros.";
            return retval;
        }

        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al obtener la razon del Iva IVA_AR_LOC: Mas de un registro.";
            return retval;
        }

        return retval;
    }


    /**
     * Metodo que valida la disponibilidad Available to Transact
     * @param strInventoryID
     * @param strInvOrgID
     * @param strQuantity
     * @param strTallaNbr
     * @return
     */
    private String valCantidadDisponible(String strInventoryID, 
                                         String strInvOrgID, 
                                         String strQuantity, 
                                         String strTallaNbr, 
                                         Connection connection) {
        String retval = null;
        String isAlphaNum = "Y";
        int counter = 0;
        System.out.println("InventoryID:" + strInventoryID);
        System.out.println("InvOrgID:" + strInvOrgID);
        System.out.println("Quantity:" + strQuantity);
        System.out.println("TallaNbr:" + strTallaNbr);

        Double douSumTrxQty = new Double(0);
        Double douTallaNbr = new Double(0);
        Double douQuantity = new Double(strQuantity);

        try {
            douTallaNbr = Double.parseDouble(strTallaNbr);
        } catch (NumberFormatException nfe) {
            isAlphaNum = "N";
        }

        String strPrepStmt = 
            " select sum(transaction_quantity) sum_trx_qty " + "   from apps.mtl_onhand_quantities moh " + 
            "  where 1=1 " + "   and moh.subinventory_code = 'MEX-UNIF' " + 
            "   and moh.inventory_item_id = ? " + 
            "   and moh.organization_id = ? ";

        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            prepStmt.setDouble(1, new Double(strInventoryID));
            prepStmt.setDouble(2, new Double(strInvOrgID));
            resultSet = prepStmt.executeQuery();

            while (resultSet.next()) {
                counter = counter + 1;
                douSumTrxQty = resultSet.getDouble("sum_trx_qty");
            }

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION el total de la disponibilidad MEX-UNIF: " + sqle.getErrorCode() + 
                    " , " + sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval = 
                    "EXCEPTION el total de la disponibilidad MEX-UNIF: No se encontraron Registros.";
            return retval;
        }

        if (counter > 1) {
            retval = 
                    "EXCEPTION el total de la disponibilidad MEX-UNIF: Mas de un registro.";
            return retval;
        }

        System.out.println("douSumTrxQty:" + douSumTrxQty);

        if ("Y".equals(isAlphaNum)) {

            if (douTallaNbr.doubleValue() >= 0d && 
                douTallaNbr.doubleValue() <= 12d) {
                if (douSumTrxQty.doubleValue() > 10d) {
                    if (douQuantity.doubleValue() > 
                        douSumTrxQty.doubleValue()) {
                        retval = 
                                "Cantidad solicitada:" + douQuantity.intValue() + 
                                " es mayor que la existente:" + 
                                douSumTrxQty.intValue();
                    } else {
                        retval = "DISPONIBLE";
                    }
                } else if (douSumTrxQty.doubleValue() <= 10d) {
                    retval = "AGOTADO";
                }
            } else if (douTallaNbr.doubleValue() > 12d) {
                if (douSumTrxQty.doubleValue() > 1d) {
                    if (douQuantity.doubleValue() > 
                        douSumTrxQty.doubleValue()) {
                        retval = 
                                "Cantidad solicitada:" + douQuantity.intValue() + 
                                " es mayor que la existente:" + 
                                douSumTrxQty.intValue();
                    } else {
                        retval = "DISPONIBLE";
                    }
                } else {
                    retval = "AGOTADO";
                }
            }

        } else if ("N".equals(isAlphaNum)) {
            if (douSumTrxQty.doubleValue() > 10d) {
                if (douQuantity.doubleValue() > douSumTrxQty.doubleValue()) {
                    retval = 
                            "Cantidad solicitada:" + douQuantity.intValue() + " es mayor que la existente:" + 
                            douSumTrxQty.intValue();
                } else {
                    retval = "DISPONIBLE";
                }
            } else {
                retval = "AGOTADO";
            }
        } /** End  if("Y".equals(isAlphaNum)){ **/

        return retval;
    }

    /**
     * Metodo que filtra el View Object
     * @param strUserID
     */
    public void filterFollOrderUnifHdrVO(String strUserID) {
        XxGamFollOrderUnifHdrVOImpl FollOrderUnifHdrVOImpl = 
            getXxGamFollOrderUnifHdrVO1();
        oracle.jbo.domain.Number numUserID = null;
        try {
            numUserID = new oracle.jbo.domain.Number(strUserID);
        } catch (SQLException sqle) {
            throw new OAException("ERROR", OAException.ERROR);
        }
        if (null != FollOrderUnifHdrVOImpl) {
            FollOrderUnifHdrVOImpl.filterByUserID(numUserID);
        }
    }

    /**Inicio de modificacion NRC 11-feb-2017*/
    public String isInDateClose() {
        String retval = "SUCESS";

        String methodName = "isInDateClose";

        System.out.println("DEBUG GNOSISHCM: " + methodName);

        OADBTransaction oaDBTransaction = this.getOADBTransaction();
        Connection connection = oaDBTransaction.getJdbcConnection();

        String strPrepStmt = 
            " select 'Y' flag " + "  from fnd_lookup_values " + 
            "   where 1=1 " + 
            "   and lookup_type = 'XXGAM_FECHAS_CIERRE_PERIODO' " + 
            "   and language = USERENV('LANG') " + 
            "   and trunc(sysdate) between to_date(meaning, 'dd-mm-yyyy') " + 
            "   and to_date(description, 'dd-mm-yyyy') ";

        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            resultSet = prepStmt.executeQuery();
            if (resultSet.next()) {
                retval = resultSet.getString("flag");
            }

        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al validar cierre periodo XXGAM_FECHAS_CIERRE_PERIODO:" + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
            return retval;
        }

        this.closeResultSet(resultSet);
        this.closePreparedStatement(prepStmt);
        if (null != retval) {
            System.out.println(retval);
        }
        return retval;
    }
    /**fin de modificacion*/

    /**
     * Metodo que recupera la asignacion por excepcion de Uniformes
     * @param strPersonType
     * @param connection
     * @return
     */
    private String[] getInvAssignExcept(String strPersonType, 
                                        Connection connection) {
        String[] retval = new String[2];
        retval[0] = "SUCCESS";
        retval[1] = null;
        int counter = 0;
        String strPrepStmt = 
            " select flv.lookup_code " + "        ,flv.meaning " + 
            "        ,flv.description " + "        ,flv.language " + 
            "        ,flv.start_date_active " + 
            "        ,flv.end_date_active " + "  from fnd_lookup_values flv " + 
            " where flv.lookup_type = 'XXGAM_INV_ASSIGN_EXCEPT' " + 
            "   and flv.language=sys_context('USER','LANG') " + 
            "   and flv.enabled_flag ='Y' " + 
            "   and trunc(sysdate) between nvl(flv.start_date_active,trunc(sysdate)) " + 
            "   and NVL(flv.end_date_active,to_date('31/12/4712','DD/MM/YYYY')) " + 
            "   and upper(flv.meaning) = upper(?) ";
        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;
        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            prepStmt.setString(1, strPersonType);
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                counter = counter + 1;
                retval[1] = resultSet.getString("description");
            }
        } catch (SQLException sqle) {
            retval[0] = 
                    "EXCEPTION al validar el tipo de empleado:" + strPersonType + 
                    ", en el lookup XXGAM_INV_ASSIGN_EXCEPT. " + 
                    sqle.getErrorCode() + " , " + sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval[0] = 
                    "EXCEPTION al validar el tipo de empleado:" + strPersonType + 
                    ", en el lookup XXGAM_INV_ASSIGN_EXCEPT. No se encontraron registros.";
            return retval;
        }

        if (counter > 1) {
            retval[0] = 
                    "EXCEPTION al validar el tipo de empleado:" + strPersonType + 
                    ", en el lookup XXGAM_INV_ASSIGN_EXCEPT. Mas de un registro.";
            return retval;
        }

        return retval;

    }


    /**
     * Metodo Recupera el PersonId de un empleado
     * @param userId
     * @return
     */
    public String findPersonId(String userId) {
        String retval = "EXECPTION";

        OADBTransaction oaDBTransaction = this.getOADBTransaction();
        Connection connection = oaDBTransaction.getJdbcConnection();

        int counter = 0;
        String strPrepStmt = 
            "  select employee_id  " + "    from fnd_user   " + 
            "   where user_id = ?  ";

        PreparedStatement prepStmt = null;
        ResultSet resultSet = null;

        try {
            prepStmt = 
                    connection.prepareStatement(strPrepStmt, ResultSet.TYPE_FORWARD_ONLY, 
                                                ResultSet.CONCUR_READ_ONLY);
            prepStmt.setString(1, userId);
            resultSet = prepStmt.executeQuery();
            while (resultSet.next()) {
                counter = counter + 1;
                retval = resultSet.getString("employee_id");
            }
        } catch (SQLException sqle) {
            retval = 
                    "EXCEPTION al buscar PersonID " + sqle.getErrorCode() + " , " + 
                    sqle.getMessage();
            return retval;
        }

        closeResultSet(resultSet);
        closePreparedStatement(prepStmt);

        if (0 == counter) {
            retval = 
                    "EXCEPTION al buscar PersonID. No se encontraron registros.";
            return retval;
        }

        if (counter > 1) {
            retval = "EXCEPTION al buscar PersonID. Mas de un registro.";
            return retval;
        }

        return retval;
    }

}
