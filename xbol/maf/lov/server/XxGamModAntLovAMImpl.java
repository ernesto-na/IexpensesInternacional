package xxgam.oracle.apps.xbol.maf.lov.server;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OAViewObjectImpl;
import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;

import xxgam.oracle.apps.xbol.maf.utils.XxGamAOLMessages;
import xxgam.oracle.apps.xbol.maf.utils.XxGamConstantsUtil;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxGamModAntLovAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public XxGamModAntLovAMImpl() {
    }

    /**Container's getter for XxGamMaUserDataLovVO1
     */
    public XxGamMaUserDataLovVOImpl getXxGamMaUserDataLovVO1() {
        return (XxGamMaUserDataLovVOImpl)findViewObject("XxGamMaUserDataLovVO1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("xxgam.oracle.apps.xbol.maf.lov.server",
                                             "XxGamModAntLovAMLocal");
    }

    /**Container's getter for XxGamMaCostCenterByPersonIdLovVO1
     */
    public XxGamMaCostCenterByPersonIdLovVOImpl getXxGamMaCostCenterByPersonIdLovVO1() {
        return (XxGamMaCostCenterByPersonIdLovVOImpl)findViewObject("XxGamMaCostCenterByPersonIdLovVO1");
    }


    /**Container's getter for XxGamMaApproverByEmployeeIdLovVO1
     */
    public XxGamMaApproverByEmployeeIdLovVOImpl getXxGamMaApproverByEmployeeIdLovVO1() {
        return (XxGamMaApproverByEmployeeIdLovVOImpl)findViewObject("XxGamMaApproverByEmployeeIdLovVO1");
    }

    /**Container's getter for XxGamMaPurposeLovVO1
     */
    public XxGamMaLookupGenericLovVOImpl getXxGamMaPurposeLovVO1() {
        return (XxGamMaLookupGenericLovVOImpl)findViewObject("XxGamMaPurposeLovVO1");
    }

    /**Container's getter for XxGamMaStatusIExpensesLovVO1
     */
    public XxGamMaLookupGenericLovVOImpl getXxGamMaStatusIExpensesLovVO1() {
        return (XxGamMaLookupGenericLovVOImpl)findViewObject("XxGamMaStatusIExpensesLovVO1");
    }

    /**Container's getter for XxGamMaCurrencyLovVO1
     */
    public XxGamMaCurrencyLovVOImpl getXxGamMaCurrencyLovVO1() {
        return (XxGamMaCurrencyLovVOImpl)findViewObject("XxGamMaCurrencyLovVO1");
    }

    /**Container's getter for XxGamMaCurrencyLovVO2
     */
    public XxGamMaCurrencyLovVOImpl getXxGamMaCurrencyLovVO2() {
        return (XxGamMaCurrencyLovVOImpl)findViewObject("XxGamMaCurrencyLovVO2");
    }

    /**
     * Obtiene los datos de usuario y persona por medio del nombre de usuario
     * @param userName contiene el nombre de usuario
     * @return Devuelve los datos de la persona
     */
    public XxGamMaUserDataLovVORowImpl getUserDataByUserName(String userName) {

        XxGamMaUserDataLovVORowImpl userDataFound = null;

        XxGamMaUserDataLovVOImpl userDataVo = null;
        //Obtiene VO de LOV para datos de usuario
        userDataVo = getXxGamMaUserDataLovVO1();

        //Valida VO de LOV para datos de usuario
        if (userDataVo != null) {
            //Configura consulta de datos de usuario con username y tipo de proveedor
            userDataVo.searchUser(userName,
                                  XxGamConstantsUtil.VENDOR_TYPE_EMPLOYEE);
            
            RowSetIterator rowSetIter = userDataVo.getRowSetIterator();
            if(rowSetIter != null){
                rowSetIter.reset();
                while(rowSetIter.hasNext()){
                    Row currentRow = rowSetIter.next();
                    XxGamMaUserDataLovVORowImpl userDataRow = null;
                    userDataRow = (XxGamMaUserDataLovVORowImpl)currentRow;
                    if (userDataRow != null) {
                        if (userDataRow.getUserName() != null) {
                            if (userDataRow.getUserName().equals(userName)) {
                                userDataFound = userDataRow;
                                break;
                            }
                        }
                    }
                }
                rowSetIter.reset();
            }
        }

        return userDataFound;
    }
    
    /**
     * Obtiene los datos de usuario y persona por medio del nombre de id persona del empleado
     * @param personId contiene el id persona del empleado
     * @return Devuelve los datos de la persona.
     */
    public XxGamMaUserDataLovVORowImpl getUserDataByPersonId(Number personId) {

        XxGamMaUserDataLovVORowImpl userDataFound = null;

        XxGamMaUserDataLovVOImpl userDataVo = null;
        //Obtiene VO de LOV para datos de usuario
        userDataVo = getXxGamMaUserDataLovVO1();

        //Valida VO de LOV para datos de usuario
        if (userDataVo != null) {
            //Configura consulta de datos de usuario con username y tipo de proveedor
            userDataVo.searchUserByPersonId(personId,
                                  XxGamConstantsUtil.VENDOR_TYPE_EMPLOYEE);
            
            RowSetIterator rowSetIter = userDataVo.getRowSetIterator();
            if(rowSetIter != null){
                rowSetIter.reset();
                while(rowSetIter.hasNext()){
                    Row currentRow = rowSetIter.next();
                    XxGamMaUserDataLovVORowImpl userDataRow = null;
                    userDataRow = (XxGamMaUserDataLovVORowImpl)currentRow;
                    if (userDataRow != null) {
                        if (userDataRow.getUserName() != null) {
                            if (userDataRow.getPersonId().equals(personId)) {
                                userDataFound = userDataRow;
                                break;
                            }
                        }
                    } 
                }
                rowSetIter.reset();
            }
        }

        return userDataFound;
    }

    /**
     * Obtiene los datos de persona por medio del id de persona
     * @param personId contiene el id de persona
     * @return Regresa la row qu contiene los datos de la persona
     */
    public XxGamMaPersonDataLovVORowImpl getPersonDataById(Number personId) {
        XxGamMaPersonDataLovVORowImpl personData = null;

        if (personId != null) {
            XxGamMaPersonDataLovVOImpl voPersonData = null;
            voPersonData = getXxGamMaPersonDataLovVO1();

            if (voPersonData != null) {
                voPersonData.searchPersonDataById(personId);
                
                RowSetIterator rowSetIter = voPersonData.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaPersonDataLovVORowImpl currentRow =
                            (XxGamMaPersonDataLovVORowImpl)row;
                        if (currentRow != null) {
                            if (currentRow.getPersonId() != null) {
                                if (currentRow.getPersonId().equals(personId)) {
                                    personData = currentRow;
                                    break;
                                }
                            }
                        }    
                    }
                    rowSetIter.reset();
                }
            }
        }

        return personData;
    }

    /**
     * Devuelve el id de persona por medio del nombre de usuario
     * @param userName contiene el nombre de usuario
     * @return Devuelve el id de persona
     */
    public Number getPersonIdByUserName(String userName) {

        Number personId = null;

        if (userName != null) {
            XxGamMaUserDataLovVORowImpl userDataFound = null;
            userDataFound = getUserDataByUserName(userName);

            if (userDataFound != null) {
                personId = userDataFound.getPersonId();
            }
        }

        return personId;
    }

    /**
     * Busca y obtiene los datos del aprobador
     * @param employeeId contiene el id de persona del empleado solicitante
     * @param codeCombinationId contiene el id del codigo de combinacion contable
     * @param approverId contiene el id del aprobador
     * @return devuelve los datos del aprobador
     */
    public XxGamMaApproverByEmployeeIdLovVORowImpl getApproverDataById(Number employeeId,
                                                                       Number codeCombinationId,
                                                                       Number approverId) {
        XxGamMaApproverByEmployeeIdLovVORowImpl approverRow = null;
        if (employeeId != null && codeCombinationId != null) {
            XxGamMaApproverByEmployeeIdLovVOImpl voApproverLov = null;
            voApproverLov = getXxGamMaApproverByEmployeeIdLovVO1();

            if (voApproverLov != null) {
                voApproverLov.searchApproverByCombinationEmployee(employeeId,
                                                                  codeCombinationId);
                                                                  
                RowSetIterator rowSetIter = voApproverLov.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaApproverByEmployeeIdLovVORowImpl currentRow =
                            (XxGamMaApproverByEmployeeIdLovVORowImpl)row;
                        if (currentRow != null) {
                            if (currentRow.getPersonId() != null) {
                                if (currentRow.getPersonId().equals(approverId)) {
                                    approverRow = currentRow;
                                }
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }
        return approverRow;
    }

    /**
     * Obtiene los datos de la divisa
     * @param currencyCode contiene el codigo de la divisa
     * @return devuelve los datos de la divisa
     */
    public XxGamMaCurrencyLovVORowImpl getCurrencyByCode(String currencyCode) {
        XxGamMaCurrencyLovVORowImpl currencyRow = null;

        if (currencyCode != null) {
            XxGamMaCurrencyLovVOImpl voCurrency = null;
            voCurrency = getXxGamMaCurrencyLovVO1();

            if (voCurrency != null) {
                voCurrency.searchCurrencyByCode(currencyCode);
                
                RowSetIterator rowSetIter = voCurrency.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaCurrencyLovVORowImpl currentRow =
                            (XxGamMaCurrencyLovVORowImpl)row;
                        if (currentRow != null) {
                            if (currentRow.getCurrencyCode() != null) {
                                if (currentRow.getCurrencyCode().equals(currencyCode)) {
                                    currencyRow = currentRow;
                                    break;
                                }
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }
        return currencyRow;
    }

    /**
     * Busca y obtiene los datos de la plantilla de anticipo por centro de costo por defecto del usuario
     * @param idTemplate contiene el id de la plantilla de anticipo
     * @param costCenterId contiene el id de combinacion contable
     * @return devuelve los datos de la plantilla de anticipo
     */
    public XxGamMaTemplatePaymentLovVORowImpl getTemplatePaymentById(Number idTemplate, Number costCenterId) {
        XxGamMaTemplatePaymentLovVORowImpl templatePayment = null;

        if (idTemplate != null && costCenterId != null) {
            XxGamMaTemplatePaymentLovVOImpl voTemplate = null;
            voTemplate = getXxGamMaTemplatePaymentLovVO1();

            if (voTemplate != null) {
                voTemplate.searchTemplatePaymentById(null, costCenterId);
                
                RowSetIterator rowSetIter = voTemplate.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaTemplatePaymentLovVORowImpl currentRow =
                            (XxGamMaTemplatePaymentLovVORowImpl)row;
                        if (currentRow != null) {
                            if (costCenterId != null && idTemplate != null ) {
                                if (idTemplate.equals(currentRow.getTemplateId()) &&
                                    costCenterId.equals(currentRow.getCodeCombinationId())) {
                                    templatePayment = currentRow;
                                    break;
                                }
                            }else{
                                if(costCenterId != null){
                                    if(costCenterId.equals(currentRow.getCodeCombinationId())){
                                        templatePayment = currentRow;
                                        break;        
                                    }
                                }else{
                                    if(idTemplate != null){
                                        if(idTemplate.equals(currentRow.getTemplateId())){
                                            templatePayment = currentRow;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }

        return templatePayment;
    }
    
    /**
     * Busca y obtiene los datos de la plantilla de anticipo por centro de costo alterno
     * @param idTemplate contiene el id de la plantilla de anticipo
     * @param costCenterFlex contiene el valor del centro de costo alterno
     * @return devuelve los datos de la plantilla de anticipo
     */
    public XxGamMaTemplatePaymentFlexLovVORowImpl getTemplatePaymentByFlex(Number idTemplate, String costCenterFlex) {
        XxGamMaTemplatePaymentFlexLovVORowImpl templatePayment = null;

        if (idTemplate != null && costCenterFlex != null) {
            XxGamMaTemplatePaymentFlexLovVOImpl voTemplate = null;
            voTemplate = getXxGamMaTemplatePaymentFlexLovVO1();

            if (voTemplate != null) {
                voTemplate.searchTemplatePaymentByFlex(null, costCenterFlex);
                
                RowSetIterator rowSetIter = voTemplate.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaTemplatePaymentFlexLovVORowImpl currentRow =
                            (XxGamMaTemplatePaymentFlexLovVORowImpl)row;
                        if (currentRow != null) {
                            if (costCenterFlex != null && idTemplate != null ) {
                                if (idTemplate.equals(currentRow.getTemplateId()) &&
                                    costCenterFlex.equals(currentRow.getCostCenterFlex())) {
                                    templatePayment = currentRow;
                                    break;
                                }
                            }else{
                                if(costCenterFlex != null){
                                    if(costCenterFlex.equals(currentRow.getCostCenterFlex())){
                                        templatePayment = currentRow;
                                        break;        
                                    }
                                }else{
                                    if(idTemplate != null){
                                        if(idTemplate.equals(currentRow.getTemplateId())){
                                            templatePayment = currentRow;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }

        return templatePayment;
    }

    /**
     * Busca y obtiene los datos del proposito para la solicitud de anticipo
     * @param purposeCode contiene el codigo del proposito
     * @return devuelve los datos del proposito
     */
    public XxGamMaLookupGenericLovVORowImpl getPurposeByCode(String purposeCode) {
        XxGamMaLookupGenericLovVORowImpl purpose = null;
        if (purposeCode != null) {
            XxGamMaLookupGenericLovVOImpl lookupPurposeImpl = null;
            lookupPurposeImpl = getXxGamMaPurposeLovVO1();
            if (lookupPurposeImpl != null) {
                lookupPurposeImpl.searchLookup(XxGamConstantsUtil.LOOKUP_TYPE_PURPOSE_PAYMENT_ADVANCE,
                                               XxGamConstantsUtil.ID_APPLICATION_INTERNET_EXPENSES);
                
                RowSetIterator rowSetIter = lookupPurposeImpl.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaLookupGenericLovVORowImpl currentRow =
                            (XxGamMaLookupGenericLovVORowImpl)row;
                        if (currentRow != null) {
                            if (currentRow.getLookupCode() != null) {
                                if (currentRow.getLookupCode().equals(purposeCode)) {
                                    purpose = currentRow;
                                    break;
                                }
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }
        return purpose;
    }

    /**
     * Busca y obtiene el tipo de anticipo por el id de la plantilla de anticipo
     * @param templateId contiene el id de la plantilla de anticipo
     * @return devuelve los datos del tipo de anticipo
     */
    public XxGamMaTypePaymentLovVORowImpl getTypePaymentById(Number typePaymentId,
                                                             Number templateId) {
        XxGamMaTypePaymentLovVORowImpl typeTemplate = null;
        if (typePaymentId != null) {
            XxGamMaTypePaymentLovVOImpl voTypePayment = null;
            voTypePayment = getXxGamMaTypePaymentLovVO1();
            if (voTypePayment != null) {
                
                if(templateId != null){
                    voTypePayment.searchTypePaymentByTemplateId(templateId);    
                }
                voTypePayment.reset();
                RowSetIterator rowSetIter = voTypePayment.getRowSetIterator();
                Row row = null;
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        row = rowSetIter.next();
                        rowSetIter.getCurrentRow();
                        XxGamMaTypePaymentLovVORowImpl currentRow =
                            (XxGamMaTypePaymentLovVORowImpl)row;
                        if (currentRow != null) {
                            if (currentRow.getTypePaymentId() != null) {
                                if (currentRow.getTypePaymentId().equals(typePaymentId)) {
                                    typeTemplate = currentRow;
                                    break;
                                }
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }
        return typeTemplate;
    }

    /**
     * Obtiene el registro del jefe inmediato mediante el id de posicion del empleado subordinado
     * @param positionId contiene el id de posicion del empleado
     * @return devuelve registro del jefe inmediato
     */
    public XxGamMaChiefByPositionIdLovVORowImpl getChiefDataByEmployeePositionId(Number positionId){
        XxGamMaChiefByPositionIdLovVORowImpl rowChief = null;
        if(positionId != null){
            
            XxGamMaChiefByPositionIdLovVOImpl chiefImpl = null;
            chiefImpl = getXxGamMaChiefByPositionIdLovVO1();
            
            if(chiefImpl != null){
                
                chiefImpl.setSearchChiefByPositionId(positionId);
                
                RowSetIterator rowSetIter = chiefImpl.getRowSetIterator();
                Row row = null;
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        
                        row = rowSetIter.next();
                        rowChief = (XxGamMaChiefByPositionIdLovVORowImpl)row;
                        
                        if(rowChief != null){
                            
                            if(!positionId.equals(rowChief.getSubPositionId())){
                                rowChief = null;
                            }else{
                                break;
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }
        return rowChief;
    }

    /**
     * Busca y obtiene los datos del centro de costos por id de persona y id
     * del codigo de combinacion contable
     * @param personId contiene el id de persona
     * @param codeCombinationId contiene el id del codigo de combinacion contable
     * @param currencyCode contiene el codigo de la divisa
     * @param vcLookupType contiene el valor de lookup type para tarjeta virtual
     * @return devuelve los datos del centro de costos
     */
    public XxGamMaCostCenterByPersonIdLovVORowImpl getCostCenterById(Number personId,
                                                                     Number codeCombinationId,
                                                                     String currencyCode,
                                                                     String virtualCard,
                                                                     String vcLookupType) {
        XxGamMaCostCenterByPersonIdLovVORowImpl costCenter = null;
        if (personId != null && codeCombinationId != null && vcLookupType != null) {
            XxGamMaCostCenterByPersonIdLovVOImpl voCostCenter = null;
            voCostCenter = getXxGamMaCostCenterByPersonIdLovVO1();

            if (voCostCenter != null) {
                voCostCenter.searchCostCenterByPersonId(personId, vcLookupType);
                
                RowSetIterator rowSetIter = voCostCenter.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaCostCenterByPersonIdLovVORowImpl currentRow =
                            (XxGamMaCostCenterByPersonIdLovVORowImpl)row;
                        if (currentRow != null) {
                            if (currentRow.getCodeCombinationId() != null) {
                                String currentCurrencyCode = currentRow.getCurrencyCode();
                                String currentVirtualCard = currentRow.getVcMeaning();
                                if(currentCurrencyCode != null && currencyCode != null &&
                                   currentVirtualCard != null && virtualCard != null){
                                    
                                    if (currentRow.getCodeCombinationId().equals(codeCombinationId) &&
                                        currentRow.getCurrencyCode().equals(currencyCode) &&
                                        currentVirtualCard.equals(virtualCard)) {
                                        costCenter = currentRow;
                                        break;
                                    }
                                }else{
                                    if (currentRow.getCodeCombinationId().equals(codeCombinationId)) {
                                        if(currencyCode != null){
                                            if(currencyCode.equals(currentCurrencyCode)){
                                                if(virtualCard != null){
                                                    if(virtualCard.equals(currentVirtualCard)){
                                                        costCenter = currentRow;
                                                        break; 
                                                    }
                                                }else{
                                                    costCenter = currentRow;
                                                    break;
                                                }
                                            }
                                        }else{
                                            costCenter = currentRow;
                                            break; 
                                        }
                                    }
                                }
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }

        return costCenter;
    }

    /**Container's getter for XxGamMaTemplatePaymentLovVO1
     */
    public XxGamMaTemplatePaymentLovVOImpl getXxGamMaTemplatePaymentLovVO1() {
        return (XxGamMaTemplatePaymentLovVOImpl)findViewObject("XxGamMaTemplatePaymentLovVO1");
    }

    /**Container's getter for XxGamMaTypePaymentLovVO1
     */
    public XxGamMaTypePaymentLovVOImpl getXxGamMaTypePaymentLovVO1() {
        return (XxGamMaTypePaymentLovVOImpl)findViewObject("XxGamMaTypePaymentLovVO1");
    }

    /**Container's getter for XxGamMaPersonDataLovVO1
     */
    public XxGamMaPersonDataLovVOImpl getXxGamMaPersonDataLovVO1() {
        return (XxGamMaPersonDataLovVOImpl)findViewObject("XxGamMaPersonDataLovVO1");
    }

    /**
     * Obtiene la clave de la persona.
     *
     * @param strUserName Nombre de usuario.
     * @param strVendorType Tipo de persona.
     *
     * @return clave de la persona.
     */
    public Number getPersonId(String strUserName, String strVendorType) {

        //Verifica nulidad
        if (strUserName == null || strVendorType == null)
            return null;

        //Obtiene la clave de la persona
        XxGamMaUserDataLovVOImpl voXxGamMaUserDataLov = null;
        Number nPersonId = null;

        try {

            //Obtiene la clave de la persona
            voXxGamMaUserDataLov = getXxGamMaUserDataLovVO1();
            nPersonId =
                    voXxGamMaUserDataLov.getPersonId(strUserName, strVendorType);
        } catch (Exception exception) {
            throw new OAException(XxGamAOLMessages.GenericType.SHORT_NAME_XBOL,
                                              XxGamAOLMessages.GenericType.XXGAM_MAF_IDPER_NF_ERROR,
                                              null, OAException.ERROR, null);
        }

        return nPersonId;
    }


    /**Container's getter for XxGamMaCurrencyConversionLovVO1
     */
    public XxGamMaCurrencyConversionLovVOImpl getXxGamMaCurrencyConversionLovVO1() {
        return (XxGamMaCurrencyConversionLovVOImpl)findViewObject("XxGamMaCurrencyConversionLovVO1");
    }

    /**Container's getter for XxGamMaStatusRequestLovVO1
     */
    public XxGamMaLookupGenericLovVOImpl getXxGamMaStatusRequestLovVO1() {
        return (XxGamMaLookupGenericLovVOImpl)findViewObject("XxGamMaStatusRequestLovVO1");
    }

    /**
     * Inicializa la lista de valores para el proposito de la solicitud de anticipo
     */
    public void initPurposeLov() {

        //Configura la lista de valores para los propositos de la solicitud de anticipo
        XxGamMaLookupGenericLovVOImpl lookupPurposeImpl =
            getXxGamMaPurposeLovVO1();
        lookupPurposeImpl.searchLookup(XxGamConstantsUtil.LOOKUP_TYPE_PURPOSE_PAYMENT_ADVANCE,
                                       XxGamConstantsUtil.ID_APPLICATION_INTERNET_EXPENSES);
    }

    /**
     * Inicializa la lista de valores para el centro de costos por defecto para el usuario
     * @param employeePersonId contiene el id persona del empleado
     * @param vcLookupType contiene el lookup type de tarjeta virtual
     */
    public boolean initCostCenter(Number employeePersonId, String vcLookupType){
        
        boolean isSuccess = false;
        if(employeePersonId != null && vcLookupType != null){
            //Configura la lista de valores para el centro de costos
            XxGamMaCostCenterByPersonIdLovVOImpl costCenterImpl = getXxGamMaCostCenterByPersonIdLovVO1();
            if(costCenterImpl != null){
                costCenterImpl.searchCostCenterByPersonId(employeePersonId, vcLookupType);// change by dihu only for test.
                /*
                if(costCenterImpl.getRowCount() > 0 ){
                    isSuccess = true;
                }
                */
                RowSetIterator rowSetIter = costCenterImpl.getRowSetIterator();
                if(rowSetIter != null){
                   rowSetIter.reset();
                   while(rowSetIter.hasNext()){
                       Row row = rowSetIter.next();
                       XxGamMaCostCenterByPersonIdLovVORowImpl currentRow = null;
                       currentRow = (XxGamMaCostCenterByPersonIdLovVORowImpl)row;
                       
                       if(currentRow != null)
                       {
                           isSuccess = true;
                           break;
                       }
                   }
                   rowSetIter.reset();
                   rowSetIter.closeRowSetIterator();
                }
                
            }
        }
        return isSuccess;
    }
    
    /**
     * Inicializa la lista de valores para el centro de costos alterno
     */
    public boolean initCostCenterFlex(){
        
        boolean isSuccess = false;
        
        //Configura la lista de valores para el centro de costos
        XxGamMaCostCenterFlexLovVOImpl costCenterImpl = getXxGamMaCostCenterFlexLovVO1();
        if(costCenterImpl != null){
            costCenterImpl.executeQuery();
            
            if(costCenterImpl.hasNext()){
                isSuccess = true;
            }
            /**
             * @Author EAB 
             * Se comento el código, debido a que la parte de arriba en el hasNext() ya valida que traiga o no registros
             */
            /*
            RowSetIterator rowSetIter = costCenterImpl.getRowSetIterator();
            if(rowSetIter != null){
               rowSetIter.reset();
               while(rowSetIter.hasNext()){
                   Row row = rowSetIter.next();
                   XxGamMaCostCenterFlexLovVORowImpl currentRow = null;
                   currentRow = (XxGamMaCostCenterFlexLovVORowImpl )row;
                   
                   if(currentRow != null)
                   {
                       isSuccess = true;
                       break;
                   }
               }
               rowSetIter.reset();
               rowSetIter.closeRowSetIterator();
            }
            
            */
        }
       
        return isSuccess;
    }
    
    /**
     * Inicializa la lista de valores para el centro de costos alterno
     * @param vcLookupType contiene el lookup type de tarjeta virtual
     */
    public boolean initCostCenterFlex(String vcLookupType){
        
        boolean isSuccess = false;
        if(vcLookupType != null){
            //Configura la lista de valores para el centro de costos
            XxGamMaCostCenterFlexLovVOImpl costCenterImpl = getXxGamMaCostCenterFlexLovVO1();
            
            if(costCenterImpl != null){
                costCenterImpl.searchCostCenterFlex(null,  vcLookupType);// "No Existe" );//
                if (costCenterImpl.hasNext())  {
                    isSuccess = true;
                }
                /**
                 * @Author EAB 
                 * Se comento el código, debido a que la parte de arriba en el hasNext() ya valida que traiga o no registros
                 */
               /* 
                 //costCenterImpl.getRowSetIterators();
                 //costCenterImpl.getrow
                 
                //
                 RowSetIterator rowSetIter = costCenterImpl.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaCostCenterFlexLovVORowImpl currentRow = null;
                        currentRow = (XxGamMaCostCenterFlexLovVORowImpl)row;
                        
                        if(currentRow != null)
                        {
                            String cc = currentRow.getCostCenterFlex();
                            isSuccess = true;
                            break;
                        }
                    }
                    rowSetIter.reset();
                    rowSetIter.closeRowSetIterator();
                }
                //
               //int RCCC  = costCenterImpl.getRowCount();
                //if( RCCC  ){
                //    isSuccess = true;
                //}
                */
            }
        }
        return isSuccess;
    }

    /**
     * Inicializa la lista de valores para la plantilla de anticipos con centro de costo por defecto del usuario
     * @param costCenterId contiene el id de combinacion contable
     */
    public boolean initTemplatePaymentLov(Number costCenterId){
      System.out.println("Comienza initTemplatePaymentLov Capa LovAM "); 
        boolean isSuccess = false;
        if(costCenterId != null){
            
            XxGamMaTemplatePaymentLovVOImpl templateImpl = getXxGamMaTemplatePaymentLovVO1();
            if(templateImpl != null){
                templateImpl.searchTemplatePaymentById(null, costCenterId);
                if(templateImpl.hasNext()){
                    isSuccess = true;
                }
                /**
                 * @Author EAB 
                 * Se comento el código, debido a que la parte de arriba en el hasNext() ya valida que traiga o no registros
                 * seria inecesario validar uno por uno.
                 */
                /*
                 RowSetIterator rowSetIter = templateImpl.getRowSetIterator();
                 if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaTemplatePaymentLovVORowImpl currentRow = null;
                        currentRow = (XxGamMaTemplatePaymentLovVORowImpl )row;
                        
                        if(currentRow != null)
                        {
                            isSuccess = true;
                            break;
                        }
                    }
                    rowSetIter.reset();
                    rowSetIter.closeRowSetIterator();
                 }
                */
                
            }
        }
                 System.out.println("Finaliza initTemplatePaymentLov Capa LovAM "); 
        return isSuccess = true;
    }

    /**
     * Inicializa la lista de valores para la plantilla de anticipos con centro de costo alterno
     * @param costCenterFlex contiene el valor del centro de costo alterno
     */
    public boolean initTemplatePaymentFlexLov(String costCenterFlex){
        boolean isSuccess = false;
        if(costCenterFlex != null){
            XxGamMaTemplatePaymentFlexLovVOImpl templateFlexImpl = getXxGamMaTemplatePaymentFlexLovVO1();
            if(templateFlexImpl != null){
                templateFlexImpl.searchTemplatePaymentByFlex(null, costCenterFlex);
                
                if(templateFlexImpl.getRowCount() > 0 ){
                    isSuccess = true;
                }
            }
        }
        return isSuccess;
    }

    /**
     * Inicializa la lista de valores para aprobadores de jerarquia RH
     * @param jobNameId contiene el id del puesto de trabajo del empleado
     * @param versionId contiene el id de la version de jerarquia
     * @return devuelve true si la inicializaciÃ³n es correcta y false en caso contrario
     */
    public boolean initApproverHierarchyLov(Number jobNameId, Number versionId){
        boolean isSuccess = false;
        if(jobNameId != null && versionId != null){
            //Configura la lista de valores para el centro de costos
            XxGamMaApproverHierarchyLovVOImpl approverImpl = getXxGamMaApproverHierarchyLovVO1();
            if(approverImpl != null){
                approverImpl.clearCustomCriteriaDictionaries();
                approverImpl.reset();

                approverImpl.setSearchApproverHierarchy(jobNameId, versionId);
                
                if(approverImpl.hasNext()){
                    isSuccess = true;        
                }
                
                /*
                RowSetIterator rowSetIter = approverImpl.getRowSetIterator();
                if(rowSetIter != null){
                   rowSetIter.reset();
                   while(rowSetIter.hasNext()){
                       Row row = rowSetIter.next();
                       XxGamMaApproverHierarchyLovVORowImpl currentRow = null;
                       currentRow = (XxGamMaApproverHierarchyLovVORowImpl )row;
                       
                       if(currentRow != null)
                       {
                           isSuccess = true;
                           break;
                       }
                   }
                   rowSetIter.reset();
                   rowSetIter.closeRowSetIterator();
                }
                */
            }
        }
        return isSuccess;
    }
    
    /**
     * Inicializa la lista de valores para aprobadores alternos de jerarquia RH
     * @param jobNameId contiene el id del puesto de trabajo del empleado
     * @param versionId contiene el id de la version de jerarquia
     * @return devuelve true si la inicializaciÃ³n es correcta y false en caso contrario
     */
    public boolean initApproverAltLov(Number jobNameId, Number versionId){
        boolean isSuccess = false;
        if(jobNameId != null && versionId != null){
            //Configura la lista de valores para el centro de costos
            XxGamMaApproverHierarchyLovVOImpl approverAltImpl = getXxGamMaApproverHierarchyLovVO2();
            if(approverAltImpl != null){
                approverAltImpl.clearCustomCriteriaDictionaries();
                approverAltImpl.reset();

                approverAltImpl.setSearchApproverHierarchy(jobNameId, versionId);
                
                
                if(approverAltImpl.hasNext()){
                    isSuccess = true;        
                }
                
                /*
                RowSetIterator rowSetIter = approverAltImpl.getRowSetIterator();
                if(rowSetIter != null){
                   rowSetIter.reset();
                   while(rowSetIter.hasNext()){
                       Row row = rowSetIter.next();
                       XxGamMaApproverHierarchyLovVORowImpl currentRow = null;
                       currentRow = (XxGamMaApproverHierarchyLovVORowImpl )row;
                       
                       if(currentRow != null)
                       {
                           isSuccess = true;
                           break;
                       }
                   }
                   rowSetIter.reset();
                   rowSetIter.closeRowSetIterator();
                }
                */
            }
        }
        return isSuccess;
    }

    /**Container's getter for XxGamMaTicketOfficeLovVO1
     */
    public XxGamMaTicketOfficeLovVOImpl getXxGamMaTicketOfficeLovVO1() {
        return (XxGamMaTicketOfficeLovVOImpl)findViewObject("XxGamMaTicketOfficeLovVO1");
    }


    /**Container's getter for XxGamMaFlightRouteLovVO1
     */
    public XxGamMaFlightRouteLovVOImpl getXxGamMaFlightRouteLovVO1() {
        return (XxGamMaFlightRouteLovVOImpl)findViewObject("XxGamMaFlightRouteLovVO1");
    }



    /**
     * Inicializa el tipod de lookup.
     *
     * @param lookupType Tipo de lookup.
     * @param applicationId Clave de la aplicaciÃ³n
     */
    public void setLookup(String lookupType, Number applicationId) {

        //Verifica nulidad
        if (lookupType == null || applicationId == null)
            return;

        try {

            //Inicializa los valores.
            XxGamMaLookupGenericLovVOImpl voXxGamMaLookupGenericLov = null;
            voXxGamMaLookupGenericLov =getXxGamMaLookupGenericLovVO1();
            voXxGamMaLookupGenericLov.setLookupType(lookupType, applicationId);
        } catch (Exception exception) {

            //Propaga la excepcion
            throw new OAException("No es posible obtener los valores solicitados",
                                  OAException.WARNING);
        }
    }

    /**Container's getter for XxGamMaLookupGenericLovVO1
     */
    public XxGamMaLookupGenericLovVOImpl getXxGamMaLookupGenericLovVO1() {
        return (XxGamMaLookupGenericLovVOImpl)findViewObject("XxGamMaLookupGenericLovVO1");
    }

    /**Container's getter for XxGamMaTypeEmissionLovVO1
     */
    public XxGamMaTypeEmissionLovVOImpl getXxGamMaTypeEmissionLovVO1() {
        return (XxGamMaTypeEmissionLovVOImpl)findViewObject("XxGamMaTypeEmissionLovVO1");
    }


    /**Container's getter for XxGamMaRelationShipLovVo1
     */
    public XxGamMaRelationShipLovVoImpl getXxGamMaRelationShipLovVo1() {
        return (XxGamMaRelationShipLovVoImpl)findViewObject("XxGamMaRelationShipLovVo1");
    }


    /**Container's getter for XxGamMaVirtualCardLovVO1
     */
    public XxGamMaLookupGenericLovVOImpl getXxGamMaVirtualCardLovVO1() {
        return (XxGamMaLookupGenericLovVOImpl)findViewObject("XxGamMaVirtualCardLovVO1");
    }

    /**
     * Obtiene el lookup de tarjeta virtual
     * @param lookupType contiene el tipo de lookup
     * @param applicationId contiene el id de aplicacion
     * @return Devuelve los datos de la Tarjeta Virtual
     */
    public XxGamMaLookupGenericLovVORowImpl getVirtualCardLookup(String lookupType, Number applicationId){
        
        XxGamMaLookupGenericLovVORowImpl vcLookup = null;
        if(lookupType != null && applicationId != null){
            
            XxGamMaLookupGenericLovVOImpl lookups = getXxGamMaVirtualCardLovVO1();
            lookups.searchLookup(lookupType, applicationId);
            
            Row row = lookups.first();
            if(row != null){
                vcLookup = (XxGamMaLookupGenericLovVORowImpl)row;
            }
        }
        return vcLookup;
    }

    /**
     * Obtiene el registro del supervisor por id
     * @param supervisorId contiene el id del supervisor
     * @return devuelve registro del supervisor
     */
    public XxGamMaSupervisorLovVORowImpl getSupervisorById(Number supervisorId){
        
        XxGamMaSupervisorLovVORowImpl supervisorRow = null;
        if(supervisorId != null){
            
            XxGamMaSupervisorLovVOImpl supervisorImpl = getXxGamMaSupervisorLovVO1();
            if(supervisorImpl != null){
                supervisorImpl.searchSupervisorById(supervisorId);
                
                Row row = supervisorImpl.first();
                if(row != null){
                    supervisorRow = (XxGamMaSupervisorLovVORowImpl)row;
                }
            }
        }
        return supervisorRow;
    }

    /**
     * Obtiene el registro del aprobador correspondiente a su id en la jerarquia
     * RH.
     * @param approverId contiene el id del aprobador
     * @param jobNameId contiene el id de puesto de trabajo del empleado
     * @param versionId contiene el id de la version de la jerarquia
     * @return devuelve registro del aprobador encontrado
     */
    public XxGamMaApproverHierarchyLovVORowImpl getApproverHierarchyById(Number approverId, Number jobNameId, Number versionId){
        
        XxGamMaApproverHierarchyLovVORowImpl approverRow = null;
        if(approverId != null){
            
            XxGamMaApproverHierarchyLovVOImpl approverImpl = getXxGamMaApproverHierarchyLovVO1();
            if(approverImpl != null){
                
                if(jobNameId != null && versionId != null){
                    approverImpl.setSearchApproverHierarchy(jobNameId, versionId);
                }
                
                RowSetIterator rowSetIter = approverImpl.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaApproverHierarchyLovVORowImpl currentRow = null;
                        currentRow = (XxGamMaApproverHierarchyLovVORowImpl)row;
                        
                        if(currentRow != null){
                            if(approverId.equals(currentRow.getApproverId())){
                                approverRow = currentRow;
                                break;
                            }
                        }
                    }
                    rowSetIter.reset();
                }
                
            }
        }
        return approverRow;
    }
    
    /**
     * Obtiene el registro del aprobador alternativo correspondiente a su id en la jerarquia
     * RH.
     * @param approverId contiene el id del aprobador
     * @param jobNameId contiene el id de puesto de trabajo del empleado
     * @param versionId contiene el id de la version de la jerarquia
     * @return devuelve registro del aprobador encontrado
     */
    public XxGamMaApproverHierarchyLovVORowImpl getApproverAltById(Number approverId, Number jobNameId, Number versionId){
        
        XxGamMaApproverHierarchyLovVORowImpl approverAltRow = null;
        if(approverId != null){
            
            XxGamMaApproverHierarchyLovVOImpl approverAltImpl = getXxGamMaApproverHierarchyLovVO2();
            if(approverAltImpl != null){
                
                if(jobNameId != null && versionId != null){
                    approverAltImpl.setSearchApproverHierarchy(jobNameId, versionId);
                }
                
                RowSetIterator rowSetIter = approverAltImpl.getRowSetIterator();
                if(rowSetIter != null){
                    rowSetIter.reset();
                    while(rowSetIter.hasNext()){
                        Row row = rowSetIter.next();
                        XxGamMaApproverHierarchyLovVORowImpl currentRow = null;
                        currentRow = (XxGamMaApproverHierarchyLovVORowImpl)row;
                        
                        if(currentRow != null){
                            if(approverId.equals(currentRow.getApproverId())){
                                approverAltRow = currentRow;
                                break;
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }
        return approverAltRow;
    }

    /**Container's getter for XxGamMaBenefitsLovVO1
     */
    public XxGamMaBenefitsLovVOImpl getXxGamMaBenefitsLovVO1() {
        return (XxGamMaBenefitsLovVOImpl)findViewObject("XxGamMaBenefitsLovVO1");
    }

    /**Container's getter for XxGamMaTypeRequestLovVO1
     */
    public XxGamMaTypeRequestLovVOImpl getXxGamMaTypeRequestLovVO1() {
        return (XxGamMaTypeRequestLovVOImpl)findViewObject("XxGamMaTypeRequestLovVO1");
    }

    /**Container's getter for XxGamMaApproverHierarchyLovVO1
     */
    public XxGamMaApproverHierarchyLovVOImpl getXxGamMaApproverHierarchyLovVO1() {
        return (XxGamMaApproverHierarchyLovVOImpl)findViewObject("XxGamMaApproverHierarchyLovVO1");
    }

    /**Container's getter for XxGamMaSupervisorLovVO1
     */
    public XxGamMaSupervisorLovVOImpl getXxGamMaSupervisorLovVO1() {
        return (XxGamMaSupervisorLovVOImpl)findViewObject("XxGamMaSupervisorLovVO1");
    }

    /**Container's getter for XxGamMaResponsibilityAppLovVO1
     */
    public XxGamMaResponsibilityAppLovVOImpl getXxGamMaResponsibilityAppLovVO1() {
        return (XxGamMaResponsibilityAppLovVOImpl)findViewObject("XxGamMaResponsibilityAppLovVO1");
    }

    /**
     * Obtiene los datos de la responsabilidad de la aplicacion por id de responsabilidad
     * @param responsibilityId contiene el id de la responsabilidad
     * @return devuelve el registro con datos de la responsabilidad
     */
    public XxGamMaResponsibilityAppLovVORowImpl getResponsibilityAppById(Number responsibilityId){
        
        XxGamMaResponsibilityAppLovVORowImpl respRow = null;
        if(responsibilityId != null){
            
            XxGamMaResponsibilityAppLovVOImpl respImpl = getXxGamMaResponsibilityAppLovVO1();
            
            System.out.println("==================================="+respImpl.getValue("AM_ANTICIPOS_INTERNACIONAL"));
            if(respImpl != null){
                respImpl.setSearchResponsibilityApp(responsibilityId);
                
                Row row = respImpl.first();
                if(row != null){
                    respRow = (XxGamMaResponsibilityAppLovVORowImpl)row;
                    
                }
            }
        }
        return respRow;
    }

    /**Container's getter for XxGamMaCostCenterFlexLovVO1
     */
    public XxGamMaCostCenterFlexLovVOImpl getXxGamMaCostCenterFlexLovVO1() {
        return (XxGamMaCostCenterFlexLovVOImpl)findViewObject("XxGamMaCostCenterFlexLovVO1");
    }

    /**Container's getter for XxGamMaTemplatePaymentFlexLovVO1
     */
    public XxGamMaTemplatePaymentFlexLovVOImpl getXxGamMaTemplatePaymentFlexLovVO1() {
        return (XxGamMaTemplatePaymentFlexLovVOImpl)findViewObject("XxGamMaTemplatePaymentFlexLovVO1");
    }

    /**
     * Obtiene el registro de la ruta especificada por su valor de lookup code
     * @param lookupCode contiene el valor de lookup code
     * @return devuelve el registro de la ruta
     */
    public XxGamMaFlightRouteLovVORowImpl getFlightRouteLovRow(String lookupCode){
    System.out.println("Comienza Capa Lov App Mod getFlightRouteLovRow");
      System.out.println("Parametros Capa Lov App Mod lookupCode-->"+lookupCode);
        XxGamMaFlightRouteLovVORowImpl currentRow = null;
        
        if(lookupCode != null){
            
            XxGamMaFlightRouteLovVOImpl routeLovImpl = getXxGamMaInfoRouteLovVO1();
            if(routeLovImpl != null){
                routeLovImpl.setWhereClause(null);
                routeLovImpl.setWhereClause("lookup_code = :1"); 
                routeLovImpl.setWhereClauseParams(null);
                routeLovImpl.setWhereClauseParam(0, lookupCode);
                routeLovImpl.executeQuery();
                
                RowSetIterator iterLov = routeLovImpl.createRowSetIterator(null);
                iterLov.setRangeStart(0);
                
                Row[] filteredRows = iterLov.getFilteredRows("LookupCode",lookupCode);
                if ( filteredRows != null ){
                    if ( filteredRows.length > 0 ){
                        currentRow = (XxGamMaFlightRouteLovVORowImpl)filteredRows[0];
                    }
                }
                
                iterLov.closeRowSetIterator();
            }
        }
      System.out.println("Finaliza Capa Lov App Mod getFlightRouteLovRow");
        return currentRow;
    }

    /**Container's getter for XxGamMaInfoRouteLovVO1
     */
    public XxGamMaFlightRouteLovVOImpl getXxGamMaInfoRouteLovVO1() {
        return (XxGamMaFlightRouteLovVOImpl)findViewObject("XxGamMaInfoRouteLovVO1");
    }

    /**Container's getter for XxGamMaAllApproverHierarchyLovVO1
     */
    public XxGamMaAllApproverHierarchyLovVOImpl getXxGamMaAllApproverHierarchyLovVO1() {
        return (XxGamMaAllApproverHierarchyLovVOImpl)findViewObject("XxGamMaAllApproverHierarchyLovVO1");
    }

    /**Container's getter for XxGamMaStatusNotificationTicketOfficeLovVO1
     */
    public XxGamMaStatusNotificationTicketOfficeLovVOImpl getXxGamMaStatusNotificationTicketOfficeLovVO1() {
        return (XxGamMaStatusNotificationTicketOfficeLovVOImpl)findViewObject("XxGamMaStatusNotificationTicketOfficeLovVO1");
    }

    /**Container's getter for XxGamMaApproverHierarchyLovVO2
     */
    public XxGamMaApproverHierarchyLovVOImpl getXxGamMaApproverHierarchyLovVO2() {
        return (XxGamMaApproverHierarchyLovVOImpl)findViewObject("XxGamMaApproverHierarchyLovVO2");
    }

    /**Container's getter for XxGamMaChiefByPositionIdLovVO1
     */
    public XxGamMaChiefByPositionIdLovVOImpl getXxGamMaChiefByPositionIdLovVO1() {
        return (XxGamMaChiefByPositionIdLovVOImpl)findViewObject("XxGamMaChiefByPositionIdLovVO1");
    }

  /**Container's getter for XxGamMaLimitScheduleOptionVO1
   */
  public XxGamMaLimitScheduleOptionVOImpl getXxGamMaLimitScheduleOptionVO1()
  {
    return (XxGamMaLimitScheduleOptionVOImpl)findViewObject("XxGamMaLimitScheduleOptionVO1");
  }

  public XxGamMaLimitScheduleOptionVORowImpl getLimitScheduleOption(OAPageContext pageContext, 
                                                                    OAWebBean webBean, 
                                                                    Number templateId, 
                                                                    Number typePayment, 
                                                                    String typePaymentDesc,
                                                                    String currencyCode)
  {
    XxGamMaLimitScheduleOptionVORowImpl retval = null; 
    XxGamMaLimitScheduleOptionVOImpl limitScheduleOptionVO = null;
    
    limitScheduleOptionVO = getXxGamMaLimitScheduleOptionVO1();
    if(null!=limitScheduleOptionVO){
      limitScheduleOptionVO.searchLimitSchedule(templateId
                                              ,typePayment
                                              ,null /**typePaymentDesc**/
                                              ,currencyCode);
      RowSetIterator rowSetIter = limitScheduleOptionVO.getRowSetIterator();
         if (rowSetIter != null) {
             rowSetIter.reset();
             while (rowSetIter.hasNext()) {
               Row currentRow = rowSetIter.next();
               XxGamMaLimitScheduleOptionVORowImpl limitScheduleOptionRow = null;
               limitScheduleOptionRow = (XxGamMaLimitScheduleOptionVORowImpl)currentRow;
               if ((limitScheduleOptionRow != null) && 
                 (limitScheduleOptionRow.getExpenseReportId() != null) && 
                 (limitScheduleOptionRow.getCurrencyCode().equals(currencyCode))) {
                 retval = limitScheduleOptionRow;
                 break;
               }

             }

             rowSetIter.reset();
           }
           
    }
    
    return retval; 
  }

  /**Container's getter for XxGamMaOperatingUnitLovVO1
   */
  public OAViewObjectImpl getXxGamMaOperatingUnitLovVO1()
  {
    return (OAViewObjectImpl)findViewObject("XxGamMaOperatingUnitLovVO1");
  }

  /**Container's getter for XxGamMaTicketClassLovVO1
   */
  public OAViewObjectImpl getXxGamMaTicketClassLovVO1()
  {
    return (OAViewObjectImpl)findViewObject("XxGamMaTicketClassLovVO1");
  }

  /**Container's getter for XxGamMaTicketRateLovVO1
   */
  public OAViewObjectImpl getXxGamMaTicketRateLovVO1()
  {
    return (OAViewObjectImpl)findViewObject("XxGamMaTicketRateLovVO1");
  }

  /**Container's getter for XxGamMaCategoriaGastoLovVO1
   */
  public XxGamMaCategoriaGastoLovVOImpl getXxGamMaCategoriaGastoLovVO1()
  {
    return (XxGamMaCategoriaGastoLovVOImpl)findViewObject("XxGamMaCategoriaGastoLovVO1");
  }

  /**
   * Metodo para inicializar la lista de valores TicketClassLov
   * @param pageContext
   * @param webBean
   */
  public void initTicketClassLov(OAPageContext pageContext, OAWebBean webBean)
  {
    String strFranchiseType = null; 
    String strRequestType = null; 
    String nvlFranchiseType = null; 
    String nvlRequestType = null; 
                
           
    if(null!=pageContext.getParameter("pfranchiseType")&&!"".equals(pageContext.getParameter("pfranchiseType"))){
    strFranchiseType = pageContext.getParameter("pfranchiseType"); 
    }
                 
    if(null!=pageContext.getParameter("pRequest")&&!"".equals(pageContext.getParameter("pRequest"))){
    strRequestType = pageContext.getParameter("pRequest"); 
    } 
               
    nvlFranchiseType = (null==strFranchiseType)?(String)pageContext.getSessionValue("sfranchiseType"):strFranchiseType; 
    nvlRequestType = (null==strRequestType)?(String)pageContext.getSessionValue("sRequest"):strRequestType;
    
    XxGamMaTicketClassLovVOImpl TicketClassLovVOImpl = null; 
    TicketClassLovVOImpl = (XxGamMaTicketClassLovVOImpl)getXxGamMaTicketClassLovVO1();
    if(null!=TicketClassLovVOImpl){
      TicketClassLovVOImpl.initTicketClass(nvlFranchiseType);
    }
    
  }

  /**
   * Metodo para inicializar la lista de valores TicketRateLov
   * @param pageContext
   * @param webBean
   */
  public void initTicketRateLov(OAPageContext pageContext, OAWebBean webBean)
  {
    String strFranchiseType = null; 
    String strRequestType = null; 
    String nvlFranchiseType = null; 
    String nvlRequestType = null; 
                
    if(null!=pageContext.getParameter("pfranchiseType")&&!"".equals(pageContext.getParameter("pfranchiseType"))){
    strFranchiseType = pageContext.getParameter("pfranchiseType"); 
    }
                 
    if(null!=pageContext.getParameter("pRequest")&&!"".equals(pageContext.getParameter("pRequest"))){
    strRequestType = pageContext.getParameter("pRequest"); 
    } 
               
    nvlFranchiseType = (null==strFranchiseType)?(String)pageContext.getSessionValue("sfranchiseType"):strFranchiseType; 
    nvlRequestType = (null==strRequestType)?(String)pageContext.getSessionValue("sRequest"):strRequestType;
    
    XxGamMaTicketRateLovVOImpl TicketRateLovVOImpl = null; 
    TicketRateLovVOImpl =(XxGamMaTicketRateLovVOImpl)getXxGamMaTicketRateLovVO1();
    
    if(null!=TicketRateLovVOImpl){
      TicketRateLovVOImpl.initTicketRate( nvlFranchiseType);
    }
    
  }

  /**Container's getter for XxGamMaPaymentTimesLovVO1
   */
  public XxGamMaPaymentTimesLovVOImpl getXxGamMaPaymentTimesLovVO1()
  {
    return (XxGamMaPaymentTimesLovVOImpl)findViewObject("XxGamMaPaymentTimesLovVO1");
  }

    /**Container's getter for XxgamMaVCMeanig1
     */
    public XxgamMaVCMeanigImpl getXxgamMaVCMeanig1() {
        return (XxgamMaVCMeanigImpl)findViewObject("XxgamMaVCMeanig1");
    }

    /**Container's getter for XxGamMaClassTicketLovVO1
     */
    public XxGamMaClassTicketLovVOImpl getXxGamMaClassTicketLovVO1() {
        return (XxGamMaClassTicketLovVOImpl)findViewObject("XxGamMaClassTicketLovVO1");
    }

    /**Container's getter for XxGamMaCostCenterFlexLovVO2_1
     */
    public XxGamMaCostCenterFlexLovVO2Impl getXxGamMaCostCenterFlexLovVO2_1() {
        return (XxGamMaCostCenterFlexLovVO2Impl)findViewObject("XxGamMaCostCenterFlexLovVO2_1");
    }
}
