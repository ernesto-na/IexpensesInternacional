package xxgam.oracle.apps.xbol.maf.server;

import oracle.apps.fnd.framework.webui.OAPageContext;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;

import xxgam.oracle.apps.xbol.maf.utils.XxGamAOLMessages;
import xxgam.oracle.apps.xbol.maf.utils.XxGamMAnticiposUtil;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxGamMaPaymentReqVOImpl extends OAViewObjectImpl {
    /**This is the default constructor (do not remove)
     */
    public XxGamMaPaymentReqVOImpl() {
    }

    /**
     * Crea un registro hijo del requerimiento principal.
     *
     * @param rowBase Row a copiar.
     * @return registro creado
     */
    public XxGamMaPaymentReqVORowImpl getPaymentReq(XxGamMaPaymentReqVORowImpl rowBase,
                                                    RowIterator detalleReqNuevo) {

        //Verifica nulidad
        if (rowBase == null)
            return null;

        XxGamMaPaymentReqVORowImpl rowActual = null;

        try {

            rowActual =
                    (XxGamMaPaymentReqVORowImpl)detalleReqNuevo.createRow();
            
            Date currentReqDate = null;
            currentReqDate = XxGamMAnticiposUtil.getFechaActual();

            //Inicializa los valores del registro
            rowActual.setInitialDate(currentReqDate);
            rowActual.setFinalDate(currentReqDate);
            rowActual.setTypePayment(rowBase.getTypePayment());
            rowActual.setAmount(rowBase.getAmount());
            rowActual.setAmountMx(rowBase.getAmountMx());
            rowActual.setJustification(rowBase.getJustification());
            rowActual.setCodeCombinationId(rowBase.getCodeCombinationId());
            rowActual.setCurrencyCode(rowBase.getCurrencyCode());
            rowActual.setNewRowState(Row.STATUS_NEW);
            detalleReqNuevo.insertRow(rowActual);

        } catch (Exception exception) {
            if(getDBTransaction() != null){
                getDBTransaction().rollback();    
            }
            //Propaga la excepcion
            throw new OAException("No es posible crear el registro",
                                  OAException.ERROR);
        }

        return rowActual;
    }

    /**
     * Obtiene el registro por id.
     *
     * @param nPaymentId Clave primaria
     */
    public void searchPayment(Number nPaymentId) {
        //Verifica nulidad
        if (nPaymentId == null)
            return;
        try {
            //Declara los recursos
            ViewCriteria vcPayment = null;
            ViewCriteriaRow rowVCPayment = null;

            //Crea el criterio de busqueda
            vcPayment = createViewCriteria();
            rowVCPayment = vcPayment.createViewCriteriaRow();
            rowVCPayment.setAttribute("Id", nPaymentId);

            //Aplica el criterio
            vcPayment.addElement(rowVCPayment);
            applyViewCriteria(vcPayment);
            executeQuery();
            //Inicializa el current row
            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
            }
            clearViewCriterias();
        } catch (Exception exception) {
            clearViewCriterias();
        }
    }


    /**
     * Obtiene el Current Row del Payment que contendra el nuevo ticket
     */
    public void XxGamMaCreateTicket(Number nPayment, OAPageContext pageContext) {
        //Buscamos el Payment con el id para poder asociarlo con el nuevo ticket
        //        searchPayment(nPayment);
        //Obteniendo el registro actual de XxGamMaTicketPVORowImpl
        XxGamMaPaymentReqVORowImpl rowXxGamMaPaymentReqVO = null;
        rowXxGamMaPaymentReqVO = (XxGamMaPaymentReqVORowImpl)getCurrentRow();

        RowIterator riXxGamMaPaymentPVO = null;
        //Verificando que el row no venga vacio
        if (rowXxGamMaPaymentReqVO == null) {
            throw new OAException("No es posible crear el ticket",
                                  OAException.ERROR);

        }
        //Obteniendo el row iterador de ticket para los vuelos
        riXxGamMaPaymentPVO = rowXxGamMaPaymentReqVO.getXxGamMaTicketPVO();
        if (riXxGamMaPaymentPVO == null) {
            throw new OAException("No es posible crear el ticket",
                                  OAException.ERROR);

        }
        XxGamMaTicketPVOImpl voXxGamMaTicketPVOImpl = null;
        //Creamos variable de AM para obtener su referencia
        XxGamModAntAMImpl amXxGamModAnt = null;
        try {              
            /** AGAA Obtiene la Filial **/
             String filial = (String)pageContext.getTransactionValue("orgNameEmp");
         
            //Obtenemos el AM
            amXxGamModAnt = getXxGamModAntAM();
            //Obtenemos la referencia a la implementacion de la VO deTicket
            voXxGamMaTicketPVOImpl = amXxGamModAnt.getXxGamMaTicketPVO3();
            //Llamamos el metodo  para agregar un nuevo vuelo
            voXxGamMaTicketPVOImpl.addNewTicket(filial);
        } catch (Exception e) {
            e.printStackTrace();
            throw new OAException("No es posible crear el ticket",
                                  OAException.ERROR);
        }
    }

    /**
     * Obtenemos el AM
     * @return Application Module en uso
     */
    private XxGamModAntAMImpl getXxGamModAntAM() {
        XxGamModAntAMImpl amXxGamModAnt = null;
        amXxGamModAnt = (XxGamModAntAMImpl)getApplicationModule();
        return amXxGamModAnt;
    }

    /**
     * Asigna el valor del atributo CodeCombinationId procedente de informacion
     * general de la solicitud de anticipo
     * @param generalRow contiene el row de informacion general
     */
    public void setCodeCombinationsIdFromGeneral(XxGamMaGeneralReqVORowImpl generalRow) {
        if (generalRow != null) {
            Number codeCombinationId = null;
            codeCombinationId = generalRow.getCostCenter();
            if (codeCombinationId != null) {

                RowSetIterator rowSetIter = getRowSetIterator();
                if (rowSetIter != null) {
                    rowSetIter.reset();
                    while (rowSetIter.hasNext()) {
                        Row row = rowSetIter.next();
                        XxGamMaPaymentReqVORowImpl detailRow =
                            (XxGamMaPaymentReqVORowImpl)row;
                        if (detailRow != null) {
                            if (detailRow.getGeneralReqId().equals(generalRow.getId())) {
                                detailRow.setCodeCombinationId(codeCombinationId);
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }
    }

    /**
     * Elimina el row por medio del ID
     * @param rowId contiene el id
     */
    public void deleteRowPaymentReq(Number rowId) {
        Row[] deleteRows = null;
        deleteRows = getFilteredRows("Id", rowId);
        if (deleteRows.length > 0) {
            deleteRows[0].remove();
        }
    }

    /**
     * Obntiene El CombinationCode
     * @return Oficina de boletos
     */
    public Number findCombinationCode() {
        Number combinationCode = null;
        XxGamMaPaymentReqVORowImpl voXxGamMaPaymentReq =
            (XxGamMaPaymentReqVORowImpl)getCurrentRow();
        combinationCode = voXxGamMaPaymentReq.getCodeCombinationId();
        return combinationCode;
    }

    /**
     * Duplicate the payment request
     *
     * @param rowBase Record Copied.
     * @return Row created
     */
    public XxGamMaPaymentReqVORowImpl duplicatePaymentReq(XxGamMaPaymentReqVORowImpl rowBase) {

        //Entered duplicatePaymentReq
        OADBTransaction txn = (OADBTransaction)getDBTransaction();
        txn.writeDiagnostics(this, "Entered duplicatePaymentReq",
                             OAFwkConstants.PROCEDURE);

        //Verifica nulidad
        if (rowBase == null)
            return null;

        XxGamMaPaymentReqVORowImpl rowActual = null;

        try {

            rowActual = (XxGamMaPaymentReqVORowImpl)createRow();

            //Seting values
            rowActual.setInitialDate(rowBase.getInitialDate());
            rowActual.setFinalDate(rowBase.getFinalDate());
            rowActual.setTypePayment(rowBase.getTypePayment());
            rowActual.setAmount(rowBase.getAmount());
            rowActual.setAmountMx(rowBase.getAmountMx());
            rowActual.setJustification(rowBase.getJustification());
            rowActual.setCodeCombinationId(rowBase.getCodeCombinationId());
            rowActual.setCurrencyCode(rowBase.getCurrencyCode());
            rowActual.setCurrencyDesc(rowBase.getCurrencyDesc());
            rowActual.setIsDetail(rowBase.getIsDetail());
            rowActual.setNewRowState(Row.STATUS_INITIALIZED);
            insertRow(rowActual);

        } catch (Exception exception) {

            //wrhite log
            txn.writeDiagnostics(this, exception.getMessage(),
                                 OAFwkConstants.ERROR);
            MessageToken[] tokens = {new MessageToken("MSG_ERROR", exception.getMessage())};
            //Propaga Exception
            throw new OAException(XxGamAOLMessages.GenericType.SHORT_NAME_XBOL,
                                  XxGamAOLMessages.GenericType.XXGAM_MAF_DUP_ROW_ERROR,
                                  tokens, OAException.ERROR, null);
        }

        //Leaving duplicatePaymentReq
        txn.writeDiagnostics(this, "Leaving duplicatePaymentReq",
                             OAFwkConstants.PROCEDURE);
        return rowActual;
    }


}
