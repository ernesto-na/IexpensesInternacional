package xxgam.oracle.apps.xbol.maf.server;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OARow;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.domain.Number;

import xxgam.oracle.apps.xbol.maf.server.XxGamMaFlightInf0VOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxGamMaTicketPVOImpl extends OAViewObjectImpl {
    /**This is the default constructor (do not remove)
     */
    public XxGamMaTicketPVOImpl() {
    }

    /**
     * Crea un registro hijo del requerimiento principal.
     *
     * @param rowBase Row a copiar.
     * @return registro creado
     */
    public XxGamMaTicketPVORowImpl getPaymentReqAirplane(XxGamMaTicketPVORowImpl rowBase, 
                                                         RowIterator iterNuevo) {

        //Verifica nulidad
        if (rowBase == null || iterNuevo == null)
            return null;

        XxGamMaTicketPVORowImpl rowActual = null;

        try {

            rowActual = (XxGamMaTicketPVORowImpl)iterNuevo.createRow();

            //Inicializa los valores del registro
            rowActual.setPnr(rowBase.getPnr());
            rowActual.setTicketOffice(rowBase.getTicketOffice());
            rowActual.setContactPhone(rowBase.getContactPhone());
            rowActual.setEmail(rowBase.getEmail());
            rowActual.setTypeEmission(rowBase.getTypeEmission());
            rowActual.setBenefits(rowBase.getBenefits());
            /**  rowActual.setBeneficiary(rowBase.getBeneficiary()); **/
            rowActual.setCompany(rowBase.getCompany());
            rowActual.setRelationship(rowBase.getRelationship());

            /*Campos aï¿½adidos para la nueva estructura de franquicia GNOSISHCM/AHH*/
            rowActual.setTicketClass(rowBase.getTicketClass());
            rowActual.setTicketRate(rowBase.getTicketRate());
            rowActual.setTicketAvailable(rowBase.getTicketAvailable());
            rowActual.setTicketEmbargoed(rowBase.getTicketEmbargoed());

            rowActual.setNewRowState(Row.STATUS_NEW);

        } catch (Exception exception) {
            //Propaga la excepcion
            throw new OAException("No es posible crear la solicitud del boleto de avi\u00F3n", 
                                  OAException.ERROR);
        }
        return rowActual;
    }

    /**
     * Obtiene el Current Row del Ticket que contendra el nuevo vuelo
     */
    public void XxGamMaCreateFlight() {

        //Obteniendo el registro actual de XxGamMaTicketPVORowImpl
        XxGamMaTicketPVORowImpl rowXxGamMaTicketPVO = null;
        rowXxGamMaTicketPVO = (XxGamMaTicketPVORowImpl)getCurrentRow();
        RowIterator riXxGamMaTicketPVO = null;

        //Verificando que el row no venga vacio
        if (rowXxGamMaTicketPVO == null)
            throw new OAException("No es posible crear el registro de vuelo, Ticket no existe", 
                                  OAException.ERROR);

        //Obteniendo el row iterador de ticket para los vuelos
        riXxGamMaTicketPVO = rowXxGamMaTicketPVO.getXxGamMaFlightInf0VO();
        XxGamMaFlightInf0VOImpl voXxGamMaFlightInf0VOImpl = null;
        //Creamos variable de AM para obtener su referencia
        XxGamModAntAMImpl amXxGamModAnt = null;
        try {
            //Obtenemos el AM
            amXxGamModAnt = getXxGamModAntAM();
        } catch (Exception e) {
            e.printStackTrace();
        }
        //Obtenemos la referencia a la implementacion de la VO de Flight
        voXxGamMaFlightInf0VOImpl = amXxGamModAnt.getXxGamMaFlightInf0VO3();
        //Llamamos el metodo  para agregar un nuevo vuelo
        voXxGamMaFlightInf0VOImpl.addFlightInf0(riXxGamMaTicketPVO);
    }


    /**
     * Obtiene el Current Row del Ticket que contendra el nuevo vuelo
     */
    public void XxGamMaCreateFlightForFranchise() {

        //Obteniendo el registro actual de XxGamMaTicketPVORowImpl
        XxGamMaTicketPVORowImpl rowXxGamMaTicketPVO = null;

        rowXxGamMaTicketPVO = (XxGamMaTicketPVORowImpl)getCurrentRow();
        RowIterator riXxGamMaTicketPVO = null;

        //Verificando que el row no venga vacio
        if (rowXxGamMaTicketPVO == null)
            throw new OAException("No es posible crear el registro de vuelo, Ticket no existe", 
                                  OAException.ERROR);

        //Obteniendo el row iterador de ticket para los vuelos
        riXxGamMaTicketPVO = rowXxGamMaTicketPVO.getXxGamMaFlightInf0VO();

        XxGamMaFlightInf0VOImpl voXxGamMaFlightInf0VOImpl = null;
        //Creamos variable de AM para obtener su referencia
        XxGamModAntAMImpl amXxGamModAnt = null;

        try {
            //Obtenemos el AM
            amXxGamModAnt = getXxGamModAntAM();
            System.out.println(6);
        } catch (Exception e) {
            e.printStackTrace();
        }

        //Obtenemos la referencia a la implementacion de la VO de Flight
        voXxGamMaFlightInf0VOImpl = amXxGamModAnt.getXxGamMaFlightInf0VO4();
        //Llamamos el metodo  para agregar un nuevo vuelo
        voXxGamMaFlightInf0VOImpl.addFlightInf0(riXxGamMaTicketPVO);
    }

    /**
     * Obtenemos el AM
     * @return Application Module en uso
     */
    private XxGamModAntAMImpl getXxGamModAntAM() {
        XxGamModAntAMImpl amXxGamModAnt = null;
        amXxGamModAnt = (XxGamModAntAMImpl)getApplicationModule();
        return amXxGamModAnt;
    }

    /**
     * Crea una nueva fila para ingresar el vuelo en SOLICITUD DE BOLETO DE AVION
     */
    public void addNewTicket(String filial) {
        XxGamMaTicketPVOImpl voXxGamMaTicket = 
            this.getXxGamModAntAM().getXxGamMaTicketPVO3();
        if (voXxGamMaTicket != null) {
            if (!voXxGamMaTicket.isPreparedForExecution()) {
                voXxGamMaTicket.executeQuery();
            }

            XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
                (XxGamMaTicketPVORowImpl)voXxGamMaTicket.createRow();
            rowXxGamMaTicketP.setNewRowState(OARow.STATUS_INITIALIZED);
            rowXxGamMaTicketP.setTypeEmission("ELECTRONICA");
            if (null != filial)
                rowXxGamMaTicketP.setFilial(filial);
            voXxGamMaTicket.insertRow(rowXxGamMaTicketP);
        }
    }

    /**
     * Crea una nueva fila para ingresar el vuelo en SOLICITUD DE BOLETO DE AVION
     *
     */
    public void addTicketByFranchise() {
        //Verifica nulidad
        XxGamMaTicketPVOImpl voXxGamMaTicket = 
            this.getXxGamModAntAM().getXxGamMaTicketPVO4();
        if (voXxGamMaTicket != null) {
            if (!voXxGamMaTicket.isPreparedForExecution()) {
                voXxGamMaTicket.executeQuery();
            }

            XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
                (XxGamMaTicketPVORowImpl)voXxGamMaTicket.createRow();
            rowXxGamMaTicketP.setNewRowState(OARow.STATUS_INITIALIZED);
            voXxGamMaTicket.insertRow(rowXxGamMaTicketP);
        }
    }

    /**
     * Busca el Ticket con el id General Req
     * @param nGeneralReq
     * @return Devuele el id del Ticket
     */
    public Number searchTicketByGeneralReq(Number nGeneralReq) {
        Number id = null;
        //Verifica nulidad
        if (nGeneralReq == null)
            return null;
        try {
            clearViewCriterias();

            executeQuery();

            Row filas[] = getFilteredRows("GeneralReqId", nGeneralReq);
            if (filas != null) {
                System.out.println(filas.length);
                if (filas.length > 0) {
                    setCurrentRow(filas[0]);
                    XxGamMaTicketPVORowImpl r = 
                        (XxGamMaTicketPVORowImpl)getCurrentRow();
                    id = r.getId();
                }
            }

        } catch (Exception exception) {
            throw new OAException("No es posible encontrar el registro", 
                                  OAException.WARNING);
        }
        //Retorna el id del ticket para poder buscar los Vuelos
        return id;
    }


    /**
     * Busca los resgistros de Tickets con su ID Solo para Responsabilidad Empleados
     * @param idTicket Clave primaria
     */
    public void searchTicket(Number idTicket, Number idGeneral) {

        //Verifica nulidad

        if (idTicket == null && idGeneral == null)
            return;
        try {
            clearViewCriterias();
            //Declara los recursos    
            ViewCriteria vcPayment = null;
            ViewCriteriaRow rowVCPayment = null;

            //Crea el criterio de busqueda
            vcPayment = createViewCriteria();
            rowVCPayment = vcPayment.createViewCriteriaRow();

            if (idTicket != null) {
                rowVCPayment.setAttribute("Id", idTicket);
            }
            if (idGeneral != null) {
                rowVCPayment.setAttribute("GeneralReqId", idGeneral);
            }
            //Aplica el criterio
            vcPayment.addElement(rowVCPayment);
            applyViewCriteria(vcPayment);
            executeQuery();
            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
            }
            clearViewCriterias();
        } catch (Exception exception) {
            clearViewCriterias();
        }
    }

    /**
     * Obntiene en folio del ticket
     * @return el folio del ticket
     */
    public String findTicketFolio() {
        String folio = null;
        XxGamMaTicketPVORowImpl voXxGamMaTicket = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();

        if (voXxGamMaTicket != null)
            folio = voXxGamMaTicket.getFolio();

        return folio;
    }

    /**
     * Settea el CurrentRow de Ticket para Franquicias
     */
    public String setCurrentRowTicket() {
        String code = null;
        if (first() != null) {
            setCurrentRow(first());
        }

        XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (rowXxGamMaTicketP != null) {
            code = rowXxGamMaTicketP.getTicketOffice();
        }
        return code;
    }

    /**
     * Settea el CurrentRow de Ticket para Franquicias
     */
    public String getTypeEmissionCode() {
        String code = null;
        if (first() != null) {
            setCurrentRow(first());
        }

        XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (rowXxGamMaTicketP != null) {
            code = rowXxGamMaTicketP.getTypeEmission();
        }
        return code;
    }

    /**
     * Settea el CurrentRow de Ticket para Franquicias
     */
    public String getRelationShipCode() {
        String code = null;

        XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (rowXxGamMaTicketP != null) {
            code = rowXxGamMaTicketP.getRelationship();
        }
        return code;
    }


    public void setTicketOfficeDesc(String description) {
        XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (rowXxGamMaTicketP != null) {
            rowXxGamMaTicketP.setTicketOfficeDescription(description);
        }
    }

    /**
     * Asign el valor de la descripcion del tipo de emision 
     * @param description contiene la descripcion del tipo de emision
     */
    public void setTypeEmissionDesc(String description) {
        XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (rowXxGamMaTicketP != null) {
            rowXxGamMaTicketP.setTypeEmissionDescription(description);
        }
    }


    /**
     * Asigna el valor descriptivo del tipo de relacion para la solicitud de boleto de Franquicias
     * @param relationShip contiene la descripcion del tipo de relacion
     */
    public void setRelationShip(String relationShip) {
        XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (rowXxGamMaTicketP != null) {
            rowXxGamMaTicketP.setRelationshipdescription(relationShip);
        }
    }

    /**
     * Asigna el valor para el tipo o porcentaje de beneficio
     * @param benefitsDesc contiene la descripcion de beneficio
     */
    public void setBenefitsDesc(String benefitsDesc) {
        XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (benefitsDesc != null) {
            rowXxGamMaTicketP.setBenefitsDescription(benefitsDesc);
        }
    }

    /**
     * Obtiene el valor de tipo o porcentaje de beneficio
     * @return devuelve valor de codigo de beneficio
     */
    public String getBenefitsCode() {
        String benefitsCode = null;
        XxGamMaTicketPVORowImpl rowXxGamMaTicketP = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (rowXxGamMaTicketP != null) {
            benefitsCode = rowXxGamMaTicketP.getBenefits();
        }
        return benefitsCode;
    }

    /**
     * Obntiene la oficina de boletos
     * @return Oficina de boletos
     */
    public String findTicketOffice() {
        String ticketOffice = null;
        XxGamMaTicketPVORowImpl voXxGamMaTicket = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (voXxGamMaTicket != null) {
            ticketOffice = voXxGamMaTicket.getTicketOffice();
        }
        return ticketOffice;
    }

    /**
     * Obntiene la oficina de boletos
     * @return Oficina de boletos
     */
    public String findPNR() {
        String pnr = null;
        XxGamMaTicketPVORowImpl voXxGamMaTicket = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (voXxGamMaTicket != null) {
            pnr = voXxGamMaTicket.getPnr();
        }
        return pnr;
    }


    /**
     * Obntiene la oficina de boletos
     * @return Oficina de boletos
     */
    public String findContactPhone() {
        String contactPhone = null;
        XxGamMaTicketPVORowImpl voXxGamMaTicket = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (voXxGamMaTicket != null) {
            contactPhone = voXxGamMaTicket.getContactPhone();
        }
        return contactPhone;
    }


    /**
     * Obntiene la oficina de boletos
     * @return Oficina de boletos
     */
    public String findOffice() {
        String ticketOffice = null;
        XxGamMaTicketPVORowImpl voXxGamMaTicket = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (voXxGamMaTicket != null) {
            ticketOffice = voXxGamMaTicket.getTicketOffice();
        }
        return ticketOffice;
    }


    /**
     * Obntiene la oficina de boletos
     * @return Oficina de boletos
     */
    public String findFolio() {
        String folio = null;
        XxGamMaTicketPVORowImpl voXxGamMaTicket = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        if (voXxGamMaTicket != null) {
            folio = voXxGamMaTicket.getFolio();
        }
        return folio;
    }


    public boolean isRegisteredFlight() {
        setCurrentRow(first());
        if (getCurrentRow() != null) {
            XxGamMaTicketPVORowImpl rowXxGamMaTicketPV = 
                (XxGamMaTicketPVORowImpl)getCurrentRow();
            if (rowXxGamMaTicketPV != null) {
                RowIterator ri = rowXxGamMaTicketPV.getXxGamMaFlightInf0VO();
                if (ri != null) {
                    if (ri.getRowCount() > 0) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }


    public boolean isRegisteredFolio() {
        setCurrentRow(first());
        if (getCurrentRow() != null) {
            XxGamMaTicketPVORowImpl rowXxGamMaTicketPV = 
                (XxGamMaTicketPVORowImpl)getCurrentRow();
            if (rowXxGamMaTicketPV != null) {
                if (rowXxGamMaTicketPV.getFolio() != null && 
                    !rowXxGamMaTicketPV.getFolio().equals("")) {
                    return true;
                } else if (rowXxGamMaTicketPV.getFolio() == null || 
                           rowXxGamMaTicketPV.getFolio() != null && 
                           rowXxGamMaTicketPV.getFolio().equals("")) {
                    return false;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }


    public String getNumberOfRoutes() {
        String vuelos = "";
        XxGamMaTicketPVORowImpl rowXxGamMaTicketPV = 
            (XxGamMaTicketPVORowImpl)getCurrentRow();
        RowIterator ri = rowXxGamMaTicketPV.getXxGamMaFlightInf0VO();
        Row row[] = ri.getAllRowsInRange();
        XxGamMaFlightInf0VORowImpl rowXxGamMaFlightInf = null;
        for (Row rowIter: row) {
            rowXxGamMaFlightInf = (XxGamMaFlightInf0VORowImpl)rowIter;
            vuelos = 
                    vuelos + rowXxGamMaFlightInf.getTravelingFrom() + "-" + rowXxGamMaFlightInf.getTravelingTo() + 
                    " : "; //change by dihu 22 Oct 2014 para correguir el orden de las rutas en el workflow
        }
        return vuelos;
    }
}

