package xxgam.oracle.apps.xbol.maf.server;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;
import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.XMLInterface;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;

import oracle.xml.parser.v2.XMLNode;

import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaCostCenterByPersonIdLovVOImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamModAntLovAMImpl;
import xxgam.oracle.apps.xbol.maf.utils.XxGamAOLMessages;
import xxgam.oracle.apps.xbol.maf.utils.XxGamConstantsUtil;
import xxgam.oracle.apps.xbol.maf.utils.XxGamMAnticiposUtil;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxGamMaGeneralReqVOImpl extends OAViewObjectImpl {
    /**This is the default constructor (do not remove)
     */
    public XxGamMaGeneralReqVOImpl() {
    }

    /**
     * Busca las solicitudes seleccionadas.
     */
    public void searchRequests(OAPageContext pageContext, OAWebBean webBean, 
                               Number idSolicitud) {

        //Obtiene el registro y lo asigna como current row

        System.out.println("Comienza XxGamMaGeneralReqVOImpl.searchRequests");

        try {
            XxGamMaGeneralReqVORowImpl rowActual = null;
            rowActual = getRowRequest(idSolicitud);

            //Asigna el current row.
            if (rowActual != null) {

                //Inicializa el current row
                setCurrentRow(rowActual);
                if (rowActual.getTipoSolicitud().equals("Solicitud de anticipos")) {
                    XxGamMaTicketPVORowImpl rowTicket = null;
                    XxGamMaPaymentReqVORowImpl rowPayment = null;

                    RowIterator riPayment = null;
                    RowIterator riTicket = null;
                    riPayment = rowActual.getXxGamMaPaymentReqVO();

                    //Obtiene su detalle Payment
                    if (riPayment != null && riPayment.getRowCount() > 0) {

                        rowPayment = 
                                (XxGamMaPaymentReqVORowImpl)riPayment.first();
                        riTicket = rowPayment.getXxGamMaTicketPVO();
                        //Obtiene el detalle de flight
                        if (riTicket != null && riTicket.getRowCount() > 0) {
                            rowTicket = 
                                    (XxGamMaTicketPVORowImpl)riTicket.first();
                            rowTicket.getXxGamMaFlightInf0VO();
                        }
                    }
                } else if (rowActual.getTipoSolicitud().equals("Franquicias")) {

                    XxGamMaTicketPVORowImpl rowTicket = null;
                    RowIterator riTicket = null;
                    riTicket = rowActual.getXxGamMaTicketPVO();
                    if (riTicket != null && riTicket.getRowCount() > 0) {
                        rowTicket = (XxGamMaTicketPVORowImpl)riTicket.first();
                        rowTicket.getXxGamMaFlightInf0VO();
                    }
                }
            }
        } catch (Exception exception) {
            throw new OAException(XxGamAOLMessages.GenericType.SHORT_NAME_XBOL, 
                                  XxGamAOLMessages.GenericType.XXGAM_MAF_REQ_NF_ERROR, 
                                  null, OAException.ERROR, null);
        }
    }

    /**
     * Obtiene el registro buscado.
     *
     * @param idSolicitud Clave de la solicitud.
     * @return row actual.
     */
    private XxGamMaGeneralReqVORowImpl getRowRequest(Number idSolicitud) {

        System.out.println("Comienza XxGamMaGeneralReqVOImpl.getRowRequest");
        //Verifica nulidad
        if (idSolicitud == null)
            return null;

        //DeclaraciÃ³n de los recursos
        ViewCriteria vcSolicitudes = null;
        ViewCriteriaRow vcSolicitudesRow = null;

        setWhereClause(null);
        setWhereClauseParams(null);
        clearViewCriterias();

        //Crea el view criteria
        vcSolicitudes = createViewCriteria();
        vcSolicitudesRow = vcSolicitudes.createViewCriteriaRow();
        vcSolicitudesRow.setAttribute("Id", idSolicitud);

        //Aplica el criteria y ejecuta los criterios
        vcSolicitudes.addElement(vcSolicitudesRow);
        applyViewCriteria(vcSolicitudes);
        executeQuery();

        //Obtiene el registro.
        XxGamMaGeneralReqVORowImpl rowActual = null;
        if (getEstimatedRowCount() > 0) {
            rowActual = (XxGamMaGeneralReqVORowImpl)first();
        }

        clearViewCriterias();
        return rowActual;

    }

    /**
     * Crea un nuevo registro de tipo solicitud.
     */
    public void duplicateRequest() {

        //Obtiene el current row
        XxGamMaGeneralReqVORowImpl rowActual = null;
        rowActual = (XxGamMaGeneralReqVORowImpl)getCurrentRow();

        //Verifica nulidad
        if (rowActual == null)
            return;
        duplicateRequest(rowActual);
    }

    /**
     * Cambia el estatus de la solicitud
     */
    public void setStatusRequest(Number idSolicitud, String sStatus) {

        //Verifica nulidad
        if (sStatus == null)
            return;

        //Busca el current row.
        if (idSolicitud != null) {
            searchRequests(null, null, idSolicitud);
        }

        //Obtiene el current row
        XxGamMaGeneralReqVORowImpl rowActual = null;
        rowActual = (XxGamMaGeneralReqVORowImpl)getCurrentRow();

        //Verifica nulidad
        if (rowActual == null)
            return;

        //Cambia el estatus a la solicitud
        if (rowActual.getStatusRequest() != null) {
            rowActual.setStatusRequest(sStatus);
        } else {
            if (rowActual.getStatusFranchise() != null) {
                rowActual.setStatusFranchise(sStatus);
            }
        }
    }

    /**
     * Crea un nuevo registro.
     *
     * @param rowActual Row actual.
     * @return true or false
     */
    public boolean duplicateRequest(XxGamMaGeneralReqVORowImpl rowActual) {

        //Verifica nulidad
        if (rowActual == null)
            return false;

        try {

            //Crea un nuevo registro
            XxGamMaGeneralReqVORowImpl rowNuevo = null;
            rowNuevo = getNewRequest();

            //Duplica los registros
            rowNuevo.setEmployeeId(rowActual.getEmployeeId());

            String prefix = null;
            String sequenceName = null;
            if (rowActual.getStatusRequest() != null) {
                prefix = XxGamConstantsUtil.PREFIX_NUMBER_EMPLOYEE;
                sequenceName = XxGamConstantsUtil.SEQUENCES_NUMBER_EMPLOYEE;
            } else {
                if (rowActual.getStatusFranchise() != null) {
                    prefix = XxGamConstantsUtil.PREFIX_NUMBER_FRANCHISE;
                    sequenceName = 
                            XxGamConstantsUtil.SEQUENCES_NUMBER_FRANCHISE;
                }
            }
            Number seqNum = null;
            if (prefix != null && sequenceName != null) {
                OADBTransaction trx = (OADBTransaction)getDBTransaction();
                if (trx != null) {
                    seqNum = trx.getSequenceValue(sequenceName);
                }
            }

            if (prefix != null && seqNum != null) {
                rowNuevo.setNumberPayment(prefix + seqNum);
            }

            Date currentReqDate = null;
            currentReqDate = XxGamMAnticiposUtil.getFechaActual();
            rowNuevo.setRequestPaymentDate(currentReqDate);

            if (rowActual.getStatusRequest() != null) {
                rowNuevo.setStatusRequest(XxGamConstantsUtil.XXGAM_MA_INPROGRESS_CODE);
            }
            if (rowActual.getStatusFranchise() != null) {
                rowNuevo.setStatusFranchise(XxGamConstantsUtil.XXGAM_STATUS_FRANCHISE_INPROGRESS);
            }

            //OAApplicationModuleImpl oaapplicationmoduleimpl = (OAApplicationModuleImpl)getRootApplicationModule();
            //OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)oaapplicationmoduleimpl.getOADBTransaction();
            //Integer u = oadbtransactionimpl.getUserId();

            rowNuevo.setTotalPayment(rowActual.getTotalPayment());
            rowNuevo.setPurpose(rowActual.getPurpose());
            rowNuevo.setApprovalDate(null);
            rowNuevo.setApproverId(rowActual.getApproverId());
            rowNuevo.setApproverAltId(rowActual.getApproverAltId());
            rowNuevo.setCostCenter(rowActual.getCostCenter());
            rowNuevo.setCostCenterFlex(rowActual.getCostCenterFlex());
            rowNuevo.setGroupPayment(rowActual.getGroupPayment());
            rowNuevo.setTemplatePayment(rowActual.getTemplatePayment());
            rowNuevo.setCurrencyCode(rowActual.getCurrencyCode());
            rowNuevo.setVirtualCard(rowActual.getVirtualCard());
            /**  rowNuevo.setStatusNotification(rowActual.getStatusNotification()); GnosisHCM 22/05/2015 para reiniciar estatus de emitido y no emitido**/
            rowNuevo.setReason(rowActual.getReason());
            rowNuevo.setComments(rowActual.getComments());
            rowNuevo.setOperatingUnit(rowActual.getOperatingUnit());
            rowNuevo.setOrigin(rowActual.getOrigin());

            if (rowActual.getStatusFranchise() != null) {
                addRequestAirplane(rowActual.getXxGamMaTicketPVO(), 
                                   rowNuevo.getXxGamMaTicketPVO(), true);
            } else {

                //Obtiene el detalle de la solicitud
                RowIterator detalleReqActual = 
                    rowActual.getXxGamMaPaymentReqVO();
                RowIterator detalleReqNuevo = 
                    rowNuevo.getXxGamMaPaymentReqVO();

                //Verifica nulidad
                if (detalleReqActual == null || 
                    detalleReqActual.getRowCount() == 0)
                    return true;

                XxGamMaPaymentReqVORowImpl rowDetalleNuevo = null;
                XxGamMaPaymentReqVORowImpl rowSeleccionado = null;

                //Copia el detalle de la solciitud
                while (detalleReqActual.hasNext() && 
                       detalleReqActual.getRowCount() > 0) {

                    rowSeleccionado = 
                            (XxGamMaPaymentReqVORowImpl)detalleReqActual.next();

                    //Verifica que el registro tenga valor
                    if (rowSeleccionado == null)
                        continue;

                    //Obtiene el nuevo registro
                    rowDetalleNuevo = 
                            getPaymentReq((XxGamMaPaymentReqVORowImpl)rowSeleccionado, 
                                          detalleReqNuevo);

                    //Inserta el nuevo registro
                    if (rowDetalleNuevo != null) {

                        //Inicializa las solicitudes de aviÃ³n existentes
                        addRequestAirplane(rowSeleccionado.getXxGamMaTicketPVO(), 
                                           rowDetalleNuevo.getXxGamMaTicketPVO(), 
                                           false);
                    }
                }
            }
        } catch (Exception execption) {
            if (getDBTransaction() != null) {
                getDBTransaction().rollback();
            }
            //Propaga la excepcion
            throw new OAException("No es posible duplicar el registro seleccionado", 
                                  OAException.ERROR);
        }
        return true;
    }

    /**
     * Copia el detalle de los registros.
     *
     * @param iterBase Iterador base.
     * @param iterNuevo Iterador nuevo.
     */
    private void addRequestAirplane(RowIterator iterBase, 
                                    RowIterator iterNuevo, 
                                    boolean isFranchise) {

        //Verifica nulidad
        if (iterBase == null || iterNuevo == null || 
            iterBase.getRowCount() == 0)
            return;

        //Declaracion de recursos
        XxGamMaTicketPVORowImpl rowSeleccionado = null;
        XxGamMaTicketPVORowImpl rowNuevo = null;

        try {

            //Itera sobre las solicitudes de boletos de avion
            while (iterBase.hasNext()) {

                rowSeleccionado = (XxGamMaTicketPVORowImpl)iterBase.next();
                if (rowSeleccionado != null) {

                    rowNuevo = 
                            getPaymentReqAirplane(rowSeleccionado, iterNuevo, 
                                                  isFranchise);
                    iterNuevo.insertRow(rowNuevo);

                    //Inicializa el detalle del registro
                    addRequestFlight(rowSeleccionado.getXxGamMaFlightInf0VO(), 
                                     rowNuevo.getXxGamMaFlightInf0VO(), 
                                     isFranchise);
                    //Inicializa el detalle del registro Informacion de pasajeros             
                    //Agregado para que tambien copie la informacion de pasajero 
                    addRequestPasajerosInfo(rowSeleccionado.getXxGamMaPasajerosInfoVO(), 
                                            rowNuevo.getXxGamMaPasajerosInfoVO(), 
                                            isFranchise);

                }
            }
        } catch (Exception exception) {
            if (getDBTransaction() != null) {
                getDBTransaction().rollback();
            }
            //Propaga la excepcion generada
            throw new OAException(exception.getMessage(), OAException.ERROR);
        }
    }

    /**
     * Copia el detalle de los registros para las rutas de vuelo
     *
     * @param iterBase Iterador base.
     * @param iterNuevo Iterador nuevo.
     */
    private void addRequestFlight(RowIterator iterBase, RowIterator iterNuevo, 
                                  boolean isFranchise) {

        //Verifica nulidad
        if (iterBase == null || iterNuevo == null || 
            iterBase.getRowCount() == 0)
            return;

        //Declaracion de recursos
        XxGamMaFlightInf0VORowImpl rowSeleccionado = null;
        XxGamMaFlightInf0VORowImpl rowNuevo = null;

        try {

            //Itera sobre las solicitudes de boletos de avion
            while (iterBase.hasNext()) {

                rowSeleccionado = (XxGamMaFlightInf0VORowImpl)iterBase.next();
                if (rowSeleccionado != null) {
                    rowNuevo = 
                            getPaymentFlight(rowSeleccionado, iterNuevo, isFranchise);
                    iterNuevo.insertRow(rowNuevo);
                }
            }
        } catch (Exception exception) {
            if (getDBTransaction() != null) {
                getDBTransaction().rollback();
            }
            //Propaga la excepcion generada
            throw new OAException(exception.getMessage(), OAException.ERROR);
        }
    }


    /**
     * Obtiene el nuevo registro.
     *
     * @param rowBase Registro a duplicar.
     * @return registro nuevo.
     */
    private XxGamMaPaymentReqVORowImpl getPaymentReq(XxGamMaPaymentReqVORowImpl rowBase, 
                                                     RowIterator detalleReqNuevo) {

        if (rowBase == null)
            return null;

        //Obtiene el AM
        XxGamModAntAMImpl amXxGamModAntAM = null;
        XxGamMaPaymentReqVOImpl voXxGamMaPaymentReqVO = null;
        XxGamMaPaymentReqVORowImpl rowXxGamMaPaymentReqVO = null;
        amXxGamModAntAM = (XxGamModAntAMImpl)getApplicationModule();

        //Verifica nulidad
        if (amXxGamModAntAM == null)
            return null;

        //Obtiene el nuevo registro
        voXxGamMaPaymentReqVO = amXxGamModAntAM.getXxGamMaPaymentReqVO2();
        rowXxGamMaPaymentReqVO = 
                voXxGamMaPaymentReqVO.getPaymentReq(rowBase, detalleReqNuevo);

        //Regresa la respuesta
        return rowXxGamMaPaymentReqVO;
    }

    /**
     * Obtiene el nuevo registro.
     *
     * @param rowBase Registro a duplicar.
     * @return registro nuevo.
     */
    private XxGamMaTicketPVORowImpl getPaymentReqAirplane(XxGamMaTicketPVORowImpl rowBase, 
                                                          RowIterator iterNuevo, 
                                                          boolean isFranchise) {

        if (rowBase == null)
            return null;

        //Obtiene el AM
        XxGamModAntAMImpl amXxGamModAntAM = null;
        XxGamMaTicketPVOImpl voXxGamMaTicketPVO = null;
        XxGamMaTicketPVORowImpl rowXxGamMaTicketPVORow = null;
        amXxGamModAntAM = (XxGamModAntAMImpl)getApplicationModule();

        //Verifica nulidad
        if (amXxGamModAntAM == null)
            return null;

        //Obtiene el nuevo registro
        try {
            if (isFranchise) {
                voXxGamMaTicketPVO = amXxGamModAntAM.getXxGamMaTicketPVO4();
            } else {
                voXxGamMaTicketPVO = amXxGamModAntAM.getXxGamMaTicketPVO3();
            }

            rowXxGamMaTicketPVORow = 
                    voXxGamMaTicketPVO.getPaymentReqAirplane(rowBase, 
                                                             iterNuevo);

        } catch (Exception exception) {

            //Propaga la excepcion
            throw new OAException("No es posible duplicar el registro seleccionado", 
                                  OAException.ERROR);
        }

        //Regresa la respuesta
        return rowXxGamMaTicketPVORow;
    }

    /**
     * Obtiene el registro de las reservaciones de vuelo.
     *
     * @param rowBase Row a copiar.
     * @return registro nuevo.
     */
    private XxGamMaFlightInf0VORowImpl getPaymentFlight(XxGamMaFlightInf0VORowImpl rowBase, 
                                                        RowIterator iterNuevo, 
                                                        boolean isFranchise) {

        if (rowBase == null)
            return null;

        //Obtiene el AM
        XxGamModAntAMImpl amXxGamModAntAM = null;
        XxGamMaFlightInf0VOImpl voXxGamMaFlightInf0VO = null;
        XxGamMaFlightInf0VORowImpl rowXxGamMaFlightInf0VORow = null;
        amXxGamModAntAM = (XxGamModAntAMImpl)getApplicationModule();

        //Verifica nulidad
        if (amXxGamModAntAM == null)
            return null;

        //Obtiene el nuevo registro
        try {
            if (isFranchise) {
                voXxGamMaFlightInf0VO = 
                        amXxGamModAntAM.getXxGamMaFlightInf0VO4();
            } else {
                voXxGamMaFlightInf0VO = 
                        amXxGamModAntAM.getXxGamMaFlightInf0VO3();
            }

            rowXxGamMaFlightInf0VORow = 
                    voXxGamMaFlightInf0VO.getPaymentFlight(rowBase, iterNuevo);

        } catch (Exception exception) {

            //Propaga la excepcion
            throw new OAException("No es posible duplicar el registro de vuelos", 
                                  OAException.ERROR);
        }

        //Regresa la respuesta
        return rowXxGamMaFlightInf0VORow;

    }

    /**
     * Obtiene el registro de las reservaciones de vuelo.
     *
     * @param rowBase Row a copiar.
     * @return registro nuevo.
     */
    private XxGamMaFlightInf0VORowImpl getPaymentFlightFranchise(XxGamMaFlightInf0VORowImpl rowBase, 
                                                                 RowIterator iterNuevo) {

        if (rowBase == null)
            return null;

        //Obtiene el AM
        XxGamModAntAMImpl amXxGamModAntAM = null;
        XxGamMaFlightInf0VOImpl voXxGamMaFlightInf0VO = null;
        XxGamMaFlightInf0VORowImpl rowXxGamMaFlightInf0VORow = null;
        amXxGamModAntAM = (XxGamModAntAMImpl)getApplicationModule();

        //Verifica nulidad
        if (amXxGamModAntAM == null)
            return null;

        //Obtiene el nuevo registro
        try {
            voXxGamMaFlightInf0VO = amXxGamModAntAM.getXxGamMaFlightInf0VO4();
            rowXxGamMaFlightInf0VORow = 
                    voXxGamMaFlightInf0VO.getPaymentFlight(rowBase, iterNuevo);

        } catch (Exception exception) {

            //Propaga la excepcion
            throw new OAException("No es posible duplicar el registro seleccionado", 
                                  OAException.ERROR);
        }

        //Regresa la respuesta
        return rowXxGamMaFlightInf0VORow;

    }


    /**
     * Crea un nuevo registro.
     *
     * @return registro nuevo.
     */
    public XxGamMaGeneralReqVORowImpl getNewRequest() {

        //Crea e inicializa el registro
        XxGamMaGeneralReqVORowImpl rowActual = null;
        rowActual = (XxGamMaGeneralReqVORowImpl)createRow();
        rowActual.setNewRowState(Row.STATUS_NEW);

        //Inserta el registro y devuelve el row
        insertRow(rowActual);
        return rowActual;
    }


    /**
     * Busca las solicitudes seleccionadas.
     */
    public void searchRequests(String idSolicitud, String sName, 
                               String nCostCenter, String nAdvanceTemplate, 
                               String purpose, Date dStartDate, Date dEndDate, 
                               String sTypeReuqest) {

        //DeclaraciÃ³n de los recursos
        ViewCriteria vcSolicitudes = null;
        ViewCriteriaRow vcSolicitudesRow = null;

        //Crea el view criteria
        vcSolicitudes = createViewCriteria();
        vcSolicitudesRow = vcSolicitudes.createViewCriteriaRow();

        /**
         * Inicializa los parametros de busqueda.
         **/

        //Verifica nulidad
        if (idSolicitud != null && !"".equals(idSolicitud))
            vcSolicitudesRow.setAttribute("NumberPayment", 
                                          XxGamConstantsUtil.LIKE_OPEN + 
                                          idSolicitud + 
                                          XxGamConstantsUtil.LIKE_CLOSE);

        //Verifica nulidad
        if (nCostCenter != null && !"".equals(nCostCenter))
            vcSolicitudesRow.setAttribute("CostCenter", nCostCenter);

        //Verifica nulidad
        if (nAdvanceTemplate != null && !"".equals(nAdvanceTemplate))
            vcSolicitudesRow.setAttribute("ReportType", 
                                          XxGamConstantsUtil.LIKE_OPEN + 
                                          nAdvanceTemplate + 
                                          XxGamConstantsUtil.LIKE_CLOSE);

        //Verifica nulidad
        if (purpose != null && !purpose.equals(""))
            vcSolicitudesRow.setAttribute("PurposeDescription", 
                                          XxGamConstantsUtil.LIKE_OPEN + 
                                          purpose + 
                                          XxGamConstantsUtil.LIKE_CLOSE);

        //Verifica nulidad
        if (dStartDate != null && dEndDate != null)
            vcSolicitudesRow.setAttribute("RequestPaymentDate", 
                                          "BETWEEN " + getClausuleWhereDate(dStartDate) + 
                                          " AND " + 
                                          getClausuleWhereDate(dEndDate));
        //Verifica nulidad
        if (sName != null && !"".equals(sName))
            vcSolicitudesRow.setAttribute("EmployeName", 
                                          XxGamConstantsUtil.LIKE_OPEN + 
                                          sName + 
                                          XxGamConstantsUtil.LIKE_CLOSE);


        if (sTypeReuqest != null && !"".equals(sTypeReuqest))
            vcSolicitudesRow.setAttribute("TipoSolicitud", 
                                          XxGamConstantsUtil.LIKE_OPEN + 
                                          sTypeReuqest + 
                                          XxGamConstantsUtil.LIKE_CLOSE);


        //Aplica el criteria y ejecuta los criterios
        vcSolicitudes.addElement(vcSolicitudesRow);
        applyViewCriteria(vcSolicitudes);
        executeQuery();

        clearViewCriterias();
    }

    /**
     * Construye la clausula where.
     *
     * @param dDate Fecha.
     * @return clausula where.
     */
    private String getClausuleWhereDate(Date dDate) {

        if (dDate == null)
            return null;

        //Construye la clausula where
        String sClausulePart1 = null;
        String sClausulePart2 = null;
        String sClausuleWhere = null;
        sClausulePart1 = "TO_CHAR(to_DATE('";
        sClausulePart2 = "','yyyy-mm-dd'),'yyyy-mm-dd')";


        //Construye la clausula y la regresa
        sClausuleWhere = sClausulePart1 + dDate + sClausulePart2;
        return sClausuleWhere;
    }


    /**
     * Busqueda avanzada de consulta de solciitudes.
     *
     * @param advanceNum NÃºmero de anticipo.
     * @param employeeName Nombre del empleado.
     * @param nameApprover Nombre del proveedor.
     * @param costCenter Centro de costos.
     * @param virtualCard Tarjeta virtual.
     * @param statusRequest Estatus de la solicitud.
     * @param statusTicket Estatus del boleto.
     * @param dateFrom Fecha inicio.
     * @param dateTo Fecha fin.
     */
    public void searchAdvanceConsultantion(String advanceNum, 
                                           String employeeName, 
                                           String nameApprover, 
                                           String costCenter, 
                                           String virtualCard, 
                                           String statusRequest, 
                                           String statusTicket, Date dateFrom, 
                                           Date dateTo) {

        //Inicia la busqueda
        ViewCriteria vcSolicitudes = null;
        ViewCriteriaRow vcSolicitudesRow = null;
        try {


            //Crea el view criteria
            vcSolicitudes = createViewCriteria();
            vcSolicitudesRow = vcSolicitudes.createViewCriteriaRow();

            //Inicializa los valores

            //Verifica nulidad
            if (advanceNum != null && !"".equals(advanceNum))
                vcSolicitudesRow.setAttribute("NumberPayment", 
                                              XxGamConstantsUtil.LIKE_OPEN + 
                                              advanceNum + 
                                              XxGamConstantsUtil.LIKE_CLOSE);

            //Nombre del empleado
            if (employeeName != null && !employeeName.equals(""))
                vcSolicitudesRow.setAttribute("EmployeName", 
                                              XxGamConstantsUtil.LIKE_OPEN + 
                                              employeeName + 
                                              XxGamConstantsUtil.LIKE_CLOSE);

            //Nombre del aprovador
            if (nameApprover != null && !nameApprover.equals(""))
                vcSolicitudesRow.setAttribute("ApproverName", 
                                              XxGamConstantsUtil.LIKE_OPEN + 
                                              nameApprover + 
                                              XxGamConstantsUtil.LIKE_CLOSE);

            //Centro de costos
            if (costCenter != null && !costCenter.equals(""))
                vcSolicitudesRow.setAttribute("CostCenter", costCenter);

            //Tarjeta virtual
            if (virtualCard != null && !virtualCard.equals(""))
                vcSolicitudesRow.setAttribute("VirtualCard", 
                                              XxGamConstantsUtil.LIKE_OPEN + 
                                              virtualCard + 
                                              XxGamConstantsUtil.LIKE_CLOSE);

            //Status de la solicitud
            if (statusRequest != null && !statusRequest.equals(""))

                vcSolicitudesRow.setAttribute("StatusDescription", 
                                              XxGamConstantsUtil.LIKE_OPEN + 
                                              statusRequest + 
                                              XxGamConstantsUtil.LIKE_CLOSE);

            //Status de la solicitud
            if (statusTicket != null && !statusTicket.equals(""))

                vcSolicitudesRow.setAttribute("StatusNotification", 
                                              XxGamConstantsUtil.LIKE_OPEN + 
                                              statusTicket + 
                                              XxGamConstantsUtil.LIKE_CLOSE);


            //Verifica nulidad
            if (dateFrom != null && dateTo != null)
                vcSolicitudesRow.setAttribute("RequestPaymentDate", 
                                              "BETWEEN " + 
                                              getClausuleWhereDate(dateFrom) + 
                                              " AND " + 
                                              getClausuleWhereDate(dateTo));

            //Aplica el criteria y ejecuta los criterios
            vcSolicitudes.addElement(vcSolicitudesRow);
            applyViewCriteria(vcSolicitudes);
            executeQuery();

            clearViewCriterias();


        } catch (Exception exception) {

            //Propaga excepcion
            throw new OAException("No es posible obtener los registros solicitados", 
                                  OAException.WARNING);
        }
    }


    /**
     * Extrae la view object
     *
     * */
    public XMLNode getDataXML() {

        //Obtiene el XML node
        XMLNode xmlNode = null;

        try {
            xmlNode = 
                    (XMLNode)writeXML(0, XMLInterface.XML_IGNORE_DEPTH_COUNT);

        } catch (Exception exception) {

            //Propaga la excepcion
            throw new OAException("No es posible obtener los datos solicitados", 
                                  OAException.WARNING);
        }

        //Regresa el resultado
        return xmlNode;
    }


    /**
     * Obtiene el Current Row del Ticket que contendra el nuevo vuelo
     */
    public void XxGamMaCreateTicketByFranchise() {
        //Obteniendo el registro actual de XxGamMaGeneralReqVORowImpl  GENERAL REQ
        XxGamMaGeneralReqVORowImpl rowXxGamMaGeneralReq = null;
        rowXxGamMaGeneralReq = (XxGamMaGeneralReqVORowImpl)getCurrentRow();
        RowIterator riXxGamMaGeneralReqPVO = null;
        //Verificando que el current row no sea nulo
        if (rowXxGamMaGeneralReq == null)
            throw new OAException("No es posible crear el registro de vuelo, Ticket no existe", 
                                  OAException.ERROR);
        //Obteniendo el row iterador de ticket para generar un nuevo Ticket asociado a el General Req
        riXxGamMaGeneralReqPVO = rowXxGamMaGeneralReq.getXxGamMaTicketPVO();
        XxGamMaTicketPVOImpl voXxGamMaTicketPVOImpl = null;
        //Creamos variable de AM para obtener su referencia
        XxGamModAntAMImpl amXxGamModAnt = null;
        try {
            //Obtenemos el AM
            amXxGamModAnt = getXxGamModAntAM();
        } catch (Exception e) {
            e.printStackTrace();
        }
        //Obtenemos la instancia de voXxGamMaTicketPVOImpl de la instancia numero 4 ya que es la que le corresponde a las franquicias
        voXxGamMaTicketPVOImpl = amXxGamModAnt.getXxGamMaTicketPVO4();
    }


    /**
     * Obtenemos el AM
     * @return Application Module en uso
     */
    private XxGamModAntAMImpl getXxGamModAntAM() {
        XxGamModAntAMImpl amXxGamModAnt = null;
        amXxGamModAnt = (XxGamModAntAMImpl)getApplicationModule();
        return amXxGamModAnt;
    }


    /**
     * Busca el registro por Id de General Req
     * @param nGeneralReq Clave primaria
     */
    public void searchGeneralReq(Number nGeneralReq) {
        if (nGeneralReq == null)
            return;

        try {
            //Declara los recursos
            ViewCriteria vcPayment = null;
            ViewCriteriaRow rowVCPayment = null;

            //Crea el criterio de busqueda
            vcPayment = createViewCriteria();
            rowVCPayment = vcPayment.createViewCriteriaRow();
            rowVCPayment.setAttribute("Id", nGeneralReq);

            //Aplica el criterio
            vcPayment.addElement(rowVCPayment);
            applyViewCriteria(vcPayment);
            executeQuery();
            //Inicializa el current row
            if (getRowCount() > 0) {
                setCurrentRow(first());
            }
            clearViewCriterias();
        } catch (Exception exception) {
            clearViewCriterias();
        }
    }

    /**
     * Inicializa el valor de cost center
     */
    public void executeQuery() {

        super.executeQuery();
        System.out.println("Ejecucion de executeQuery e invocacion de initQuery");
        //initQuery();
        System.out.println("initQuery.");
    }
    /**
    *
    * */
    //private void initQuery2() {

    //}

    /**
     * Inicializa valores del query
     */
    private void initQuery() {

        //Crea el iterador
        RowSetIterator iterator = null;
        iterator = createRowSetIterator(null);
        XxGamMaGeneralReqVORowImpl rowActual = null;
        Number employeeId = null;
        Number costCenter = null;
        String sTypeRequest = null;


        //Se prepara para resivir cualquier excepcion
        try {

            //System.out.println("iterator.getRowCount(): " + iterator.getRowCount());
            //Verifica si tiene registros
            //if (iterator == null || iterator.getRowCount() == 0)
            //    return;


            //Itera sobre cada registro
            while (iterator.hasNext()) {

                rowActual = (XxGamMaGeneralReqVORowImpl)iterator.next();
                //Verifica si tiene valor el registro
                if (rowActual == null)
                    continue;

                employeeId = rowActual.getEmployeeId();

                costCenter = rowActual.getCostCenter();
                sTypeRequest = getTypeRequest(rowActual.getTipoSolicitud());

                //Verifica si el tipo de solicitud tiene valor
                sTypeRequest = 
                        getCostCenterDsc(employeeId, costCenter, sTypeRequest);

                //Inicializa el valor
                if (sTypeRequest != null)
                    rowActual.setCostCenterTmp(sTypeRequest);
            }
        } catch (Exception exception) {
            exception.printStackTrace();
            //Atrapa la excepciones
            throw new OAException("No es posible mostrar los registros", 
                                  OAException.WARNING);
        }
        //Cierra el iterador
        finally {

            try {
                //Cierra el iterador
                iterator.closeRowSetIterator();

            } catch (Exception excep) {

                //Destruye el objeto
                if (iterator != null)
                    iterator = null;
            } //catch interno
        } //Finally
    } //Method


    /**
     * Obtiene el tipo de solicitud.
     *
     * @param sValor Valor de la solicitud.
     * @return tipo de solicitud
     */
    private String getTypeRequest(String sValor) {

        //Verifica nulidad
        if (sValor == null)
            return null;

        String sTypeRequest = null;

        //Verifica el tipo de solicitud
        if (sValor.equals("Franquicias"))
            sTypeRequest = "TARJETA_VIRTUAL_FRANQUICIAS";

        else if (sValor.equals("Solicitud de anticipos"))
            sTypeRequest = "TARJETA_VIRTUAL_COMISION";

        //Regresa la respuesta
        return sTypeRequest;
    }

    /**
     * Obtiene la descripciÃ³n de cost center.
     *
     * @param employeId Clave del empleado.
     * @param costCenter Cost center.
     * @param sType tipo de responsabilidad.
     *
     * @return descripciÃ³n del cost center
     */
    private String getCostCenterDsc(Number employeId, Number costCenter, 
                                    String sType) {

        if (employeId == null || costCenter == null || sType == null)
            return null;

        XxGamModAntAMImpl amGral = null;
        XxGamModAntLovAMImpl amLov = null;
        Row rowActual = null;
        String sCostCenterDsc = null;
        XxGamMaCostCenterByPersonIdLovVOImpl voCostCenter = null;

        //Obtiene el AM general
        amGral = (XxGamModAntAMImpl)getApplicationModule();

        //Verifica nulidad
        if (amGral == null)
            return null;

        //Obtiene el AM lov
        amLov = (XxGamModAntLovAMImpl)amGral.getXxGamModAntLovAM1();
        voCostCenter = amLov.getXxGamMaCostCenterByPersonIdLovVO1();

        //Ejecuta la busqueda del cost center
        voCostCenter.setCostCenterByPersonIdVC(employeId, sType, costCenter);
        voCostCenter.executeQuery();

        rowActual = voCostCenter.first();
        //Verifica si tiene valor
        if (rowActual == null)
            return null;

        //Obtiene y regresa la respuesta
        sCostCenterDsc = (String)rowActual.getAttribute("Segment3");
        return sCostCenterDsc;
    }

    /**
     * Obntiene El virtual card del General actual
     * @return Oficina de boletos
     */
    public String findVirtualCard() {
        String virtualCard = null;
        XxGamMaGeneralReqVORowImpl voXxGamMaGeneralReq = 
            (XxGamMaGeneralReqVORowImpl)getCurrentRow();
        virtualCard = voXxGamMaGeneralReq.getVirtualCard();
        return virtualCard;
    }


    /**
     * Obntiene El virtual card del General actual
     * @return Id de empleado
     */
    public Number findEmployeeId() {
        Number employeeId = null;
        XxGamMaGeneralReqVORowImpl voXxGamMaGeneralReq = 
            (XxGamMaGeneralReqVORowImpl)getCurrentRow();
        employeeId = voXxGamMaGeneralReq.getEmployeeId();
        return employeeId;
    }

    /**
     * Obntiene el id de la solicitud de anticipo empleado o franquicia
     * @return Id de la solicitud
     */
    public Number requestAdvId() {
        Number requestId = null;
        XxGamMaGeneralReqVORowImpl voXxGamMaGeneralReq = 
            (XxGamMaGeneralReqVORowImpl)getCurrentRow();
        requestId = voXxGamMaGeneralReq.getId();
        return requestId;
    }

    /**
     * Obtiene el id del aprobador de la solicitud de anticipo o franquicia
     * @return Id de aprobador
     */
    public Number findApproverId() {
        Number approverId = null;
        XxGamMaGeneralReqVORowImpl voXxGamMaGeneralReq = 
            (XxGamMaGeneralReqVORowImpl)getCurrentRow();
        approverId = voXxGamMaGeneralReq.getApproverId();
        return approverId;
    }


    /**
     * Obntiene en Status de general req
     * @return el folio del ticket
     */
    public String findStatusGeneral() {
        String status = null;
        XxGamMaGeneralReqVORowImpl voXxGamMaGeneralReq = 
            (XxGamMaGeneralReqVORowImpl)getCurrentRow();
        if (voXxGamMaGeneralReq.getTipoSolicitud() != null && 
            voXxGamMaGeneralReq.getTipoSolicitud().equals(XxGamConstantsUtil.REQUEST_TYPE_ADVANCE))
            status = voXxGamMaGeneralReq.getStatusRequest();
        else if (voXxGamMaGeneralReq.getTipoSolicitud() != null && 
                 voXxGamMaGeneralReq.getTipoSolicitud().equals(XxGamConstantsUtil.REQUEST_TYPE_FRANCHISE))
            status = voXxGamMaGeneralReq.getStatusFranchise();
        return status;
    }

    /**
     * Obtiene el tipo de solicitud de anticipo
     * @return devuelve valor cadena del tipo de solicitud
     */
    public String getRequestType() {
        String requestType = null;
        XxGamMaGeneralReqVORowImpl voXxGamMaGeneralReq = 
            (XxGamMaGeneralReqVORowImpl)getCurrentRow();
        if (voXxGamMaGeneralReq != null) {
            requestType = voXxGamMaGeneralReq.getTipoSolicitud();
        }
        return requestType;
    }


    /**
     * Obntiene en Status de general req
     * @return el folio del ticket
     */
    public Number getRequestId() {
        Number requestId = null;
        XxGamMaGeneralReqVORowImpl voXxGamMaGeneralReq = 
            (XxGamMaGeneralReqVORowImpl)getCurrentRow();
        requestId = voXxGamMaGeneralReq.getId();
        return requestId;
    }


    /**Gets the bind variable value for pUserId
     */
    public Number getpUserId() {
        return (Number)getNamedWhereClauseParam("pUserId");
    }

    /**Sets <code>value</code> for bind variable pUserId
     */
    public void setpUserId(Number value) {
        setNamedWhereClauseParam("pUserId", value);
    }

    /**
     * Obtiene el id del aprobador Alterno de la solicitud de anticipo o franquicia
     * @return Id de aprobador Alterno
     */
    public

    Number findApproverAltId() {
        Number approverAltId = null;
        XxGamMaGeneralReqVORowImpl voXxGamMaGeneralReq = 
            (XxGamMaGeneralReqVORowImpl)getCurrentRow();
        approverAltId = voXxGamMaGeneralReq.getApproverAltId();
        return approverAltId;
    }

    /**
     * Copia el detalle de los registros para la informacion de pasajeros 
     *
     * @param iterBase Iterador base.
     * @param iterNuevo Iterador nuevo.
     */
    private

    void addRequestPasajerosInfo(RowIterator iterBase, RowIterator iterNuevo, 
                                 boolean isFranchise) {
        //Valida nulidad 
        if ((iterBase == null) || (iterNuevo == null) || 
            (iterBase.getRowCount() == 0)) {
            return;
        } else {
            //declaracion de los recursos
            XxGamMaPasajerosInfoVORowImpl rowSeleccionado = null;
            XxGamMaPasajerosInfoVORowImpl rowNuevo = null;

            try {

                //Itera sobre las solicitudes de boletos de avion
                while (iterBase.hasNext()) {

                    rowSeleccionado = 
                            (XxGamMaPasajerosInfoVORowImpl)iterBase.next();
                    if (rowSeleccionado != null) {
                        rowNuevo = 
                                getPasajerosInfo(rowSeleccionado, iterNuevo, isFranchise);
                        iterNuevo.insertRow(rowNuevo);
                    }
                }
            } catch (Exception exception) {
                if (getDBTransaction() != null) {
                    getDBTransaction().rollback();
                }
                //Propaga la excepcion generada
                throw new OAException(exception.getMessage(), 
                                      OAException.ERROR);
            }

        }
    }

    /**
     * Obtiene el registro de la informacion de empleados para  las reservaciones de vuelo.
     *
     * @param rowBase Row a copiar.
     * @return registro nuevo.
     */
    private

    XxGamMaPasajerosInfoVORowImpl getPasajerosInfo(XxGamMaPasajerosInfoVORowImpl rowBase, 
                                                   RowIterator iterNuevo, 
                                                   boolean isFranchise) {
        XxGamModAntAMImpl amXxGamModAntAM = null;
        XxGamMaPasajerosInfoVOImpl PasajerosInfoVOImpl = null;
        XxGamMaPasajerosInfoVORowImpl PasajerosInfoVORowImpl = null;
        amXxGamModAntAM = (XxGamModAntAMImpl)getApplicationModule();
        //Verifica nulidad
        if (amXxGamModAntAM == null) {
            return null;
        } else {

            //Obtiene el nuevo registro
            try {
                if (isFranchise) {
                    PasajerosInfoVOImpl = 
                            amXxGamModAntAM.getXxGamMaPasajerosInfoVO4();
                } else {
                    //null;
                    PasajerosInfoVOImpl = 
                            amXxGamModAntAM.getXxGamMaPasajerosInfoVO4();
                }

                PasajerosInfoVORowImpl = 
                        PasajerosInfoVOImpl.getPasajerosInfo(rowBase, 
                                                             iterNuevo);

            } catch (Exception exception) {

                //Propaga la excepcion
                throw new OAException("No es posible duplicar el registro de vuelos", 
                                      OAException.ERROR);
            }

            //Regresa la respuesta
            return PasajerosInfoVORowImpl;

        }
    }


}
