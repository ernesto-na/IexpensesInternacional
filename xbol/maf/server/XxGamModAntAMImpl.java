package xxgam.oracle.apps.xbol.maf.server;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.OARow;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jdbc.internal.OracleCallableStatement;

import oracle.xml.parser.v2.XMLNode;

import xxgam.oracle.apps.inv.moveorder.lov.server.xXgamInvEmpleadosVOImpl;
import xxgam.oracle.apps.inv.moveorder.lov.server.xXgamInvEmpleadosVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaApproverHierarchyLovVOImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaApproverHierarchyLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaBenefitsLovVOImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaCategoriaGastoLovVOImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaCategoriaGastoLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaCostCenterByPersonIdLovVOImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaCostCenterByPersonIdLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaCurrencyConversionLovVOImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaCurrencyConversionLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaCurrencyLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaLookupGenericLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaPersonDataLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaRelationShipLovVoImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaResponsibilityAppLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaSupervisorLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaTemplatePaymentFlexLovVOImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaTemplatePaymentFlexLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaTemplatePaymentLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaTicketOfficeLovVOImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaTypeEmissionLovVOImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaTypePaymentLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamMaUserDataLovVORowImpl;
import xxgam.oracle.apps.xbol.maf.lov.server.XxGamModAntLovAMImpl;
import xxgam.oracle.apps.xbol.maf.server.common.XxGamModAntAM;
import xxgam.oracle.apps.xbol.maf.utils.XxGamAOLMessages;
import xxgam.oracle.apps.xbol.maf.utils.XxGamConstantsUtil;
import xxgam.oracle.apps.xbol.maf.utils.XxGamMAnticiposUtil;
import xxgam.oracle.apps.xbol.maf.utils.XxGamMAnticiposUtil2;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxGamModAntAMImpl extends OAApplicationModuleImpl implements XxGamModAntAM {
    /**This is the default constructor (do not remove)
     */
    public XxGamModAntAMImpl() {
    }

    /**Container's getter for XxGamMaFlightInf0VO1
     */
    public XxGamMaFlightInf0VOImpl getXxGamMaFlightInf0VO1() {
        return (XxGamMaFlightInf0VOImpl)findViewObject("XxGamMaFlightInf0VO1");
    }

    /**Container's getter for XxGamMaGeneralReqVO1
     */
    public XxGamMaGeneralReqVOImpl getXxGamMaGeneralReqVO1() {
        return (XxGamMaGeneralReqVOImpl)findViewObject("XxGamMaGeneralReqVO1");
    }

    /**Container's getter for XxGamMaPaymentReqVO1
     */
    public XxGamMaPaymentReqVOImpl getXxGamMaPaymentReqVO1() {
        return (XxGamMaPaymentReqVOImpl)findViewObject("XxGamMaPaymentReqVO1");
    }

    /**Container's getter for XxGamMaTicketPVO1
     */
    public XxGamMaTicketPVOImpl getXxGamMaTicketPVO1() {
        return (XxGamMaTicketPVOImpl)findViewObject("XxGamMaTicketPVO1");
    }

    /**Container's getter for XxGamMaTicketPVO2
     */
    public XxGamMaTicketPVOImpl getXxGamMaTicketPVO2() {
        return (XxGamMaTicketPVOImpl)findViewObject("XxGamMaTicketPVO2");
    }

    /**Container's getter for XxGamMaPaymentReqVO2
     */
    public XxGamMaPaymentReqVOImpl getXxGamMaPaymentReqVO2() {
        return (XxGamMaPaymentReqVOImpl)findViewObject("XxGamMaPaymentReqVO2");
    }

    /**Container's getter for XxGamMaFlightInf0VO2
     */
    public XxGamMaFlightInf0VOImpl getXxGamMaFlightInf0VO2() {
        return (XxGamMaFlightInf0VOImpl)findViewObject("XxGamMaFlightInf0VO2");
    }

    /**Container's getter for XxgamMaTicketPXxgamMFk1Link1
     */
    public ViewLinkImpl getXxgamMaTicketPXxgamMFk1Link1() {
        return (ViewLinkImpl)findViewLink("XxgamMaTicketPXxgamMFk1Link1");
    }

    /**Container's getter for XxgamMaPaymentReqXxgaFk1Link1
     */
    public ViewLinkImpl getXxgamMaPaymentReqXxgaFk1Link1() {
        return (ViewLinkImpl)findViewLink("XxgamMaPaymentReqXxgaFk1Link1");
    }

    /**Container's getter for XxgamMaFlightInf0XxgaFk1Link1
     */
    public ViewLinkImpl getXxgamMaFlightInf0XxgaFk1Link1() {
        return (ViewLinkImpl)findViewLink("XxgamMaFlightInf0XxgaFk1Link1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("xxgam.oracle.apps.xbol.maf.server", 
                                             "XxGamModAntAMLocal");
    }

    /**
     * Ejecuta la operaciÃ³n commit.
     */
    public void executeCommit() {

        //Ejecuta el commit
        getDBTransaction().commit();
    }

    /**
     * Ejecuta la operaciÃ³n rollback.
     */
    public void executeRollback() {

        //Ejecuta el commit
        getDBTransaction().rollback();
    }

    /**Container's getter for XxGamMaTicketPVO3
     */
    public XxGamMaTicketPVOImpl getXxGamMaTicketPVO3() {
        return (XxGamMaTicketPVOImpl)findViewObject("XxGamMaTicketPVO3");
    }

    /**Container's getter for XxGamMaFlightInf0VO3
     */
    public XxGamMaFlightInf0VOImpl getXxGamMaFlightInf0VO3() {
        return (XxGamMaFlightInf0VOImpl)findViewObject("XxGamMaFlightInf0VO3");
    }

    /**Container's getter for XxGamMaTicketPToXxGamMaPaymentReqVL1
     */
    public ViewLinkImpl getXxGamMaTicketPToXxGamMaPaymentReqVL1() {
        return (ViewLinkImpl)findViewLink("XxGamMaTicketPToXxGamMaPaymentReqVL1");
    }

    /**Container's getter for XxGamMaFlightInf0ToXxGamMaTicketPVL1
     */
    public ViewLinkImpl getXxGamMaFlightInf0ToXxGamMaTicketPVL1() {
        return (ViewLinkImpl)findViewLink("XxGamMaFlightInf0ToXxGamMaTicketPVL1");
    }

    /**Container's getter for XxGamAdvanceRequestVO1
     */
    public XxGamAdvanceRequestVOImpl getXxGamAdvanceRequestVO1() {
        return (XxGamAdvanceRequestVOImpl)findViewObject("XxGamAdvanceRequestVO1");
    }

    /**
     * Ejecuta el query de solicitud de anticipo.
     * @param nUserId
     * @param pageContext
     * @param webBean
     */
    public void executeQueryAdvanceReq(Number nUserId, 
                                       OAPageContext pageContext, 
                                       OAWebBean webBean) {

        //Verifica nulidad
        if (nUserId == null)
            return;

        //Obtiene la VO de solicitud de anticipo.
        XxGamAdvanceRequestVOImpl voXxGamAdvanceRequestVO1 = null;
        XxGamAdvanceRequestVOImpl voXxGamAdvanceRequestVO2 = null;


        voXxGamAdvanceRequestVO1 = getXxGamAdvanceRequestVO1();
        voXxGamAdvanceRequestVO2 = getXxGamAdvanceRequestVO2();


        //Verifica nulidad y ejecuta el query de solicitud de anticipo
        if (voXxGamAdvanceRequestVO2 != null) {
            System.out.println("Capa AM voXxGamAdvanceRequestVO2  executeQueryAdvanceReq op1");
            voXxGamAdvanceRequestVO2.executeQueryAdvanceReq(nUserId, "op1", 
                                                            pageContext, 
                                                            webBean);
        }
        //Verifica nulidad y ejecuta el query de solicitud de anticipo
        if (voXxGamAdvanceRequestVO1 != null) {
            System.out.println("Capa AM voXxGamAdvanceRequestVO2  executeQueryAdvanceReq op2");
            voXxGamAdvanceRequestVO1.executeQueryAdvanceReq(nUserId, "op2", 
                                                            pageContext, 
                                                            webBean);
        }
    }


    /**Container's getter for XxGamModAntLovAM1
     */
    public ApplicationModuleImpl getXxGamModAntLovAM1() {
        return (ApplicationModuleImpl)findApplicationModule("XxGamModAntLovAM1");
    }

    /**
     * Crea una nueva solicitud de anticipo
     * @return devuelve true si el row se creo y false en caso contrario
     */
    public boolean createNewPaymentRequest() {
        boolean isSuccess = false;
        System.out.println("Inicia createNewPaymentRequest");
        OAViewObject vo = getXxGamMaGeneralReqVO1();
        System.out.println("Obtiene vo");
        if (vo != null) {
        System.out.println("vo no es null");
        
            try {
                if (!vo.isPreparedForExecution()) {
                    System.out.println("Vo esta lista para executar.");
                    vo.executeQuery();
                    System.out.println("Vo executada.");
                }

                Row row = vo.createRow();
                System.out.println("Creando Row");
                if (row != null) {
                    vo.insertRow(row);
                    row.setNewRowState(Row.STATUS_INITIALIZED);
                    System.out.println("Row incializada.");
                    vo.setCurrentRow(row);
                    isSuccess = true;
                    System.out.println("Retorna ok");
                }
            } catch (Exception e) {
                isSuccess = false;
                System.out.println("Retorna false.");
            }
            
        
        }
        return isSuccess;
    }

    /**
     * Crea un nuevo registro para el detalle de la solicitud de anticipo
     */
    public void createNewPaymentRequestDetail() {
        OAViewObject vo = getXxGamMaPaymentReqVO2();

        if (vo != null) {
            if (vo.isPreparedForExecution()) {
                vo.executeQuery();
            }

            Row row = vo.createRow();
            row.setNewRowState(Row.STATUS_INITIALIZED);
            vo.insertRow(row);
            vo.setCurrentRow(row);
        }
    }

    /**
     * Crea un nuevo registro para la solicitud de boleto de avion de una solicitud
     * de anticipo
     */
    public XxGamMaTicketPVORowImpl createNewTicketFromPaymentAdv(XxGamMaPaymentReqVORowImpl detailRow) {

        OAViewObject vo = getXxGamMaTicketPVO3();
        XxGamMaTicketPVORowImpl ticketRowTo = null;

        if (vo != null) {
            if (!vo.isPreparedForExecution()) {
                vo.executeQuery();
            }

            RowIterator detailIter = detailRow.getXxGamMaTicketPVO();
            if (detailIter != null) {
                Row row = detailIter.createRow();
                row.setNewRowState(Row.STATUS_INITIALIZED);
                detailIter.insertRow(row);
                detailIter.setCurrentRow(row);

                ticketRowTo = (XxGamMaTicketPVORowImpl)row;
            }
        }
        return ticketRowTo;
    }

    /**
     * Crea un nuevo registro para los vuelos de la solicitud de avion de una solicitud
     * de anticipo
     */
    public void createNewFlightFromPaymentAdv(RowIterator iterTicket) {
        OAViewObject vo = getXxGamMaFlightInf0VO3();

        if (vo != null) {
            if (!vo.isPreparedForExecution()) {
                vo.executeQuery();
            }

            Row row = iterTicket.createRow();
            row.setNewRowState(Row.STATUS_INITIALIZED);
            iterTicket.insertRow(row);
            iterTicket.setCurrentRow(row);
        }
    }

    public void setCodeCombinationIdToDetail() {

        XxGamMaPaymentReqVOImpl detailImpl = getXxGamMaPaymentReqVO2();
        if (detailImpl != null) {
            XxGamMaPaymentReqVORowImpl detailRow = 
                (XxGamMaPaymentReqVORowImpl)detailImpl.getCurrentRow();
            if (detailRow != null) {

                XxGamMaGeneralReqVOImpl generalImpl = 
                    getXxGamMaGeneralReqVO1();
                if (generalImpl != null) {
                    XxGamMaGeneralReqVORowImpl generalRow = 
                        (XxGamMaGeneralReqVORowImpl)generalImpl.getCurrentRow();
                    if (generalRow != null) {
                        Number codeCombinationId = null;
                        codeCombinationId = generalRow.getCostCenter();
                        if (codeCombinationId != null) {
                            detailRow.setCodeCombinationId(codeCombinationId);
                        }
                    }
                }
            }
        }
    }

    /**
     * Inicializa el registro de una nueva solicitud de anticipos, asignando los datos del
     * solicitante y configurando las listas de valores
     * @param userName contiene el nombre de usuario
     * @param responsibilityId contiene el id de la responsabilidad
     * @return devuelve true cuando todas la validaciones fueron correctas
     */
    public boolean initNewPaymentRequest(String userName, 
                                         Number responsibilityId, 
                                         OAPageContext pageContext) {
        boolean isInitSuccess = false;
        System.out.println("Comienza Capa App Model initNewPaymentRequest");
        System.out.println("Informacion Capa App Model initNewPaymentRequest orgNameEmp -->" + 
                           pageContext.getTransactionValue("orgNameEmp"));

        String orgNameEmp = 
            (String)pageContext.getTransactionValue("orgNameEmp");
        String orgShortNameEmp = orgNameEmp.substring(0, 2);

        if (userName != null && responsibilityId != null) {
            //Instancia AM de LOV
            XxGamModAntLovAMImpl amLov = null;
            amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

            XxGamMaUserDataLovVORowImpl userDataFound = null;
            if (amLov != null) {
                userDataFound = amLov.getUserDataByUserName(userName);
            }

            String responsibility = null;
            if (amLov != null) {
                XxGamMaResponsibilityAppLovVORowImpl respRow = null;
                respRow = amLov.getResponsibilityAppById(responsibilityId);
                if (respRow != null) {
                    responsibility = 
                            respRow.getResponsibilityKey().toUpperCase().trim();
                }
            }

            boolean isFranchise = false;
            String vcLookupType = null;
            if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
                vcLookupType = 
                        XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_COMISION;
            } else {
                if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility)) {
                    vcLookupType = 
                            XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_FRANQUICIAS;
                    isFranchise = true;
                }
            }

            /** ****************************************************************************** **/
            /** Se agrega los ifs para manipular las organizaciones que no sean 02_AEROMEXICO**/
            /** ****************************************************************************** **/
            if (orgShortNameEmp != null && (orgShortNameEmp.equals("02"))) {
                System.out.println("Comienza para una organizacion -->" + 
                                   orgShortNameEmp);
                // Comienza  Lineas que aplican para 02_AEROMEXICO

                if (userDataFound != null && vcLookupType != null) {
                    if (userDataFound.getPersonId() != null) {
                        if (getXxGamMaGeneralReqVO1() != null) {
                            boolean isCreate = true;
                            //Crea un nuevo registro de solicitud de anticipo para informacion general
                            isCreate = createNewPaymentRequest();

                            if (isCreate) {
                                XxGamMaGeneralReqVORowImpl generalReqRow = 
                                    null;
                                //Obtiene el registro actual de los datos generales de la nueva solicitud
                                generalReqRow = 
                                        (XxGamMaGeneralReqVORowImpl)getXxGamMaGeneralReqVO1().getCurrentRow();
                                if (generalReqRow != null) {
                                    //Asigna el id del solicitante
                                    generalReqRow.setEmployeeId(userDataFound.getPersonId());
                                    //Asigna el nombre completo del solicitante
                                    if (userDataFound.getFullName() != null) {
                                        generalReqRow.setFullNameEmployee(userDataFound.getFullName());
                                    } else {
                                        generalReqRow.setFullNameEmployee(userDataFound.getFirstName() + 
                                                                          " " + 
                                                                          userDataFound.getLastName());
                                    }

                                    if (generalReqRow.getEmployeeId() != 
                                        null && 
                                        generalReqRow.getFullNameEmployee() != 
                                        null) {
                                        //Configura la lista de valores para el centro de costos
                                        isInitSuccess = 
                                                amLov.initCostCenter(userDataFound.getPersonId(), 
                                                                     vcLookupType);
                                        XxGamMaCostCenterByPersonIdLovVOImpl costCenterImpl = 
                                            amLov.getXxGamMaCostCenterByPersonIdLovVO1();
                                        if (costCenterImpl != null && 
                                            isInitSuccess) {
                                            XxGamMaCostCenterByPersonIdLovVORowImpl costCenterRow = 
                                                (XxGamMaCostCenterByPersonIdLovVORowImpl)costCenterImpl.first();
                                            if (costCenterRow != null) {
                                                if (costCenterRow.getCodeCombinationId() != 
                                                    null) {
                                                    generalReqRow.setCostCenter(costCenterRow.getCodeCombinationId());
                                                    if (costCenterRow.getSegment3() != 
                                                        null) {
                                                        generalReqRow.setCostCenterDesc(costCenterRow.getSegment3());
                                                    }
                                                    if (costCenterRow.getVcMeaning() != 
                                                        null) {
                                                        generalReqRow.setVirtualCard(costCenterRow.getVcMeaning());
                                                    }
                                                    if (costCenterRow.getCurrencyCode() != 
                                                        null) {
                                                        generalReqRow.setCurrencyCode(costCenterRow.getCurrencyCode());
                                                    }
                                                    if (costCenterRow.getCurrencyName() != 
                                                        null) {
                                                        generalReqRow.setCurrencyDesc(costCenterRow.getCurrencyName());
                                                    }
                                                    /// Agregado para llenar el campo de Unidad Operativa 08/06/2015
                                                    if (null != orgNameEmp) {
                                                        generalReqRow.setOperatingUnit(orgNameEmp);
                                                    }
                                                }
                                            } else { // Error en el Centro de Costos BY DIHU   13 Octubre 2014
                                                if (!isInitSuccess)
                                                    pageContext.putParameter("ErrorEspecifico", 
                                                                             " CosC #3 "); //Add by dihu 16 Octubre 2014 Error al configurar la lista de Valores para el Centro de Costos                        
                                            }

                                            amLov.initPurposeLov();
                                            System.out.println("Para 02_Aeromexico Se comentan ya que las listas de valores se procesan en el metodoProcessFormRequest " + 
                                                               "\n amLov.initCostCenterFlex(vcLookupType);" + 
                                                               "\n amLov.initPurposeLov();");

                                            // isInitSuccess = initTemplatePayment();
                                            isInitSuccess = true;
                                            if (!isInitSuccess) // Error en la plantilla by DIHU 13 Octubre 2014
                                                pageContext.putParameter("ErrorEspecifico", 
                                                                         " TemPay #1");


                                        } else { // Error en el Centro de Costos BY DIHU 13 Octubre 2014   
                                            if (!isInitSuccess)
                                                pageContext.putParameter("ErrorEspecifico", 
                                                                         " CosC #1 "); //Add by dihu 16 Octubre 2014 Error al configurar la lista de Valores para el Centro de Costos
                                            else if (costCenterImpl != null)
                                                pageContext.putParameter("ErrorEspecifico", 
                                                                         " CosC #2 "); //Add by dihu 16 Octubre 2014 Error al configurar la lista de Valores para el Centro de Costos
                                            //pageContext.putParameter("ErrorEspecifico","Error No se encontro centro de Costos");
                                        }
                                    }
                                    if (isFranchise) {
                                        if (generalReqRow.getFullNameEmployee() != 
                                            null && 
                                            generalReqRow.getFullNameApprover() != 
                                            null && 
                                            generalReqRow.getCostCenterDesc() != 
                                            null && 
                                            generalReqRow.getVirtualCard() != 
                                            null && isInitSuccess) {
                                            isInitSuccess = true;
                                        }
                                    } else {
                                        if (generalReqRow.getFullNameEmployee() != 
                                            null && 
                                            generalReqRow.getFullNameApprover() != 
                                            null && 
                                            generalReqRow.getCostCenterDesc() != 
                                            null && 
                                            generalReqRow.getVirtualCard() != 
                                            null && isInitSuccess) {
                                            isInitSuccess = true;
                                        }
                                    }
                                }
                            } else {
                                System.out.println("EXCEPTION  al tratar de crear un registro para el View Object XxGamGeneralReq Capa AM");
                            }
                        } else {
                            System.out.println("EXCEPTION  al tratar de recuperar el View Object XxGamGeneralReq Capa AM");
                            pageContext.putParameter("ErrorEspecifico", 
                                                     " Other #1 "); //Add by dihu 17 Octubre 2014 Error No fue posible crear el registro.
                        }
                    } else {
                        System.out.println("EXCEPTION  al tratar de recuperar el personId de XxGamMaData");
                        pageContext.putParameter("ErrorEspecifico", 
                                                 " User #2 "); //Add by dihu 17 Octubre 2014 Error No se encontro PersonId
                    }
                } else {
                    System.out.println("EXCEPTION al recuperar informacion del empleado");
                    if (userDataFound == null)
                        pageContext.putParameter("ErrorEspecifico", 
                                                 " User #1 "); //Add by dihu 17 Octubre 2014 Error No se encontro datos en la Lista de Valores correspondientes al usuario
                    else if (vcLookupType == null)
                        pageContext.putParameter("ErrorEspecifico", 
                                                 " VirCard #1 "); //Add by dihu 17 Octubre 2014 Error No Fue posible encontran el Nombre de la Tarjeta Virual (lookup).
                }

                // Finaliza Lineas que aplican para 02_AEROMEXICO
            } else if (orgShortNameEmp != null && 
                       !(orgShortNameEmp.equals("02"))) {
                System.out.println("Comienza para una organizacion -->" + 
                                   orgShortNameEmp);
                if (userDataFound != null && vcLookupType != null) {
                    if (userDataFound.getPersonId() != null) {
                        if (getXxGamMaGeneralReqVO1() != null) {
                            boolean isCreate = true;
                            //Crea un nuevo registro de solicitud de anticipo para informacion general
                            isCreate = createNewPaymentRequest();

                            if (isCreate) {
                                XxGamMaGeneralReqVORowImpl generalReqRow = 
                                    null;
                                //Obtiene el registro actual de los datos generales de la nueva solicitud
                                generalReqRow = 
                                        (XxGamMaGeneralReqVORowImpl)getXxGamMaGeneralReqVO1().getCurrentRow();
                                if (generalReqRow != null) {
                                    //Asigna el id del solicitante
                                    generalReqRow.setEmployeeId(userDataFound.getPersonId());
                                    //Asigna el nombre completo del solicitante
                                    if (userDataFound.getFullName() != null) {
                                        generalReqRow.setFullNameEmployee(userDataFound.getFullName());
                                    } else {
                                        generalReqRow.setFullNameEmployee(userDataFound.getFirstName() + 
                                                                          " " + 
                                                                          userDataFound.getLastName());
                                    }

                                    if (generalReqRow.getEmployeeId() != 
                                        null && 
                                        generalReqRow.getFullNameEmployee() != 
                                        null) {
                                        //Configura la lista de valores para el centro de costos
                                        System.out.println("Comentado por GnosisHCM isInitSuccess = amLov.initCostCenter(userDataFound.getPersonId(),vcLookupType);" + 
                                                           "\n Ya que el formulario se llenara a partir de valores obtenidos por un nuevo procedimiento Almacenado");

                                    }

                                    Map mapMaCostCenterByPersonId = 
                                        new HashMap(); //Porque me encuentro en la capa AM
                                        mapMaCostCenterByPersonId = 
                                            XxGamMAnticiposUtil2.getMapMaCostCenterByPersonId(responsibility, 
                                                                                              userDataFound.getPersonId(), 
                                                                                              pageContext, 
                                                                                              (OADBTransaction)getTransaction(), 
                                                                                              orgNameEmp);


                                    String localSegment3 = null;
                                    Number localCodComID = null;
                                    String localCurCode = null;
                                    String localCurName = null;
                                    String localVclDesc = null;
                                    String localVclType = null;
                                    String localVclCode = null;

                                    if (mapMaCostCenterByPersonId != null) {

                                        localSegment3 = 
                                                (String)mapMaCostCenterByPersonId.get("segment3");
                                        localCodComID = 
                                                (Number)mapMaCostCenterByPersonId.get("codCombId");
                                        localCurCode = 
                                                (String)mapMaCostCenterByPersonId.get("curCode");
                                        localCurName = 
                                                (String)mapMaCostCenterByPersonId.get("curName");
                                        localVclDesc = 
                                                (String)mapMaCostCenterByPersonId.get("vclDesc");
                                        localVclType = 
                                                (String)mapMaCostCenterByPersonId.get("vclType");
                                        localVclCode = 
                                                (String)mapMaCostCenterByPersonId.get("vclCode");

                                        if (((Boolean)mapMaCostCenterByPersonId.get("isInitSuccess")).booleanValue()) {

                                            System.out.println(" Variable para una descripcion tipo CentroDeCostos-Ubicacion localSegment3-->" + 
                                                               localSegment3 + 
                                                               "\n Variable para el CodeCombinationID del CentroDeCostos localCodComID-->" + 
                                                               localCodComID + 
                                                               "\n localCurCode-->" + 
                                                               localCurCode + 
                                                               "\n localCurName-->" + 
                                                               localCurName + 
                                                               "\n Variable para la targeta Virtual que se encuentra en la desc de los lookups configurables localVclDesc-->" + 
                                                               localVclDesc + 
                                                               "\n Variable para El tipo del LookUp que corresponde deacuerdo a CompaniaVsResponsabilidad localVclType-->" + 
                                                               localVclType + 
                                                               "\n localVclCode-->" + 
                                                               localVclCode);


                                            generalReqRow.setCostCenter(localCodComID);
                                            generalReqRow.setCostCenterDesc(localSegment3);
                                            generalReqRow.setVirtualCard(localVclDesc);
                                            generalReqRow.setCurrencyCode(localCurCode);
                                            generalReqRow.setCurrencyDesc(localCurName);
                                            /// Agregado para llenar el campo de Unidad Operativa 08/06/2015
                                            if (null != orgNameEmp) {
                                                generalReqRow.setOperatingUnit(orgNameEmp);
                                            }

                                            String paramLocalVclType = null;
                                            paramLocalVclType = 
                                                    (String)pageContext.getTransactionValue("paramVclType");

                                            if (paramLocalVclType == null) {
                                                pageContext.putTransactionValue("paramVclType", 
                                                                                localVclType);
                                            } else if (paramLocalVclType != 
                                                       null && 
                                                       !(paramLocalVclType.equals(""))) {
                                                pageContext.putTransactionValue("paramVclType", 
                                                                                paramLocalVclType);
                                            }

                                            isInitSuccess = true;

                                            /**  Se comentan ya que las listas de valores se procesan en el metodoProcessFormRequest **/
                                            System.out.println("paramLocalVclType-->" + 
                                                               paramLocalVclType);
                                            System.out.println("localVclType-->" + 
                                                               localVclType);
                                            amLov.initCostCenterFlex(localVclType);


                                        } // END  if(((Boolean)mapMaCostCenterByPersonId.get("isInitSuccess")).booleanValue()){     
                                    } // END if(mapMaCostCenterByPersonId!=null){          
                                } // END if (generalReqRow != null) {  
                            } // END if (isCreate) {
                        } // END if (getXxGamMaGeneralReqVO1() != null) {
                    } // END if (userDataFound.getPersonId() != null) {
                } // END if (userDataFound != null && vcLookupType != null) {  

            } // END else if(orgShortNameEmp!=null&&!(orgShortNameEmp.equals("02"))){

        } // END if (userName != null && responsibilityId != null) {

        return isInitSuccess;
    }

    /**
     * Duplica la solicitud seleccionada.
     * @param idRequest Clave de la solicitud.
     */
    public void duplicateRequest(OAPageContext pageContext, OAWebBean webBean, 
                                 Number idRequest) {

        //Verifica nulidad
        if (idRequest == null)
            return;

        //Obtiene la view object de solicitud general
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = null;
        voXxGamMaGeneralReq = getXxGamMaGeneralReqVO1();

        //Dulpica los registros.
        voXxGamMaGeneralReq.searchRequests(null, null, idRequest);
        voXxGamMaGeneralReq.duplicateRequest();
    }

    /**Container's getter for XxGamAdvanceRequestVO2
     */
    public XxGamAdvanceRequestVOImpl getXxGamAdvanceRequestVO2() {
        return (XxGamAdvanceRequestVOImpl)findViewObject("XxGamAdvanceRequestVO2");
    }

    /**
     * Ejecuta el procedimiento para reserva de fondos del registro actual de la solicitud de anticipo
     * @return devuelve true en caso de ejecucion exitosa o false en caso contrario
     */
    public int getReserveFunds() {

        int intStatus = -1;
        //Declara los recursos
        XxGamMaGeneralReqVOImpl voGeneralReq = null;
        XxGamMaGeneralReqVORowImpl rowGeneralReq = null;
        Number requestId = null;
        Number costCenter = null;
        String fullNameEmployee = null;
        Number templateId = null;
        //Number paymentType = null; 

        //Obtiene la implementaciÃ³n
        voGeneralReq = getXxGamMaGeneralReqVO1();
        if (voGeneralReq != null) {
            rowGeneralReq = 
                    (XxGamMaGeneralReqVORowImpl)voGeneralReq.getCurrentRow();

            if (rowGeneralReq != null) {
                requestId = rowGeneralReq.getId();
                costCenter = rowGeneralReq.getCostCenter();
                fullNameEmployee = rowGeneralReq.getFullNameEmployee();
                templateId = rowGeneralReq.getTemplatePayment();
            }
        }

        intStatus = 
                callProcedureReserveFunds(requestId, costCenter, XxGamConstantsUtil.TYPE_PROCEDURE_P);

        /***********************************************************************************
         *Se remueve a un nivel mas arriba para traer un pageContext
        boolean booleanStatus = false;
        booleanStatus = XxGamMAnticiposUtil2.LaunchWfReservarFondos(requestId
                                                                   ,costCenter
                                                                   ,getOADBTransaction()
                                                                   ,((OADBTransactionImpl)this.getTransaction())
                                                                   ,fullNameEmployee);
        **********************************************************************************/

        return intStatus;
    }

    /**
     * Cambia el estatus de la solicitud
     * @param idSolicitud
     * @param sStatus
     * @param costCenter
     * @param type
     * @return devuelve true cuando todas las validaciones fueron correctas
     */
    public boolean setStatusRequestReverseFunds(Number idSolicitud, 
                                                String sStatus, 
                                                Number costCenter, 
                                                String type) {

        boolean isSuccess = false;
        //Verifica nulidad
        if (idSolicitud == null || sStatus == null)
            return isSuccess;


        //Obtiene la view object de solicitud general
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = null;
        voXxGamMaGeneralReq = getXxGamMaGeneralReqVO1();

        //Cambia el estatus de la solicitud.
        try {

            //Busca el current row.
            if (idSolicitud != null) {
                searchRequests(null, null, idSolicitud);
            }

            //Obtiene el current row
            XxGamMaGeneralReqVORowImpl rowActual = null;
            rowActual = 
                    (XxGamMaGeneralReqVORowImpl)voXxGamMaGeneralReq.getCurrentRow();

            int intStatus = 0;
            if (rowActual != null) {
                boolean isCalledProcedure = false;
                if (rowActual.getStatusRequest() != null) {
                    if (!XxGamConstantsUtil.EXPENSE_REPORT_STATUS_INPROGRESS.equals(rowActual.getStatusRequest()) && 
                        !XxGamConstantsUtil.DELETE.equals(rowActual.getStatusRequest())) {
                        isCalledProcedure = true;
                    }
                } else {
                    if (rowActual.getStatusFranchise() != null) {
                        if (!XxGamConstantsUtil.XXGAM_STATUS_FRANCHISE_INPROGRESS.equals(rowActual.getStatusFranchise()) && 
                            !XxGamConstantsUtil.DELETE.equals(rowActual.getStatusFranchise())) {
                            isCalledProcedure = true;
                        }
                    }
                }
                if (isCalledProcedure) {
                    intStatus = 
                            callProcedureReserveFunds(idSolicitud, costCenter, 
                                                      XxGamConstantsUtil.TYPE_PROCEDURE_R);
                }
            }

            if (intStatus == 0) {
                isSuccess = true;
            }

            if (isSuccess) {
                voXxGamMaGeneralReq.setStatusRequest(idSolicitud, sStatus);
            }
        } catch (Exception exception) {
            isSuccess = false;
        }
        return isSuccess;
    }

    /**
     * Ejecuta el procedimiento de inicializacion para crear el detalle de la solicitud de anticipo, configurando
     * cada linea de anticipo que contendra la solicitud de anticipos
     * @param templateId contiene el id de la plantilla de anticipo
     * @return devuelve true cuando todas las validaciones fueron correctas
     */
    public boolean initTypePaymentRequestDetail(Number templateId) {
        boolean isPaymentReqInitSucess = false;
        if (templateId != null) {
            //Instancia AM de LOV
            XxGamModAntLovAMImpl amLov = null;
            amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

            if (amLov.getXxGamMaTypePaymentLovVO1() != null) {
                amLov.getXxGamMaTypePaymentLovVO1().clearCache();
                amLov.getXxGamMaTypePaymentLovVO1().searchTypePaymentByTemplateId(templateId);

                if (amLov.getXxGamMaTypePaymentLovVO1().getRowCount() > 0) {
                    isPaymentReqInitSucess = true;
                }
            }
        }
        return isPaymentReqInitSucess;
    }

    /**
     * Ejecuta el procedimiento de inicializacion para editar el detalle de la solicitud de anticipo, configurando
     * cada linea de anticipo que contendra la solicitud de anticipos
     * @return Devuelve el tipo de moneda.
     */
    public String initEditPaymentRequestDetail() {

        String isPaymentReqInitSucess = "";

        XxGamModAntLovAMImpl amLov = null;
        amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

        XxGamMaGeneralReqVOImpl voGeneralReq = getXxGamMaGeneralReqVO1();

        if (voGeneralReq != null) {
            Row row = voGeneralReq.getCurrentRow();
            XxGamMaGeneralReqVORowImpl generalRow;
            if (row != null) {
                generalRow = (XxGamMaGeneralReqVORowImpl)row;
                if (generalRow != null) {

                    XxGamMaPaymentReqVOImpl voPaymentDetail = 
                        getXxGamMaPaymentReqVO2();
                    if (voPaymentDetail != null) {

                        RowSetIterator rowSetIter = 
                            voPaymentDetail.getRowSetIterator();
                        if (rowSetIter != null) {
                            rowSetIter.reset();
                            while (rowSetIter.hasNext()) {
                                Row rowDetail = rowSetIter.next();
                                XxGamMaPaymentReqVORowImpl paymentReqDetailRow = 
                                    (XxGamMaPaymentReqVORowImpl)rowDetail;
                                if (paymentReqDetailRow != null) {
                                    if (generalRow.getTemplatePayment() != 
                                        null & 
                                        paymentReqDetailRow.getTypePayment() != 
                                        null) {

                                        String typePaymentDesc = null;
                                        XxGamMaTypePaymentLovVORowImpl typePaymentRow = 
                                            amLov.getTypePaymentById(paymentReqDetailRow.getTypePayment(), 
                                                                     generalRow.getTemplatePayment());
                                        if (typePaymentRow != null) {
                                            if (typePaymentRow.getTypePaymentDesc() != 
                                                null) {
                                                typePaymentDesc = 
                                                        typePaymentRow.getTypePaymentDesc();
                                            }
                                        }
                                        paymentReqDetailRow.setTypePymentDesc(typePaymentDesc);

                                        String currencyDesc = null;
                                        isPaymentReqInitSucess = 
                                                paymentReqDetailRow.getCurrencyCode();
                                        XxGamMaCurrencyLovVORowImpl currencyDetailRow = 
                                            amLov.getCurrencyByCode(paymentReqDetailRow.getCurrencyCode());
                                        if (currencyDetailRow != null) {
                                            if (currencyDetailRow.getCurrencyName() != 
                                                null) {
                                                currencyDesc = 
                                                        currencyDetailRow.getCurrencyName();
                                                //System.out.println("currencyDesc: "+currencyDesc);         
                                            }
                                        }
                                        paymentReqDetailRow.setCurrencyCodeDesc(currencyDesc);
                                    }
                                }
                            }
                            rowSetIter.reset();
                        }
                    }
                }
            }
        }
        return isPaymentReqInitSucess;
    }

    /**
     * Establece el registro actual de la solicitud de anticipo por id
     * @param idRequest contiene el id de la solicitud de anticipo
     * @return devuelve false si la solicitud no es encontrada y verdadero si
     * la solicitud es encontrada
     */
    public boolean setCurrentRowPaymentReqById(Number idRequest) {
        boolean isFound = false;
        if (idRequest != null) {
            //Obtiene la view object de solicitud general
            XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = null;
            voXxGamMaGeneralReq = getXxGamMaGeneralReqVO1();

            if (voXxGamMaGeneralReq != null) {
                //Dulpica los registros.searchGeneralReq
                voXxGamMaGeneralReq.searchGeneralReq(idRequest);

                Row requestRow = voXxGamMaGeneralReq.getCurrentRow();
                if (requestRow != null) {
                    isFound = true;
                }
            }
        }
        return isFound;
    }

    /**
     * Asigna y configura los valores no basados de las VO relacionadas con
     * el registro de una solicitud de anticipos
     * @param responsibilityId contiene el id de la responsabilidad del usuario en sesion
     */
    public boolean setPaymentReqDescriptionsReadOnly(Number responsibilityId, 
                                                     OAPageContext pageContext, 
                                                     OAWebBean webBean) {

        boolean isSuccess = false; /// aqui  *********************
        String templatePaymentDesc = null;
        //Instancia AM de LOV
        XxGamModAntLovAMImpl amLov = null;
        amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

        XxGamMaGeneralReqVOImpl voGeneralReq = null;
        voGeneralReq = getXxGamMaGeneralReqVO1();

        XxGamMaGeneralReqVORowImpl rowGeneralReq = null;
        if (voGeneralReq != null) {
            rowGeneralReq = 
                    (XxGamMaGeneralReqVORowImpl)voGeneralReq.getCurrentRow();
        }

        String responsibility = null;
        if (amLov != null) {
            XxGamMaResponsibilityAppLovVORowImpl respRow = null;
            respRow = amLov.getResponsibilityAppById(responsibilityId);
            if (respRow != null) {
                responsibility = 
                        respRow.getResponsibilityKey().toUpperCase().trim();
            }
        }

        boolean isFranchise = false;
        String vcLookupType = null;
        if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
            vcLookupType = 
                    XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_COMISION;
        } else {
            if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility)) {
                vcLookupType = 
                        XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_FRANQUICIAS;
                isFranchise = true;
            } else {
                if (XxGamConstantsUtil.RESPONSABILITY_OFFICE_TICKET.equals(responsibility) || 
                    XxGamConstantsUtil.RESPONSABILITY_AUDITOR.equals(responsibility)) {
                    if (rowGeneralReq != null) {
                        if (rowGeneralReq.getStatusRequest() != null) {
                            vcLookupType = 
                                    XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_COMISION;
                        } else {
                            if (rowGeneralReq.getStatusFranchise() != null) {
                                vcLookupType = 
                                        XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_FRANQUICIAS;
                                isFranchise = true;
                            }
                        }
                    }
                }
            }
        }

        if (amLov != null && vcLookupType != null) {

            boolean isInitSuccess = false;
            if (rowGeneralReq != null) {

                rowGeneralReq.setIsRespFranchise(isFranchise);

                XxGamMaPersonDataLovVORowImpl personDataFound = null;
                //Busca los datos de persona para el empleado solicitante
                personDataFound = 
                        amLov.getPersonDataById(rowGeneralReq.getEmployeeId());
                String fullName = null;

                //Asigna el nombre completo del empleado solicitante
                if (personDataFound != null) {
                    if (personDataFound.getFullName() != null) {
                        fullName = personDataFound.getFullName();
                    } else {
                        fullName = 
                                personDataFound.getFirstName() + " " + personDataFound.getLastName();
                    }
                }
                rowGeneralReq.setFullNameEmployee(fullName);

                //Busca los datos de persona para el aprobador
                String approverName = null;
                if (rowGeneralReq.getIsApproverBySys()) {

                    //Obtiene los datos del aprobador por medio del id de supervisor
                    XxGamMaSupervisorLovVORowImpl supervisorRow = null;
                    supervisorRow = 
                            amLov.getSupervisorById(rowGeneralReq.getApproverId());

                    if (supervisorRow != null) {
                        if (supervisorRow.getFullName() != null) {
                            approverName = supervisorRow.getFullName();
                        } else {
                            approverName = 
                                    supervisorRow.getFirstName() + " " + supervisorRow.getLastName();
                        }
                    }
                } else {

                    //Obtiene los datos del aprobador por medio de la jerarquia RH
                    XxGamMaApproverHierarchyLovVORowImpl approverRow = null;
                    approverRow = 
                            amLov.getApproverHierarchyById(rowGeneralReq.getApproverId(), 
                                                           null, null);

                    if (approverRow != null) {
                        if (approverRow.getApproverFullName() != null) {
                            approverName = approverRow.getApproverFullName();
                        } else {
                            approverName = 
                                    approverRow.getApproverFirtName() + " " + 
                                    approverRow.getApproverLastName();
                        }
                    }
                }
                rowGeneralReq.setFullNameApprover(approverName);

                //Busca los datos de persona para el aprobador alternativo
                String approverAltName = null;
                //Obtiene los datos del aprobador alternativo por medio de la jerarquia RH
                XxGamMaApproverHierarchyLovVORowImpl approverAltRow = null;
                approverAltRow = 
                        amLov.getApproverAltById(rowGeneralReq.getApproverAltId(), 
                                                 null, null);
                if (approverAltRow != null) {

                    if (approverAltRow.getApproverFullName() != null) {
                        approverAltName = approverAltRow.getApproverFullName();
                    } else {
                        approverAltName = 
                                approverAltRow.getApproverFirtName() + " " + 
                                approverAltRow.getApproverLastName();
                    }
                }
                rowGeneralReq.setFullNameApproverAlt(approverAltName);

                //Configura la descripcion del proposito de la solicitud
                if (rowGeneralReq.getPurpose() != null) {
                    String purposeMeaning = null;
                    XxGamMaLookupGenericLovVORowImpl purposeRow = 
                        amLov.getPurposeByCode(rowGeneralReq.getPurpose());
                    if (purposeRow != null) {
                        if (purposeRow.getMeaning() != null) {
                            purposeMeaning = purposeRow.getMeaning();
                        }
                    }
                    rowGeneralReq.setPurposeDesc(purposeMeaning);
                }

                //Configura las descripciones referentes al centro de costo
                if (rowGeneralReq.getCostCenter() != null) {
                    String costCenter = null;
                    String currency = null;

                    //Verifica el origen del la tarjeta virtual
                    String virtualCard = null;
                    if (rowGeneralReq.getCostCenterFlex() == null) {
                        //Asigna el valor de tarjeta virtual cuando no existe centro de costo alterno
                        virtualCard = rowGeneralReq.getVirtualCard();
                    }

                    XxGamMaCostCenterByPersonIdLovVORowImpl costCenterRow = 
                        amLov.getCostCenterById(rowGeneralReq.getEmployeeId(), 
                                                rowGeneralReq.getCostCenter(), 
                                                rowGeneralReq.getCurrencyCode(), 
                                                virtualCard, vcLookupType);
                    if (costCenterRow != null) {
                        if (costCenterRow.getSegment3() != null) {

                            costCenter = costCenterRow.getSegment3();
                            currency = costCenterRow.getCurrencyName();
                        }
                    }
                    rowGeneralReq.setCostCenterDesc(costCenter);
                    rowGeneralReq.setCurrencyDesc(currency);
                    if (rowGeneralReq.getTemplatePayment() != null) {
                        pageContext.putTransactionValue("templatID", 
                                                        rowGeneralReq.getTemplatePayment());
                    } else {
                        if (pageContext.getTransactionValue("templatID") != 
                            null && 
                            !"".equals(pageContext.getTransactionValue("templatID").toString().trim())) { // Change By DIHU 10Octubre 2014
                            int idTEMPLAT = 
                                Integer.parseInt(pageContext.getTransactionValue("templatID").toString());
                            rowGeneralReq.setTemplatePayment(new Number(idTEMPLAT));
                            pageContext.putTransactionValue("templatID", "");
                        }
                    }

                    if (rowGeneralReq.getTemplatePayment() != null) {
                        if (rowGeneralReq.getCostCenterFlex() != null) {
                            XxGamMaTemplatePaymentFlexLovVOImpl voFlex = 
                                amLov.getXxGamMaTemplatePaymentFlexLovVO1();
                            if (voFlex != null) {
                                voFlex.searchTemplatePaymentByFlex(null, 
                                                                   rowGeneralReq.getCostCenterFlex());
                            }
                            if (voFlex.getEstimatedRowCount() > 0) {
                                XxGamMaTemplatePaymentFlexLovVORowImpl templateRow = 
                                    (XxGamMaTemplatePaymentFlexLovVORowImpl)voFlex.first();
                                if (templateRow != null) {
                                    templatePaymentDesc = 
                                            templateRow.getTemplateDesc();
                                }
                            }
                        } else {
                            XxGamMaTemplatePaymentLovVORowImpl templateRow = 
                                amLov.getTemplatePaymentById(rowGeneralReq.getTemplatePayment(), 
                                                             rowGeneralReq.getCostCenter());
                            if (templateRow != null) {
                                templatePaymentDesc = 
                                        templateRow.getTemplateDesc();
                            }
                        }
                    }
                    rowGeneralReq.setTypeTemplateDesc(templatePaymentDesc);
                }

                //Configura la lista de valores para el centro de costos
                isInitSuccess = 
                        amLov.initCostCenter(rowGeneralReq.getEmployeeId(), 
                                             vcLookupType);
                if (isInitSuccess) {
                    amLov.initCostCenterFlex(vcLookupType);
                    amLov.initPurposeLov();
                    isInitSuccess = initTemplatePayment();
                }

                //Configura el detalle de la solicitud de anticipo
                XxGamMaPaymentReqVOImpl voPaymentRequest = null;
                voPaymentRequest = getXxGamMaPaymentReqVO2();

                if (voPaymentRequest != null && amLov != null) {

                    RowSetIterator rowSetIter = 
                        voPaymentRequest.getRowSetIterator();
                    if (rowSetIter != null) {
                        rowSetIter.reset();
                        while (rowSetIter.hasNext()) {
                            Row rowDetail = rowSetIter.next();
                            XxGamMaPaymentReqVORowImpl rowPaymentRDetail = 
                                (XxGamMaPaymentReqVORowImpl)rowDetail;
                            if (rowPaymentRDetail != null) {

                                String typePaymentDesc = null;
                                XxGamMaTypePaymentLovVORowImpl typePaymentRow = 
                                    amLov.getTypePaymentById(rowPaymentRDetail.getTypePayment(), 
                                                             rowGeneralReq.getTemplatePayment());
                                if (typePaymentRow != null) {
                                    if (typePaymentRow.getTypePaymentDesc() != 
                                        null) {
                                        typePaymentDesc = 
                                                typePaymentRow.getTypePaymentDesc();
                                    }
                                }
                                rowPaymentRDetail.setTypePymentDesc(typePaymentDesc);

                                String currencyDetail = null;
                                XxGamMaCurrencyLovVORowImpl currencyDetailRow = 
                                    amLov.getCurrencyByCode(rowPaymentRDetail.getCurrencyCode());
                                if (currencyDetailRow != null) {
                                    if (currencyDetailRow.getCurrencyName() != 
                                        null) {
                                        currencyDetail = 
                                                currencyDetailRow.getCurrencyName();
                                    }
                                }
                                rowPaymentRDetail.setCurrencyDesc(currencyDetail);

                                rowPaymentRDetail.setIsPaymentValid(false);
                                rowPaymentRDetail.setIsPaymentNotValid(false);
                            }
                        }
                    }
                }
            }
            rowGeneralReq.setTypeTemplateDesc(templatePaymentDesc);
            if (rowGeneralReq.getTemplatePayment() != null) {
                pageContext.putTransactionValue("templatID", 
                                                rowGeneralReq.getTemplatePayment());
            } else {
                //pageContext.putTransactionValue("templatID",null);//add only for test
                //String tmplateid = pageContext.getTransactionValue("templatID").toString();
                //if(tmplateid != null && !"".equals(tmplateid.trim())){ // Change By DIHU 10Octubre 2014
                if (pageContext.getTransactionValue("templatID") != null && 
                    !"".equals(pageContext.getTransactionValue("templatID").toString().trim())) { // Change By DIHU 10Octubre 2014
                    int idTEMPLAT = 
                        Integer.parseInt(pageContext.getTransactionValue("templatID").toString());
                    rowGeneralReq.setTemplatePayment(new Number(idTEMPLAT));
                    pageContext.putTransactionValue("templatID", "");
                }
            }

            if (isFranchise) {
                if (rowGeneralReq.getFullNameEmployee() != null && 
                    rowGeneralReq.getFullNameApprover() != null && 
                    rowGeneralReq.getCostCenterDesc() != null && 
                    rowGeneralReq.getVirtualCard() != null && 
                    rowGeneralReq.getPurposeDesc() != null && isInitSuccess) {
                    isSuccess = true;
                }
            } else {
                if (rowGeneralReq.getFullNameEmployee() != null && 
                    rowGeneralReq.getFullNameApprover() != null && 
                    rowGeneralReq.getCostCenterDesc() != null && 
                    rowGeneralReq.getVirtualCard() != null && 
                    rowGeneralReq.getTypeTemplateDesc() != null && 
                    rowGeneralReq.getPurposeDesc() != null && isInitSuccess) {
                    isSuccess = true;
                }
            }
        }

        return isSuccess;
    }

    /**Container's getter for XxGamMaPaymentReqVO3
     */
    public XxGamMaPaymentReqVOImpl getXxGamMaPaymentReqVO3() {
        return (XxGamMaPaymentReqVOImpl)findViewObject("XxGamMaPaymentReqVO3");
    }

    /**
     * Busca el registro dependiendo a los parametros de busqueda.
     *
     * @param idSolicitud Clave de la solicitud.
     * @param sName Nombre del solicitante.
     * @param nCostCenter Centro de costos
     * @param nAdvanceTemplate Plantilla de solicitud.
     * @param purpose Proposito.
     * @param dStartDate Fecha inicio.
     * @param dEndDate Fecha fin.
     */
    public void searchRequest(String idSolicitud, String sName, 
                              String nCostCenter, String nAdvanceTemplate, 
                              String purpose, Date dStartDate, Date dEndDate, 
                              String sTypeReuqest) {

        //Obtiene la view object de solicitud general
        System.out.println("Comienza XxGamModAntAMImpl.searchRequest ");
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = null;
        voXxGamMaGeneralReq = getXxGamMaGeneralReqVO1();

        voXxGamMaGeneralReq.searchRequests(idSolicitud, sName, nCostCenter, 
                                           nAdvanceTemplate, purpose, 
                                           dStartDate, dEndDate, sTypeReuqest);
    }

    /**
     * Busca las solicitudes seleccionadas.
     */
    public boolean searchRequests(OAPageContext pageContext, OAWebBean webBean, 
                                  Number idSolicitud) {

        //Verifica nulidad
        System.out.println("Comienza XxGamModAntAMImpl.searchRequest");
        if (idSolicitud == null)
            return false;

        //Obtiene la view object de solicitud general
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = null;
        voXxGamMaGeneralReq = getXxGamMaGeneralReqVO1();
        long iTotal = 0;
        boolean isRows = false;
        //Busca el registro
        try {

            voXxGamMaGeneralReq.searchRequests(pageContext, webBean, 
                                               idSolicitud);
            iTotal = voXxGamMaGeneralReq.getEstimatedRowCount();

            //Verifica si hay registros
            if (iTotal > 0)
                isRows = true;

        } catch (Exception exception) {
            throw new OAException(XxGamAOLMessages.GenericType.SHORT_NAME_XBOL, 
                                  XxGamAOLMessages.GenericType.XXGAM_MAF_REQ_NF_ERROR, 
                                  null, OAException.ERROR, null);
        }
        return isRows;
    }


    /**
     * Inicia el proceso de creacion de un nuevo vuelo
     */
    public void createRowFlight() {
        XxGamMaTicketPVOImpl voXxGamMaTicketPVOImp = 
            this.getXxGamMaTicketPVO3();
        voXxGamMaTicketPVOImp.XxGamMaCreateFlight();
    }

    /**
     * Inicia el proceso de creacion de un nuevo vuelo
     */
    public void createRowFlightForFranchise() {
        XxGamMaTicketPVOImpl voXxGamMaTicketPVOImp = 
            this.getXxGamMaTicketPVO4();
        voXxGamMaTicketPVOImp.XxGamMaCreateFlightForFranchise();
    }

    /**
     * Busca el registro por id.
     *
     * @param nPaymentId Clave primaria
     */
    public void searchPayment(Number nPaymentId) {

        //Verifica nulidad
        if (nPaymentId == null)
            return;

        try {

            //Busca el registro
            XxGamMaPaymentReqVOImpl voXxGamMaPaymentReq = null;
            voXxGamMaPaymentReq = getXxGamMaPaymentReqVO2();
            voXxGamMaPaymentReq.searchPayment(nPaymentId);
        } catch (Exception exception) {

            //Propaga la excepcion.
            throw new OAException("No es posible encontrar el registro", 
                                  OAException.WARNING);
        }
    }


    /**
     * Busca el registro por id.
     */
    public void searchTicketFranchise(Number nGeneralId) {

        //Verifica nulidad
        if (nGeneralId == null)
            return;

        try {

            //Busca el registro

            XxGamMaTicketPVOImpl voXxGamMaTicketP = null;
            voXxGamMaTicketP = getXxGamMaTicketPVO4();
            voXxGamMaTicketP.searchTicket(null, nGeneralId);

        } catch (Exception exception) {

            //Propaga la excepcion.
            throw new OAException("No es posible encontrar el registro", 
                                  OAException.WARNING);
        }
    }


    /**
     * Busqueda avanzada de consulta de solciitudes.
     *
     * @param advanceNum NÃºmero de anticipo.
     * @param employeeName Nombre del empleado.
     * @param nameApprover Nombre del proveedor.
     * @param costCenter Centro de costos.
     * @param virtualCard Tarjeta virtual.
     * @param statusRequest Estatus de la solicitud.
     * @param statusTicket Estatus del boleto.
     * @param dateFrom Fecha inicio.
     * @param dateTo Fecha fin.
     */
    public void searchAdvanceConsultantion(String advanceNum, 
                                           String employeeName, 
                                           String nameApprover, 
                                           String costCenter, 
                                           String costCenterFlex, 
                                           String virtualCard, 
                                           String statusRequest, 
                                           String statusTicket, Date dateFrom, 
                                           Date dateTo) {

        //Obtiene la view object de solicitud general
        XxGamRequestConsultationVOImpl consultationImpl = null;
        consultationImpl = getXxGamRequestConsultationVO1();

        //Inicia el proceso de busqueda.
        consultationImpl.searchAdvanceConsultantion(advanceNum, employeeName, 
                                                    nameApprover, costCenter, 
                                                    costCenterFlex, 
                                                    virtualCard, statusRequest, 
                                                    statusTicket, dateFrom, 
                                                    dateTo);
    }

    /**
     * Indica si el registro es apto para ser editado, con fines de guardar cambios o reservar fondos
     * @return devuelve true cuando todas las validaciones fueron correctas
     */
    public boolean isPaymentReqEditable() {
        boolean isEditable = false;
        XxGamMaGeneralReqVOImpl voGeneralReq = null;
        voGeneralReq = getXxGamMaGeneralReqVO1();
        if (voGeneralReq != null) {
            Row row = null;
            row = voGeneralReq.getCurrentRow();
            if (row != null) {
                XxGamMaGeneralReqVORowImpl generalReqRow = 
                    (XxGamMaGeneralReqVORowImpl)row;
                if (generalReqRow != null) {
                    if (generalReqRow.getStatusRequest() != null) {
                        //Verifica si el registro contiene el codigo de lookup para indicar el estatus "En progreso"
                        if (generalReqRow.getStatusRequest().equals(XxGamConstantsUtil.XXGAM_MA_INPROGRESS_CODE)) {
                            isEditable = true;
                        }
                    } else {
                        if (generalReqRow.getStatusFranchise() != null) {
                            //Verifica si el registro contiene el codigo de lookup para indicar el estatus "En progreso"
                            if (generalReqRow.getStatusFranchise().equals(XxGamConstantsUtil.XXGAM_MA_INPROGRESS_CODE)) {
                                isEditable = true;
                            }
                        } else {
                            isEditable = true;
                        }
                    }
                }
            }
        }
        return isEditable;
    }

    /**
     * Configura los valores cuando la solicitud de anticipo o franquicia obtiene el estado de "En progreso"
     * @param responsibilityId contiene el id de la responsabilidad
     * @return devuelve true cuando cuando todas las validaciones fueron correctas
     */
    public boolean setValuesStatusInProgress(Number responsibilityId) {
        boolean isSuccess = false;

        if (responsibilityId != null) {
            XxGamMaGeneralReqVOImpl voGeneralReq = null;
            voGeneralReq = getXxGamMaGeneralReqVO1();
            if (voGeneralReq != null) {
                Row row = null;
                row = voGeneralReq.getCurrentRow();
                if (row != null) {
                    XxGamMaGeneralReqVORowImpl generalReqRow = 
                        (XxGamMaGeneralReqVORowImpl)row;
                    if (generalReqRow != null) {

                        XxGamModAntLovAMImpl amLov = 
                            (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

                        String responsibility = null;
                        if (amLov != null) {
                            XxGamMaResponsibilityAppLovVORowImpl respRow = 
                                null;
                            respRow = 
                                    amLov.getResponsibilityAppById(responsibilityId);

                            if (respRow != null) {
                                responsibility = 
                                        respRow.getResponsibilityKey().toUpperCase().trim();
                            }
                        }

                        if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
                            if (generalReqRow.getStatusRequest() == null) {
                                generalReqRow.setStatusRequest(XxGamConstantsUtil.XXGAM_MA_INPROGRESS_CODE);
                                isSuccess = true;
                            } else {
                                isSuccess = true;
                            }
                        } else {
                            if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility)) {
                                if (generalReqRow.getStatusFranchise() == 
                                    null) {
                                    generalReqRow.setStatusFranchise(XxGamConstantsUtil.XXGAM_MA_INPROGRESS_CODE);
                                    isSuccess = true;
                                } else {
                                    isSuccess = true;
                                }
                            }
                        }
                    }
                }
            }
        }

        return isSuccess;
    }

    /**
     * Asigna el numero de documento a la solicitud de anticipo o franquicia.
     * @param responsibilityId contiene el id de la responsabilidad
     * @return devuelve true si la asignacion fue correcta, false en caso contrario
     */
    public boolean setNumberPayment(Number responsibilityId) {
        boolean isSuccess = false;

        if (responsibilityId != null) {

            //Instancia AM de LOV
            XxGamModAntLovAMImpl amLov = null;
            amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

            String responsibility = null;
            if (amLov != null) {
                XxGamMaResponsibilityAppLovVORowImpl respRow = null;
                respRow = amLov.getResponsibilityAppById(responsibilityId);
                if (respRow != null) {
                    responsibility = 
                            respRow.getResponsibilityKey().toUpperCase().trim();
                }
            }

            XxGamMaGeneralReqVOImpl voGeneralReq = null;
            voGeneralReq = getXxGamMaGeneralReqVO1();
            if (voGeneralReq != null) {
                Row row = null;
                row = voGeneralReq.getCurrentRow();
                if (row != null) {
                    XxGamMaGeneralReqVORowImpl generalReqRow = 
                        (XxGamMaGeneralReqVORowImpl)row;
                    if (generalReqRow != null) {

                        if (generalReqRow.getNumberPayment() == null) {
                            String prefix = null;
                            String sequenceName = null;
                            if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
                                prefix = 
                                        XxGamConstantsUtil.PREFIX_NUMBER_EMPLOYEE;
                                sequenceName = 
                                        XxGamConstantsUtil.SEQUENCES_NUMBER_EMPLOYEE;
                            } else {
                                if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility)) {
                                    prefix = 
                                            XxGamConstantsUtil.PREFIX_NUMBER_FRANCHISE;
                                    sequenceName = 
                                            XxGamConstantsUtil.SEQUENCES_NUMBER_FRANCHISE;
                                }
                            }

                            if (prefix != null && sequenceName != null) {
                                Number seqNum = null;
                                OADBTransaction trx = getOADBTransaction();
                                if (trx != null) {
                                    seqNum = 
                                            trx.getSequenceValue(sequenceName);
                                }

                                if (seqNum != null) {
                                    generalReqRow.setNumberPayment(prefix + 
                                                                   seqNum.toString());

                                    if (generalReqRow.getNumberPayment() != 
                                        null) {
                                        isSuccess = true;
                                    }
                                }
                            }
                        } else {
                            isSuccess = true;
                        }
                    }
                }
            }
        }
        return isSuccess;
    }

    /**
     * Obtiene el valor del numero de documento de la solicitud de anticipo actual
     * @return devuelve valor cadena del numero de documento
     */
    public String getNumberPayment() {

        String strNumberPayment = "";
        XxGamMaGeneralReqVOImpl voGeneralReq = null;
        voGeneralReq = getXxGamMaGeneralReqVO1();
        if (voGeneralReq != null) {
            XxGamMaGeneralReqVORowImpl generalReqRow = 
                (XxGamMaGeneralReqVORowImpl)voGeneralReq.getCurrentRow();
            if (generalReqRow != null) {
                if (generalReqRow.getNumberPayment() != null) {
                    strNumberPayment = generalReqRow.getNumberPayment();
                }
            }
        }
        return strNumberPayment;
    }

    /**
     * Asigna la fecha de la solicitud del anticipo
     * @return devuelve true en caso de asignacion exitosa o false en caso contrario
     */
    public boolean setRequestPaymentDate() {

        boolean isSuccess = false;
        XxGamMaGeneralReqVOImpl generalImpl = getXxGamMaGeneralReqVO1();
        if (generalImpl != null) {

            XxGamMaGeneralReqVORowImpl generalRow = 
                (XxGamMaGeneralReqVORowImpl)generalImpl.getCurrentRow();
            if (generalRow != null) {

                Date currentReqDate = null;
                currentReqDate = generalRow.getRequestPaymentDate();
                if (currentReqDate == null) {

                    currentReqDate = XxGamMAnticiposUtil.getFechaActual();

                    if (currentReqDate != null) {
                        generalRow.setRequestPaymentDate(currentReqDate);
                        if (generalRow.getRequestPaymentDate() != null) {
                            isSuccess = true;
                        }
                    }
                } else {
                    isSuccess = true;
                }
            }
        }
        return isSuccess;
    }

    /**
     * Asigna el estatus para reserva de fondos de la solicitud de anticipo
     * @return devuelve true en caso de una asignacion exitosa o false en caso contrario
     */
    public boolean setStatusReqReservedFounds() {

        boolean isSuccess = false;
        //Declara los recursos
        XxGamMaGeneralReqVOImpl voGeneralReq = null;
        XxGamMaGeneralReqVORowImpl rowGeneralReq = null;

        //Obtiene la implementaciÃ³n
        voGeneralReq = getXxGamMaGeneralReqVO1();
        if (voGeneralReq != null) {
            rowGeneralReq = 
                    (XxGamMaGeneralReqVORowImpl)voGeneralReq.getCurrentRow();

            if (rowGeneralReq != null) {
                rowGeneralReq.setStatusRequest(XxGamConstantsUtil.XXGAM_MA_INVOICED_CODE);
                isSuccess = true;
            }
        }
        return isSuccess;
    }


    /**Container's getter for XxGamMaStatusRequestVO1
     */
    public XxGamMaStatusRequestVOImpl getXxGamMaStatusRequestVO1() {
        return (XxGamMaStatusRequestVOImpl)findViewObject("XxGamMaStatusRequestVO1");
    }

    /**Container's getter for XxGamMaStatusTicketVO1
     */
    public XxGamMaStatusTicketVOImpl getXxGamMaStatusTicketVO1() {
        return (XxGamMaStatusTicketVOImpl)findViewObject("XxGamMaStatusTicketVO1");
    }

    /**
     * Extrae la view object general
     *
     * */
    public XMLNode getDataXML() {

        XxGamRequestConsultationVOImpl voGeneralReq = null;
        voGeneralReq = getXxGamRequestConsultationVO1();
        XMLNode xMLNode = null;

        //Verifica nulidad
        if (voGeneralReq == null)
            return null;

        try {

            xMLNode = voGeneralReq.getDataXML();

        } catch (Exception exception) {
            throw new OAException(XxGamAOLMessages.GenericType.SHORT_NAME_XBOL, 
                                  XxGamAOLMessages.GenericType.XXGAM_MAF_AD_DATA_XPORT_ERROR, 
                                  null, OAException.WARNING, null);
        }

        return xMLNode;
    }

    /**
     * Configura los valores del detalle de la solicitud de anticipo segun los valores
     * devueltos por los controles de la pantalla
     * @param rowRef contiene referencia del registro del detalle de la solicitud de anticipo
     * @param typePaymentAdv contiene el id del tipo de anticipo
     */
    public void setValueTypePaymentReqDetail(String rowRef, 
                                             Number typePaymentAdv) {

        if (rowRef != null && typePaymentAdv != null) {

            XxGamMaPaymentReqVORowImpl row = 
                (XxGamMaPaymentReqVORowImpl)findRowByRef(rowRef);
            if (row != null) {
                row.setTypePayment(typePaymentAdv);
            }
        }
    }

    /**
     * Calcula el importe a divisa mexicana de todas las lineas de anticipo
     * @return devuelve true en caso de una conversion exitosa de todas las lineas o false en caso contrario
     */
    public boolean calculateAmountMxAllPaymentDetail() {
        boolean isSuccessAll = true;
        XxGamMaPaymentReqVOImpl detailImpl = getXxGamMaPaymentReqVO2();
        if (detailImpl != null) {
            RowSetIterator detailIter = detailImpl.getRowSetIterator();
            if (detailIter != null) {
                detailIter.reset();
                while (detailIter.hasNext()) {
                    XxGamMaPaymentReqVORowImpl detailRow = 
                        (XxGamMaPaymentReqVORowImpl)detailIter.next();
                    if (detailRow != null) {
                        boolean isSuccess = false;
                        isSuccess = 
                                calculateAmountMxPaymentReqDetail(null, detailRow);
                        if (!isSuccess) {
                            isSuccessAll = false;
                        }
                    }
                }
                detailIter.reset();
            }
        }
        return isSuccessAll;
    }

    /**
     * Inicializa los registros del detalle de la solicitud de anticipos
     */
    public void setIniEditDetail() {

        Number templateId = null;
        XxGamMaGeneralReqVOImpl voGeneralReq = null;
        voGeneralReq = getXxGamMaGeneralReqVO1();
        if (voGeneralReq != null) {
            XxGamMaGeneralReqVORowImpl row = 
                (XxGamMaGeneralReqVORowImpl)voGeneralReq.getCurrentRow();
            if (row != null) {
                templateId = row.getTemplatePayment();
            }
        }

        XxGamModAntLovAMImpl amLov = null;
        amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

        XxGamMaPaymentReqVOImpl detailImpl = getXxGamMaPaymentReqVO2();
        if (detailImpl != null && templateId != null && amLov != null) {

            RowSetIterator rowSetIter = detailImpl.getRowSetIterator();

            if (detailImpl.getRowCount() > 0) {
                if (rowSetIter != null) {
                    rowSetIter.reset();
                    while (rowSetIter.hasNext()) {

                        Row rowDetail = rowSetIter.next();
                        XxGamMaPaymentReqVORowImpl paymentReqDetailRow = null;
                        paymentReqDetailRow = 
                                (XxGamMaPaymentReqVORowImpl)rowDetail;

                        if (paymentReqDetailRow != null) {

                            XxGamMaTypePaymentLovVORowImpl typePaymentRow = 
                                null;
                            typePaymentRow = 
                                    amLov.getTypePaymentById(paymentReqDetailRow.getTypePayment(), 
                                                             templateId);

                            if (typePaymentRow == null) {
                                deleteTicketPlaneDetail(null, 
                                                        paymentReqDetailRow, 
                                                        true);
                                paymentReqDetailRow.remove();
                            }
                        }
                    }
                    rowSetIter.reset();
                }
            }
        }
    }

    /**
     * Valida y modifica el valor de las fechas de las lineas de anticipo
     */
    public void setValidatesAllDatesPaymentDetail() {
        XxGamMaPaymentReqVOImpl detailImpl = getXxGamMaPaymentReqVO2();
        if (detailImpl != null) {
            RowSetIterator detailIter = detailImpl.getRowSetIterator();
            if (detailIter != null) {
                detailIter.reset();
                while (detailIter.hasNext()) {
                    XxGamMaPaymentReqVORowImpl detailRow = 
                        (XxGamMaPaymentReqVORowImpl)detailIter.next();
                    if (detailRow != null) {
                        validateNotLessCurrentDateDetail(detailRow);
                    }
                }
                detailIter.reset();
            }
        }
    }

    /**
     * Modifica valor de atributo para validar la entidad de cada linea de anticipo
     */
    public void setValidatesEntityPaymentDetail() {
        XxGamMaPaymentReqVOImpl detailImpl = getXxGamMaPaymentReqVO2();
        if (detailImpl != null) {
            RowSetIterator detailIter = detailImpl.getRowSetIterator();
            if (detailIter != null) {
                detailIter.reset();
                while (detailIter.hasNext()) {
                    XxGamMaPaymentReqVORowImpl detailRow = 
                        (XxGamMaPaymentReqVORowImpl)detailIter.next();
                    if (detailRow != null) {
                        validateNotLessCurrentDateDetail(detailRow);
                    }
                }
                detailIter.reset();
            }
        }
    }

    /**
     * Valida y modifica el valor de las fechas de los vuelos de solicitud de boleto de avion AM
     * @param typeRequest contiene el tipo de solicitud
     */
    public void setValidatesAllDatesFlight(String typeRequest) {
        XxGamMaFlightInf0VOImpl flightImpl = null;
        if (typeRequest.equals(XxGamConstantsUtil.REQUEST_TYPE_ADVANCE)) {
            XxGamMaTicketPVOImpl voXxGamMaTicketPVOImpl = 
                getXxGamMaTicketPVO3();
            voXxGamMaTicketPVOImpl.setCurrentRow(voXxGamMaTicketPVOImpl.first());
            flightImpl = getXxGamMaFlightInf0VO3();
        } else {
            if (typeRequest.equals(XxGamConstantsUtil.REQUEST_TYPE_FRANCHISE)) {
                XxGamMaTicketPVOImpl voXxGamMaTicketPVOImpl = 
                    getXxGamMaTicketPVO4();
                voXxGamMaTicketPVOImpl.setCurrentRow(voXxGamMaTicketPVOImpl.first());
                flightImpl = getXxGamMaFlightInf0VO4();
            }
        }

        if (flightImpl != null) {

            RowSetIterator iter = flightImpl.getRowSetIterator();
            if (iter != null) {
                iter.reset();
                while (iter.hasNext()) {
                    XxGamMaFlightInf0VORowImpl flightRow = 
                        (XxGamMaFlightInf0VORowImpl)iter.next();
                    if (flightRow != null) {
                        validateNotLessCurrentDateFlight(flightRow);
                    }
                }
                iter.reset();
            }
        }
    }

    /**
     * Valida y modifica la fecha inicio y fin del detalle de anticipo para cuando es menor 
     * a la fecha actual del sistema
     * @param detailRow contiene el registro del detalle de anticipo
     * @return devuelve true si la fecha existente es valida o false en caso contrario
     */
    public boolean validateNotLessCurrentDateDetail(XxGamMaPaymentReqVORowImpl detailRow) {

        boolean isValid = false;
        if (detailRow != null) {

            java.util.Date initDate = null;
            java.util.Date finalDate = null;

            if (detailRow.getInitialDate() != null) {
                initDate = detailRow.getInitialDate().getValue();
            }
            if (detailRow.getFinalDate() != null) {
                finalDate = detailRow.getFinalDate().getValue();
            }

            if (initDate != null || finalDate != null) {
                if (initDate != null) {
                    isValid = 
                            XxGamMAnticiposUtil.validateNotCurrentDate(initDate);
                    if (!isValid) {
                        detailRow.setInitialDate(null);
                    }
                }
                if (finalDate != null) {
                    isValid = 
                            XxGamMAnticiposUtil.validateNotCurrentDate(finalDate);
                    if (!isValid) {
                        detailRow.setFinalDate(null);
                    }
                }
            } else {
                isValid = true;
            }
        }
        return isValid;
    }

    /**
     * Valida y modifica la fecha de salida y llegada de un registro de vuelo de la
     * solicitud de boleto de avion AM para cuando es menor a la fecha actual del sistema
     * @param flightRow contiene el registro del vuelo
     * @return devuelve true cuando las fechas son validas o false en caso contrario
     */
    public boolean validateNotLessCurrentDateFlight(XxGamMaFlightInf0VORowImpl flightRow) {

        boolean isValid = false;
        if (flightRow != null) {

            java.util.Date initDate = null;
            java.util.Date finalDate = null;

            if (flightRow.getDepartureDate() != null) {
                initDate = flightRow.getDepartureDate().getValue();
            }
            if (flightRow.getReturnDate() != null) {
                finalDate = flightRow.getReturnDate().getValue();
            }

            if (initDate != null || finalDate != null) {
                if (initDate != null) {
                    isValid = 
                            XxGamMAnticiposUtil.validateNotCurrentDate(initDate);
                    if (!isValid) {
                        flightRow.setDepartureDate(null);
                    }
                }
                if (finalDate != null) {
                    isValid = 
                            XxGamMAnticiposUtil.validateNotCurrentDate(finalDate);
                    if (!isValid) {
                        flightRow.setReturnDate(null);
                    }
                }
            } else {
                isValid = true;
            }
        }
        return isValid;
    }

    /**
     * Calcula el importe a divisa mexicana por cada linea de anticipo
     * @param rowRef contiene referencia del registro de la linea de anticipo
     * @param detailRow contiene el registro del detalle de la solicitud de anticipo
     * @return Devuelve true cuando si las validaciones fueron correctas
     */
    public boolean calculateAmountMxPaymentReqDetail(String rowRef, 
                                                     XxGamMaPaymentReqVORowImpl detailRow) {

        boolean isSuccess = false;
        Number amountMx = null;
        XxGamMaPaymentReqVORowImpl payReqDetailRow = null;
        if (rowRef != null) {
            payReqDetailRow = (XxGamMaPaymentReqVORowImpl)findRowByRef(rowRef);
        } else {
            if (detailRow != null) {
                payReqDetailRow = detailRow;
            } else {
                payReqDetailRow = 
                        (XxGamMaPaymentReqVORowImpl)getXxGamMaPaymentReqVO2().getCurrentRow();
            }
        }

        if (payReqDetailRow != null) {
            Date currencyDate = null;
            if (payReqDetailRow.getInitialDate() != null) {
                currencyDate = payReqDetailRow.getInitialDate();
            }

            String errorMsg = null;
            errorMsg = getValidatesConversionMx(payReqDetailRow);

            if (errorMsg == null) {

                if (!XxGamConstantsUtil.CURRENCY_CODE_MXN.equals(payReqDetailRow.getCurrencyCode()) && 
                    payReqDetailRow.getAmount().compareTo(new Number(0)) > 0) {
                    amountMx = 
                            callFunctionCurrencyConversionToMXN(payReqDetailRow.getAmount(), 
                                                                payReqDetailRow.getCurrencyCode());
                } else {
                    amountMx = payReqDetailRow.getAmount();
                }

                if (amountMx != null) {

                    if (amountMx.compareTo(new Number(0)) >= 0) {
                        payReqDetailRow.setAmountMx(new Number(amountMx.truncate(2)));
                        isSuccess = true;
                    } else {
                        payReqDetailRow.setAmountMx(null);
                        if (payReqDetailRow.getIsPaymentValid()) {
                            errorMsg = 
                                    getOADBTransaction().getMessage(XxGamAOLMessages.GenericType.SHORT_NAME_XBOL, 
                                                                    XxGamAOLMessages.Validation.XXGAM_MAF_DETAIL_NOT_CONVMX, 
                                                                    null);
                            payReqDetailRow.setObservations(errorMsg);
                            payReqDetailRow.setIsPaymentValid(false);
                            payReqDetailRow.setIsPaymentNotValid(true);
                        }
                        isSuccess = false;
                    }
                } else {
                    payReqDetailRow.setAmountMx(null);
                    isSuccess = false;
                }
            } else {
                payReqDetailRow.setAmountMx(null);
                isSuccess = false;
            }
        }

        return isSuccess;
    }

    /**
     * Calcula el total del importe de la solicitud de anticipo, realiza la suma y conversion de cada importe de linea de anticipo
     * a la divisa de reembolso
     * @return devuelve true si el calculo se asigno correctamente, falso en caso contrario
     */
    public boolean calculateAmountTotalGeneralReq() {

        boolean isSuccess = false;

        Number amountTotal = new Number(0);
        Number subtraction = new Number(0);
        Number sum = new Number(0);
        String fromCurrency = null;
        String toCurrency = null;
        Date currencyDate = null;

        XxGamMaGeneralReqVOImpl voGeneralReq = null;
        voGeneralReq = getXxGamMaGeneralReqVO1();
        if (voGeneralReq != null) {
            Row row = voGeneralReq.getCurrentRow();
            if (row != null) {
                XxGamMaGeneralReqVORowImpl generalReqRow = null;
                generalReqRow = (XxGamMaGeneralReqVORowImpl)row;
                if (generalReqRow != null) {

                    if (generalReqRow.getCurrencyCode() != null) {
                        toCurrency = generalReqRow.getCurrencyCode();
                    }

                    XxGamMaPaymentReqVOImpl voPaymentReqDetail = null;
                    voPaymentReqDetail = getXxGamMaPaymentReqVO2();
                    if (voPaymentReqDetail != null) {
                        RowSetIterator rowSetIter = 
                            voPaymentReqDetail.getRowSetIterator();

                        if (voPaymentReqDetail.getRowCount() > 0) {
                            if (rowSetIter != null) {
                                rowSetIter.reset();
                                while (rowSetIter.hasNext()) {

                                    Row rowDetail = rowSetIter.next();
                                    XxGamMaPaymentReqVORowImpl paymentReqDetailRow = 
                                        null;
                                    paymentReqDetailRow = 
                                            (XxGamMaPaymentReqVORowImpl)rowDetail;
                                    if (paymentReqDetailRow != null) {

                                        if (paymentReqDetailRow.getInitialDate() != 
                                            null) {
                                            currencyDate = 
                                                    paymentReqDetailRow.getInitialDate();
                                        }
                                        if (paymentReqDetailRow.getCurrencyCode() != 
                                            null) {
                                            fromCurrency = 
                                                    paymentReqDetailRow.getCurrencyCode();
                                        }
                                        Number amount = null;
                                        if (paymentReqDetailRow.getAmount() != 
                                            null) {
                                            amount = 
                                                    paymentReqDetailRow.getAmount();
                                        }

                                        if (fromCurrency != null && 
                                            toCurrency != null && 
                                            currencyDate != null && 
                                            paymentReqDetailRow.getAmount() != 
                                            null) {
                                            Number amountAux = null;

                                            if (fromCurrency.equals(toCurrency)) {
                                                amountAux = amount;
                                            } else {
                                                amountAux = 
                                                        currencyConversion(fromCurrency, 
                                                                           toCurrency, 
                                                                           amount);
                                            }

                                            if (amountAux != null) {

                                                Number typePaymentId = null;
                                                typePaymentId = 
                                                        paymentReqDetailRow.getTypePayment();

                                                Number templateId = null;
                                                templateId = 
                                                        generalReqRow.getTemplatePayment();

                                                String typePaymentDesc = null;

                                                XxGamModAntLovAMImpl amLov = 
                                                    (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();
                                                if (amLov != null) {
                                                    XxGamMaTypePaymentLovVORowImpl typePaymentRow = 
                                                        amLov.getTypePaymentById(typePaymentId, 
                                                                                 templateId);

                                                    if (typePaymentRow != 
                                                        null) {
                                                        typePaymentDesc = 
                                                                typePaymentRow.getTypePaymentDesc();
                                                    }
                                                }

                                                if (typePaymentDesc != null) {
                                                    if (typePaymentDesc.toUpperCase().trim().indexOf(XxGamConstantsUtil.TYPE_PAYMENT_HOSTING_AGREEMENT) == 
                                                        -1) {
                                                        sum = 
sum.add(amountAux);
                                                    } else {
                                                        subtraction = 
                                                                subtraction.add(amountAux);
                                                    }
                                                    isSuccess = true;
                                                } else {
                                                    isSuccess = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                rowSetIter.reset();
                                if (sum != null) {
                                    amountTotal = amountTotal.add(sum);
                                }

                                if (subtraction != null) {
                                    amountTotal = 
                                            amountTotal.subtract(subtraction);
                                }

                                if (amountTotal != null && isSuccess) {
                                    generalReqRow.setTotalPayment(new Number(amountTotal.truncate(2)));
                                }
                            }
                        } else {
                            generalReqRow.setTotalPayment(new Number(0));
                            isSuccess = true;
                        }
                    } else {
                        generalReqRow.setTotalPayment(new Number(0));
                        isSuccess = true;
                    }
                }
            }
        }
        return isSuccess;
    }

    /**
     * Calcula el importe por conversion de divisas
     * @param fromCurrency contiene la divisa origen
     * @param toCurrency contiene la divisa destino
     * @param amount contiene el monto de la divisa origen
     * @return devuelve el monto convertido a la divisa destino
     */
    public Number currencyConversion(String fromCurrency, String toCurrency, 
                                     Number amount) {
        XxGamModAntLovAMImpl amLov = null;
        amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

        Number amountConv = null;

        if (amLov != null && amount != null) {
            XxGamMaCurrencyConversionLovVOImpl voCurrencyConv = null;
            voCurrencyConv = amLov.getXxGamMaCurrencyConversionLovVO1();

            if (voCurrencyConv != null) {
                voCurrencyConv.searchCurrencyConversion(fromCurrency, 
                                                        toCurrency);

                Row row = voCurrencyConv.first();
                if (row != null) {
                    XxGamMaCurrencyConversionLovVORowImpl currencyConvRow = 
                        (XxGamMaCurrencyConversionLovVORowImpl)row;
                    if (currencyConvRow != null) {
                        if (currencyConvRow.getConversionRate() != null) {
                            amountConv = 
                                    amount.multiply(currencyConvRow.getConversionRate());
                        }
                    }
                }
            }
        }
        return amountConv;
    }

    /**Container's getter for XxGamMaGeneralReqVO2
     */
    public XxGamMaGeneralReqVOImpl getXxGamMaGeneralReqVO2() {
        return (XxGamMaGeneralReqVOImpl)findViewObject("XxGamMaGeneralReqVO2");
    }

    /**
     * Busca las solicitudes de boleto de aviÃ³n.
     * 
     * @param nameRequester Nombre del solicitante.
     * @param numberPayment contiene numero de documento de la solicitud de anticipo
     * @param typeEm Tipo de emisiÃ³n.
     * @param statusReq Estatus de la solicitud.
     * @param fromDate Fecha inicio.
     * @param toDate Fecha fin.
     * @param officeUser contiene nombre de usuario de la oficina de boleto
     * @param statusNotiCode contiene el codigo del estatus de notificacion
     */
    public void searchTicketRequest(String nameRequester, String numberPayment, 
                                    String typeEm, String statusReq, 
                                    Date fromDate, Date toDate, 
                                    String officeUser, String statusNotiCode) {

        //Verifica nulidad
        if (officeUser == null)
            return;

        XxGamMaGeneralAndTicketPVOImpl voXxGamMaGeneralAndTicket = null;
        voXxGamMaGeneralAndTicket = getXxGamMaGeneralAndTicketPVO1();
        voXxGamMaGeneralAndTicket.searchTicket(nameRequester, numberPayment, 
                                               typeEm, statusReq, fromDate, 
                                               toDate, officeUser, 
                                               statusNotiCode);
        XxGamMaGeneralPaymentTicketPVOImpl voXxGamMaGeneralPaymentTicketP = 
            null;
        voXxGamMaGeneralPaymentTicketP = getXxGamMaGeneralPaymentTicketPVO1();
        voXxGamMaGeneralPaymentTicketP.searchTicket(nameRequester, 
                                                    numberPayment, typeEm, 
                                                    statusReq, fromDate, 
                                                    toDate, officeUser, 
                                                    statusNotiCode);
    }


    /**
     * Obtiene el Folio del Ticket
     * @return El numero de folio
     */
    public

    String getFolioTicket() {
        String folio = null;
        XxGamMaTicketPVOImpl voXxGamMaTicketPVOImpl = null;
        voXxGamMaTicketPVOImpl = getXxGamMaTicketPVO6();
        if (voXxGamMaTicketPVOImpl != null) {
            Row row = null;
            row = voXxGamMaTicketPVOImpl.getCurrentRow();
            if (row != null) {
                XxGamMaTicketPVORowImpl folioTicket = 
                    (XxGamMaTicketPVORowImpl)row;
                if (folioTicket != null) {
                    folio = folioTicket.getFolio();
                }
            }

        }
        return folio;

    }


    /*public String getGeneralReqIdR () {
        String GeneralReqId = null;
        XxGamMaGeneralAndTicketPVOImpl voXxGamMaGeneralAndTicketPVOImpl = null;
        voXxGamMaGeneralAndTicketPVOImpl = getXxGamMaGeneralAndTicketPVO1();
        if (voXxGamMaGeneralAndTicketPVOImpl != null) {
            Row row = null;
            row = voXxGamMaGeneralAndTicketPVOImpl.getCurrentRow();
            if (row != null) {
                XxGamMaGeneralAndTicketPVORowImpl ReqId = (XxGamMaGeneralAndTicketPVORowImpl)row;
                if (ReqId != null) {
                    GeneralReqId = ReqId.getGeneralReqId().toString();
                }
            }

        }
        return GeneralReqId;
    }*/

    public String findGeneralReqIdF() {
        String GeneralReqId = null;
        XxGamMaGeneralAndTicketPVOImpl voXxGamMaGeneralAndTicketP = null;
        voXxGamMaGeneralAndTicketP = this.getXxGamMaGeneralAndTicketPVO1();
        GeneralReqId = voXxGamMaGeneralAndTicketP.findGeneralReqIdF();
        return GeneralReqId;
    }

    public String findGeneralReqIdR() {
        String GeneralReqId = null;
        XxGamMaGeneralPaymentTicketPVOImpl voXxGamMaGeneralPaymentTicketPVO = 
            null;
        voXxGamMaGeneralPaymentTicketPVO = 
                this.getXxGamMaGeneralPaymentTicketPVO1();
        GeneralReqId = voXxGamMaGeneralPaymentTicketPVO.findGeneralReqIdR();
        return GeneralReqId;
    }

    public void searchGeneralReq(Number nGeneralReq) {
        if (nGeneralReq == null)
            return;

        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = null;
        voXxGamMaGeneralReq = getXxGamMaGeneralReqVO1();
        voXxGamMaGeneralReq.searchGeneralReq(nGeneralReq);
    }


    public void searchTicket(Number idTicket, String typeEmission) {
        if (idTicket == null)
            return;

        XxGamMaTicketPVOImpl voXxGamMaTicketP = null;
        if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_ADVANCE)) {
            voXxGamMaTicketP = getXxGamMaTicketPVO3();
        } else if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_FRANCHISE)) {
            voXxGamMaTicketP = getXxGamMaTicketPVO4();
        }
        voXxGamMaTicketP.searchTicket(idTicket, null);
    }

    public void searchPaymentReq(Number nPaymentId) {
        if (nPaymentId == null)
            return;

        XxGamMaPaymentReqVOImpl voXxGamMaPaymentReq = null;
        voXxGamMaPaymentReq = getXxGamMaPaymentReqVO2();
        voXxGamMaPaymentReq.searchPayment(nPaymentId);
    }

    /**
     * Busca el registro por id.
     *
     * @param nPaymentId Clave primaria
     */
    public Number searchFlightByTicketId(Number nPaymentId) {
        Number id = null;
        //Verifica nulidad
        if (nPaymentId == null)
            return null;
        try {
            //Busca el registro
            XxGamMaFlightInf0VOImpl voXxGamMaFlightInf0 = null;
            voXxGamMaFlightInf0 = getXxGamMaFlightInf0VO5();
            voXxGamMaFlightInf0.searchFlightByTicketId(nPaymentId);
        } catch (Exception exception) {
            //Propaga la excepcion.
            throw new OAException("No es posible encontrar el registro", 
                                  OAException.WARNING);
        }
        return id;
    }


    /**
     * Busca el registro por id.
     *
     * @param nGeneralRedId Clave primaria
     */
    public Number searchFlightByGeneralReqId(Number nGeneralRedId) {
        Number id = null;
        //Verifica nulidad
        if (nGeneralRedId == null)
            return null;
        try {
            //Busca el registro
            XxGamMaFlightInf0VOImpl voXxGamMaFlightInf0 = null;
            voXxGamMaFlightInf0 = getXxGamMaFlightInf0VO4();
            voXxGamMaFlightInf0.searchFlightByTicketId(nGeneralRedId);
        } catch (Exception exception) {
            //Propaga la excepcion.
            throw new OAException("No es posible encontrar el registro", 
                                  OAException.WARNING);
        }
        return id;
    }


    /**Container's getter for XxGamMaGeneralAndTicketPVO1
     */
    public XxGamMaGeneralAndTicketPVOImpl getXxGamMaGeneralAndTicketPVO1() {
        return (XxGamMaGeneralAndTicketPVOImpl)findViewObject("XxGamMaGeneralAndTicketPVO1");
    }

    /**
     * Inicia el proceso de creacion de nu nuevo ticket
     */
    public void createNewTicket(String filial) {
        XxGamMaTicketPVOImpl voXxGamMaTicket = this.getXxGamMaTicketPVO3();
        voXxGamMaTicket.addNewTicket(filial);
    }

    /**
     * Invoca la implementacion del payment para realizar la busqueda de los tickets y
     * vuelos de la responsabilidad de empleados relacionados con el VL
     * @param idGeneralReq Id con el cual se realizara la busqueda
     */
    public void searchDataForUpdateEmployeesTicketsAndFlight(Number idGeneralReq, 
                                                             Number idPayment, 
                                                             Number idTicket) {
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = 
            this.getXxGamMaGeneralReqVO1();
        voXxGamMaGeneralReq.searchGeneralReq(idGeneralReq);

        XxGamMaPaymentReqVOImpl voXxGamMaPayment = 
            this.getXxGamMaPaymentReqVO2();
        voXxGamMaPayment.searchPayment(idPayment);

        //Busca el ticket detalle de payment atraves del id del ticket
        XxGamMaTicketPVOImpl voXxGamMaTicket = this.getXxGamMaTicketPVO3();
        voXxGamMaTicket.searchTicket(idTicket, null);
    }

    /**
     * Crea la instancia para XxGamMaGeneralReqVOImpl para obtener su currentRow y asociarlo al nuevo Ticket
     */
    public void createRowTicketFranchise() {
        XxGamMaTicketPVOImpl voXxGamMaTicket = this.getXxGamMaTicketPVO4();
        voXxGamMaTicket.addTicketByFranchise();
    }

    /**
     * Obtiene la instancia de la VO XxGamMaTicketPVOImpl para buscar el registro
     * @param idGeneralReq ID de General Req
     */
    public void searchDataByFranchase(Number idGeneralReq) {

        //Verifica nulidad
        if (idGeneralReq == null)
            return;
        try {
            //Obtenemos la intancia de la VO # 4 ya que es la asignada especialmente para Franquicias
            XxGamMaTicketPVOImpl voXxGamMaTicketP = null;
            voXxGamMaTicketP = getXxGamMaTicketPVO4();
            //id = voXxGamMaTicketP.searchTicketByGeneralReq(idGeneralReq);
        } catch (Exception exception) {
            //Propaga la excepcion.

            System.out.println("searchDataByFranchase " + 
                               exception.getMessage());
            throw new OAException("No es posible encontrar el registro", 
                                  OAException.WARNING);
        }
    }


    /**Container's getter for XxGamMaTicketPVO4
     */
    public XxGamMaTicketPVOImpl getXxGamMaTicketPVO4() {
        return (XxGamMaTicketPVOImpl)findViewObject("XxGamMaTicketPVO4");
    }

    /**Container's getter for XxGamMaFlightInf0VO4
     */
    public XxGamMaFlightInf0VOImpl getXxGamMaFlightInf0VO4() {
        return (XxGamMaFlightInf0VOImpl)findViewObject("XxGamMaFlightInf0VO4");
    }

    /**Container's getter for XxGamMaGeneralReqToXxGamMaTicketVL1
     */
    public ViewLinkImpl getXxGamMaGeneralReqToXxGamMaTicketVL1() {
        return (ViewLinkImpl)findViewLink("XxGamMaGeneralReqToXxGamMaTicketVL1");
    }

    /**Container's getter for XxGamMaFlightInf0ToXxGamMaTicketPVL2
     */
    public ViewLinkImpl getXxGamMaFlightInf0ToXxGamMaTicketPVL2() {
        return (ViewLinkImpl)findViewLink("XxGamMaFlightInf0ToXxGamMaTicketPVL2");
    }

    /**
     * Ejecuta un procedimiento almacenado
     * @param requestId
     * @param cosCenter
     * @param type
     * @return devuelve -1 cuando los parametros de entrada son nullos, 0 cuando se ejecuta correctamente
     *         y mayor a 0 cuando ocurre un error
     */
    public int callProcedureReserveFunds(Number requestId, Number cosCenter, 
                                         String type) {

        //Verifica nulidad
        if (requestId == null || cosCenter == null || type == null)
            return -1;

        int intStatus = 0;
        String sqlProcedureName = 
            "apps.xxgam_ap_anticipos_pkg.reservar_fondos(";

        //Crea la transaccion
        OADBTransaction txn = (OADBTransaction)getDBTransaction();
        CallableStatement cs = null;

        //Inicia el proceso almacenado
        StringBuffer sqlExecute = new StringBuffer();
        sqlExecute.append(" BEGIN ");
        sqlExecute.append(" " + sqlProcedureName + " ");
        sqlExecute.append(" p_payment => :1,");
        sqlExecute.append(" p_cc => :2,");
        sqlExecute.append(" p_type => :3,");
        sqlExecute.append(" p_status => :4");
        sqlExecute.append(" );");
        sqlExecute.append(" END; ");

        try {

            if (txn != null) {
                cs = txn.createCallableStatement(sqlExecute.toString(), 1);
            }

            //Setea los paranetros
            cs.setInt(1, requestId.intValue());
            cs.setInt(2, cosCenter.intValue());
            cs.setString(3, type);

            cs.registerOutParameter(4, Types.NUMERIC);

            //Ejecuta el proceso
            cs.execute();

            intStatus = cs.getInt(4);
        } catch (SQLException e) {
            intStatus = -1;
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException ex) {
                    cs = null;
                }
            }
        }
        //Regresa el resultado
        return intStatus;
    }

    /**
     * Ejecuta el procedimiento almacenado PLSQL para validar por linea de anticipo
     * @param initDate contiene la fecha de inicio
     * @param finalDate contiene la fecha fin
     * @param templateId contiene el id de la plantilla de anticipo
     * @param typePayment contiene el id del tipo de anticipo
     * @param currencyCode contiene el codigo de la divisa del anticipo
     * @return devuelve mapa con parametros de importe y resultado de validacion con los siguientes clave:
     *         intResult. Contiene valor entero. Devuelve 0 si no ocurre errores y la validacion es correcta, o diferente
     *                    de cero cuando ocurre errores
     *         
     */
    public Map callProcedureValidatesForLinePaymentAdv(Date initDate, 
                                                       Date finalDate, 
                                                       Number templateId, 
                                                       Number typePayment, 
                                                       String currencyCode) {
        System.out.println("Comienza callProcedureValidatesForLinePaymentAdv Capa AM ");
        System.out.println("Parametros   initDate -->" + initDate + 
                           "\n finalDate -->" + finalDate + 
                           "\n templateId -->" + templateId + 
                           "\n typePayment -->" + typePayment + 
                           "\n currencyCode -->" + currencyCode);

        Map map = new HashMap();
        int intResult = -1;
        Number amount = null;
        //Verifica nulidad
        if (initDate != null && finalDate != null && templateId != null && 
            typePayment != null && currencyCode != null) {

            String sqlProcedureName = 
                "apps.xxgam_ap_anticipos_pkg.valida_fondos_linea(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Construye el llamado del proceso almacenado con bloque anonimo
            String sqlExecute = 
                " DECLARE \n" + " P_OUT NUMBER;\n" + " P_AMOUNT NUMBER; \n";
            sqlExecute += "BEGIN \n";
            sqlExecute += 
                    sqlProcedureName + " P_OUT, ?, ?, ?, ?, P_AMOUNT, ?); ? := P_OUT ; ? := P_AMOUNT; end;";

            if (txn != null) {
                cs = 
 txn.createCallableStatement(sqlExecute, DBTransaction.DEFAULT);
            }

            try {
                java.sql.Date sqlInitDate = null;
                sqlInitDate = new java.sql.Date(initDate.getValue().getTime());

                java.sql.Date sqlFinalDate = null;
                sqlFinalDate = 
                        new java.sql.Date(finalDate.getValue().getTime());

                //Setea los parametros
                cs.setDate(1, sqlInitDate);
                cs.setDate(2, sqlFinalDate);
                cs.setLong(3, templateId.longValue());
                cs.setLong(4, typePayment.longValue());
                cs.setString(5, currencyCode);

                //Declara los parametros de salida
                cs.registerOutParameter(6, Types.VARCHAR);
                cs.registerOutParameter(7, Types.NUMERIC);

                //Ejecuta el proceso
                cs.execute();

                String strResult = cs.getString(6);
                if (strResult != null) {
                    intResult = Integer.parseInt(strResult);
                } else {
                    intResult = -1;
                }

                String strAmount = cs.getString(7);
                BigDecimal bigdAmount = new BigDecimal(strAmount);

                if (bigdAmount != null) {
                    amount = new Number(bigdAmount);
                }

                System.out.println("Resultados cs.getString(6) -->" + 
                                   cs.getString(6) + " cs.getInt(7)" + 
                                   cs.getInt(7));

                cs.close();
            } catch (Exception e) {
                intResult = -1;
                amount = null;
            }
        }

        map.put("intResult", intResult);

        /*if("MX".equals(currencyCode) || "EUR".equals(currencyCode) || "USD".equals(currencyCode)){
            amount = null;
            map.put("Amount", amount);
        } else {*/
        map.put("Amount", amount);
        //}

        System.out.println("Finaliza callProcedureValidatesForLinePaymentAdv Capa AM ");
        return map;
    }

    public int callPValidatesAmountByLinePaymentAdv(Number templateId, 
                                                    Number typePaymentId, 
                                                    Number amount, 
                                                    String currencyCode) {
        int intResult = -1;
        if (templateId != null && typePaymentId != null && amount != null && 
            currencyCode != null) {
            String sqlProcedureName = 
                "apps.xxgam_ap_anticipos_pkg.valida_lin_anticipo2(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Construye el llamado del proceso almacenado con bloque anonimo
            String sqlExecute = " BEGIN \n";
            sqlExecute += sqlProcedureName + " ?, ?, ?, ?, ?); \n";
            sqlExecute += " END;";

            if (txn != null) {
                cs = 
 txn.createCallableStatement(sqlExecute, DBTransaction.DEFAULT);
            }

            try {
                //Configura los parametros
                BigDecimal bigValue = templateId.getBigDecimalValue();
                if (bigValue != null) {
                    cs.setBigDecimal(1, bigValue);
                }
                bigValue = null;

                bigValue = typePaymentId.getBigDecimalValue();
                if (bigValue != null) {
                    cs.setBigDecimal(2, bigValue);
                }
                bigValue = null;

                bigValue = amount.getBigDecimalValue();
                if (bigValue != null) {
                    cs.setBigDecimal(3, bigValue);
                }
                bigValue = null;

                cs.setString(4, currencyCode);

                //Declara los parametros de salida
                cs.registerOutParameter(5, Types.NUMERIC);

                //Ejecuta el proceso
                cs.execute();

                intResult = cs.getInt(5);

                cs.close();
            } catch (Exception e) {
                intResult = -1;
            }
        }
        return intResult;
    }

    /**
     * Ejecuta el procedimiento almacenado PLSQL para validar datos del empleado
     * @param userId contiene el id de usuario
     * @return devuelve mapa con parametros de importe y resultado de validacion
     */
    public Map callProcedureValidEmployee(Number userId) {

        Map map = new HashMap();
        boolean isSuccess = false;
        String costCenter = null;
        Number supervisorId = null;
        Number codeCombId = null;
        Number ledgerId = null;
        String payrollName = null;
        Number positionId = null;
        Boolean isEmployee = null;

        //Verifica nulidad
        if (userId != null) {

            String sqlProcedureName = 
                "apps.xxgam_ap_anticipos_pkg.valida_empleado(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Construye el llamado del proceso almacenado con bloque anonimo
            String sqlExecute = null;
            sqlExecute = " DECLARE \n" + " P_X_EMPLEADO BOOLEAN;\n";
            sqlExecute += 
                    " BEGIN \n " + sqlProcedureName + " ?, ?, ?, ?, ?, ?, ?, P_X_EMPLEADO); \n" + 
                    " ? := (CASE P_X_EMPLEADO WHEN true THEN 'true' ELSE 'false' END); \n" + 
                    " END;";

            if (txn != null) {
                cs = 
 txn.createCallableStatement(sqlExecute, DBTransaction.DEFAULT);
            }

            try {

                //Setea los parametros
                cs.setInt(1, userId.intValue());

                //Declara los parametros de salida
                cs.registerOutParameter(2, Types.VARCHAR);
                cs.registerOutParameter(3, Types.NUMERIC);
                cs.registerOutParameter(4, Types.NUMERIC);
                cs.registerOutParameter(5, Types.NUMERIC);
                cs.registerOutParameter(6, Types.VARCHAR);
                cs.registerOutParameter(7, Types.NUMERIC);
                cs.registerOutParameter(8, Types.VARCHAR);


                //Ejecuta el proceso
                cs.execute();

                String strAttribute = null;
                BigDecimal bigAttribute = null;

                strAttribute = cs.getString(2);
                if (strAttribute != null) {
                    costCenter = strAttribute;
                }

                strAttribute = cs.getString(3);
                if (strAttribute != null) {
                    bigAttribute = new BigDecimal(strAttribute);
                    if (bigAttribute != null) {
                        supervisorId = new Number(bigAttribute);
                    }
                }

                strAttribute = cs.getString(4);
                if (strAttribute != null) {
                    bigAttribute = new BigDecimal(strAttribute);
                    if (bigAttribute != null) {
                        codeCombId = new Number(bigAttribute);
                    }
                }

                strAttribute = cs.getString(5);
                if (strAttribute != null) {
                    bigAttribute = new BigDecimal(strAttribute);
                    if (bigAttribute != null) {
                        ledgerId = new Number(bigAttribute);
                    }
                }

                strAttribute = cs.getString(6);
                if (strAttribute != null) {
                    payrollName = strAttribute;
                }

                strAttribute = cs.getString(7);
                if (strAttribute != null) {
                    bigAttribute = new BigDecimal(strAttribute);
                    if (bigAttribute != null) {
                        positionId = new Number(bigAttribute);
                    }
                }

                strAttribute = cs.getString(8);
                if (strAttribute != null) {
                    isEmployee = Boolean.parseBoolean(strAttribute);
                }
                isSuccess = true;
                cs.close();
            } catch (Exception e) {
                isSuccess = false;
                costCenter = null;
                supervisorId = null;
                codeCombId = null;
                ledgerId = null;
                payrollName = null;
                positionId = null;
                isEmployee = null;
            }
        }

        map.put("isSuccess", isSuccess);
        map.put("costCenter", costCenter);
        map.put("supervisorId", supervisorId);
        map.put("codeCombId", codeCombId);
        map.put("ledgerId", ledgerId);
        map.put("payrollName", payrollName);
        map.put("positionId", positionId);
        map.put("isEmployee", isEmployee);

        return map;
    }

    /**
     * Ejecuta una funcion PLSQL para obtener el nivel del empleado por medio de
     * su posiciÃ³n
     * @param position contiene la posiciÃ³n del empleado
     * @return devuelve el valor nÃºmerico del nivel, el valor -1 indica que no fue
     * encontrado
     */
    public Number callFunctionLevelEmployee(Number position) {

        Number level = null;
        if (position != null) {

            String sqlFunctionName = 
                "apps.xxgam_anticiposwf_pkg.level_employee(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Inicia el proceso almacenado
            StringBuffer sqlExecute = new StringBuffer();
            sqlExecute.append(" BEGIN ");
            sqlExecute.append(" :1 := " + sqlFunctionName + " ");
            sqlExecute.append(" p_position => :2");
            sqlExecute.append(" );");
            sqlExecute.append(" END; ");

            if (txn != null) {
                cs = txn.createCallableStatement(sqlExecute.toString(), 1);
            }

            try {

                BigDecimal bigPosition = null;
                bigPosition = position.getBigDecimalValue();

                cs.registerOutParameter(1, Types.NUMERIC);

                //Setea los paranetros
                cs.setBigDecimal(2, bigPosition);

                //Ejecuta el proceso
                cs.execute();

                BigDecimal bigLevel = null;
                bigLevel = cs.getBigDecimal(1);
                if (bigLevel != null) {
                    level = new Number(bigLevel);
                }

                cs.close();
            } catch (Exception e) {
                level = null;
            }
        }

        return level;
    }

    /**
     * Ejecuta el procedimiento almacenado para llamar al work flow de notificaciones de boleto de
     * avion.
     * @param employeeId contiene el id persona del empleado
     * @param approverId contiene el id persona del aprobador
     * @param officeTicket contiene la oficina de boleto
     * @param route contiene las rutas de la solicitud de boleto
     * @return devuelve 0 en caso de exito, -1 en caso de parametros invalidos y 1 en caso de error
     */
    public int callProcedureNotificationTicketP(Number employeeId, 
                                                Number approverId, 
                                                String officeTicket, 
                                                String route) {
        int intResult = -1;
        if (employeeId != null && approverId != null && officeTicket != null && 
            route != null) {
            String sqlFunctionName = "apps.xxgam_ap_anticipos_pkg.boletos_wf(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Inicia el proceso almacenado
            StringBuffer sqlExecute = new StringBuffer();
            sqlExecute.append(" BEGIN ");
            sqlExecute.append(" " + sqlFunctionName + " ");
            sqlExecute.append(" p_EMPLEADO_ID => :1,");
            sqlExecute.append(" p_APROBADOR_ID => :2,");
            sqlExecute.append(" p_OFICINA => :3,");
            sqlExecute.append(" p_RUTA => :4,");
            sqlExecute.append(" p_status => :5");
            sqlExecute.append(" );");
            sqlExecute.append(" END; ");

            if (txn != null) {
                cs = txn.createCallableStatement(sqlExecute.toString(), 1);
            }

            try {

                BigDecimal bigIds = null;
                bigIds = employeeId.getBigDecimalValue();
                cs.setBigDecimal(1, bigIds);

                bigIds = null;
                bigIds = approverId.getBigDecimalValue();
                cs.setBigDecimal(2, bigIds);

                cs.setString(3, officeTicket);
                cs.setString(4, route);
                cs.registerOutParameter(5, Types.NUMERIC);

                //Ejecuta el proceso
                cs.execute();

                intResult = cs.getInt(5);

                cs.close();
            } catch (Exception e) {
                intResult = 1;
            }
        }
        return intResult;
    }

    /**
     * Ejecuta el procedimiento para el llamado de work flow de la solicitud de anticipo
     * @param requestId contiene el id de la solicitud
     * @param employeeId contiene el id persona del empleado
     * @param approverId contiene el id persona del aprobador
     * @return devuelve 0 cuando se ejecuta con exito, -1 cuando no se reciben parametros validos y 1 cuando ocurre error
     */
    public int callProcedureRequestPaymentAdv(Number requestId, 
                                              Number employeeId, 
                                              Number approverId) {
        int intResult = -1;
        if (requestId != null && employeeId != null && approverId != null) {

            String sqlFunctionName = 
                "apps.xxgam_ap_anticipos_pkg.WF_SOLICITUD(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Inicia el proceso almacenado
            StringBuffer sqlExecute = new StringBuffer();
            sqlExecute.append(" BEGIN ");
            sqlExecute.append(" " + sqlFunctionName + " ");
            sqlExecute.append(" P_EMPLEADO_ID => :1,");
            sqlExecute.append(" P_APROBADOR_ID => :2,");
            sqlExecute.append(" P_ANTICIPO => :3,");
            sqlExecute.append(" P_STATUS => :4");
            sqlExecute.append(" );");
            sqlExecute.append(" END; ");

            if (txn != null) {
                cs = txn.createCallableStatement(sqlExecute.toString(), 1);
            }

            try {
                cs.setString(1, employeeId.toString());
                cs.setString(2, approverId.toString());

                BigDecimal bigIds = null;
                bigIds = requestId.getBigDecimalValue();
                cs.setBigDecimal(3, bigIds);

                cs.registerOutParameter(4, Types.NUMERIC);

                //Ejecuta el proceso
                cs.execute();

                intResult = cs.getInt(4);

                cs.close();
            } catch (Exception e) {
                intResult = 1;
            }
        }
        return intResult;
    }


    /**
     * Ejecuta el procedimiento almacenado para llamar al work flow de notificaciones Oficina
     * de boletos
     * @param data contiene datos de la solicitu de boleto de avion
     * @return devuelve 0 en caso de exito, -1 en caso de parametros invalidos y 1 en caso de error
     */
    public int callProcedureSendNotificationTicketOffice(String[] data) {
        int intResult = -1;
        if (data[0] != null && data[1] != null && data[2] != null && 
            data[4] != null && data[5] != null) {


            String sqlFunctionName = "apps.xxgam_ap_anticipos_pkg.boletos_wf(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Inicia el proceso almacenado
            StringBuffer sqlExecute = new StringBuffer();
            sqlExecute.append(" BEGIN ");
            sqlExecute.append(" " + sqlFunctionName + " ");
            sqlExecute.append(" P_ANTICIPO_ID => :1,");
            sqlExecute.append(" p_EMPLEADO_ID => :2,");
            sqlExecute.append(" p_APROBADOR_ID => :3,");
            sqlExecute.append(" p_OFICINA => :4,");
            sqlExecute.append(" p_RUTA => :5,");
            sqlExecute.append(" P_NUM_BOLETO => :6,");
            sqlExecute.append(" P_STATUS => :7");
            sqlExecute.append(" );");
            sqlExecute.append(" END; ");

            if (txn != null) {
                cs = txn.createCallableStatement(sqlExecute.toString(), 1);
            }

            try {

                BigDecimal bigRequestId = null;
                bigRequestId = new BigDecimal(data[5]);
                cs.setBigDecimal(1, bigRequestId); //REQUEST ID

                BigDecimal bigIds = null;
                bigIds = new BigDecimal(data[1]); //EMPLEADO ID
                cs.setBigDecimal(2, bigIds);

                bigIds = null;
                bigIds = new BigDecimal(data[4]); // APROBADOR ID
                cs.setBigDecimal(3, bigIds);

                cs.setString(4, data[2]); //OFICINA
                cs.setString(5, data[0]); //RUTA
                cs.setString(6, data[3]); //FOLIO

                cs.registerOutParameter(7, Types.NUMERIC);

                //Ejecuta el proceso
                cs.execute();

                intResult = cs.getInt(7);

                cs.close();
            } catch (Exception e) {
                intResult = 1;
            }
        }
        return intResult;
    }


    /**
     * Ejecuta una funcion PLSQL para obtener el nivel del gerente por medio de nivel de
     * empleado y nombre del puesto
     * @param level contiene el nivel de empleado
     * @param positionName contiene el nombre del puesto
     * @return devuelve el valor nÃºmerico del nivel del gerente, el valor -1 indica que no fue
     * encontrado
     */
    public Number callFunctionLevelPositionManager(Number level, 
                                                   String positionName) {

        Number levelReturn = null;
        if (level != null && positionName != null) {
            String sqlFunctionName = 
                "apps.xxgam_anticiposwf_pkg.level_pos_gerente(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Inicia el proceso almacenado
            StringBuffer sqlExecute = new StringBuffer();
            sqlExecute.append(" BEGIN ");
            sqlExecute.append(" :1 := " + sqlFunctionName + " ");
            sqlExecute.append(" p_level => :2,");
            sqlExecute.append(" p_position => :3");
            sqlExecute.append(" );");
            sqlExecute.append(" END; ");

            if (txn != null) {
                cs = txn.createCallableStatement(sqlExecute.toString(), 1);
            }

            try {

                BigDecimal bigLevel = null;
                bigLevel = level.getBigDecimalValue();

                cs.registerOutParameter(1, Types.NUMERIC);

                //Setea los paranetros
                cs.setBigDecimal(2, bigLevel);
                cs.setString(3, positionName);

                //Ejecuta el proceso
                cs.execute();

                bigLevel = null;
                bigLevel = cs.getBigDecimal(1);
                if (bigLevel != null) {
                    levelReturn = new Number(bigLevel);
                }

                cs.close();
            } catch (Exception e) {
                levelReturn = null;
            }
        }
        return levelReturn;
    }


    /**
     * Ejecuta procedimiento PLSQL para obtener el id de version de jerarquia del empleado y el job name
     * @param positionId contiene el id de la posicion del empleado
     * @return devuelve un objeto mapa de tipo java.util.Map con los siguientes valores claves:
     *         versionId. De tipo oracle.jbo.domain.Number.
     *                    Contiene el id de la version de jerarquia. Es -1 cuando ocurre un error en el proceso
     *         jobNameId. De tipo String.
     *                  Contiene la descripcion del puesto de trabajo.     
     */
    public java.util.Map callProceduceGetPositionEmployee(Number positionId) {

        java.util.Map mapResult = new HashMap();
        Number versionId = null;
        Number jobNameId = null;
        if (positionId != null) {

            String sqlProcedureName = 
                "apps.xxgam_anticiposwf_pkg.get_position(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Inicia el proceso almacenado
            StringBuffer sqlExecute = new StringBuffer();
            sqlExecute.append(" BEGIN ");
            sqlExecute.append(" " + sqlProcedureName + " ");
            sqlExecute.append(" p_position => :1,");
            sqlExecute.append(" p_job => :2,");
            sqlExecute.append(" p_version => :3");
            sqlExecute.append(" );");
            sqlExecute.append(" END; ");

            if (txn != null) {
                cs = txn.createCallableStatement(sqlExecute.toString(), 1);
            }

            try {

                BigDecimal bigPositionId = null;
                bigPositionId = positionId.getBigDecimalValue();
                cs.setBigDecimal(1, bigPositionId);

                cs.registerOutParameter(2, Types.VARCHAR);
                cs.registerOutParameter(3, Types.NUMERIC);

                //Ejecuta el proceso
                cs.execute();

                String strJobNameId = cs.getString(2);
                jobNameId = new Number(strJobNameId);

                BigDecimal bigVersionId = null;
                bigVersionId = cs.getBigDecimal(3);
                if (bigVersionId != null) {
                    versionId = new Number(bigVersionId);
                }

                cs.close();
            } catch (Exception e) {
                versionId = new Number(-1);
                jobNameId = null;
            }
        }

        mapResult.put("versionId", versionId);
        mapResult.put("jobNameId", jobNameId);

        return mapResult;
    }

    /**
     * Ejecuta una funcion PLSQL para convertir un monto a divisa mexicana
     * @param amount contiene el monto a convertir
     * @param currencyFrom contiene la divisa origen
     * @return Devuelve el monto en divisa MX
     */
    public Number callFunctionCurrencyConversionToMXN(Number amount, 
                                                      String currencyFrom) {

        Number amountMx = null;
        if (amount != null && currencyFrom != null) {

            String sqlFunctionName = 
                "apps.xxgam_ap_anticipos_pkg.realiza_conversion(";

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;

            //Inicia el proceso almacenado
            StringBuffer sqlExecute = new StringBuffer();
            sqlExecute.append(" BEGIN ");
            sqlExecute.append(" :1 := " + sqlFunctionName + " ");
            sqlExecute.append(" p_monto => :2,");
            sqlExecute.append(" p_divisa => :3");
            sqlExecute.append(" );");
            sqlExecute.append(" END; ");

            if (txn != null) {
                cs = txn.createCallableStatement(sqlExecute.toString(), 1);
            }

            try {

                BigDecimal bigAmount = null;
                bigAmount = amount.getBigDecimalValue();

                cs.registerOutParameter(1, Types.NUMERIC);

                //Setea los paranetros
                cs.setBigDecimal(2, bigAmount);
                cs.setString(3, currencyFrom);

                //Ejecuta el proceso
                cs.execute();

                BigDecimal bigAmountMx = null;
                bigAmountMx = cs.getBigDecimal(1);
                if (bigAmountMx != null) {
                    amountMx = new Number(bigAmountMx);
                    amountMx = new Number(amountMx.truncate(2));
                }

                cs.close();
            } catch (Exception e) {
                amountMx = null;
            }
        }
        return amountMx;
    }

    /**Container's getter for XxGamMaPaymentReqVO4
     */
    public XxGamMaPaymentReqVOImpl getXxGamMaPaymentReqVO4() {
        return (XxGamMaPaymentReqVOImpl)findViewObject("XxGamMaPaymentReqVO4");
    }

    /**Container's getter for XxGamMaTicketPVO5
     */
    public XxGamMaTicketPVOImpl getXxGamMaTicketPVO5() {
        return (XxGamMaTicketPVOImpl)findViewObject("XxGamMaTicketPVO5");
    }

    /**Container's getter for XxGamMaPaymentReqToXxGamMaGeneralReqVL1
     */
    public ViewLinkImpl getXxGamMaPaymentReqToXxGamMaGeneralReqVL1() {
        return (ViewLinkImpl)findViewLink("XxGamMaPaymentReqToXxGamMaGeneralReqVL1");
    }

    /**Container's getter for XxGamMaGeneralReqToXxGamMaTicketVL2
     */
    public ViewLinkImpl getXxGamMaGeneralReqToXxGamMaTicketVL2() {
        return (ViewLinkImpl)findViewLink("XxGamMaGeneralReqToXxGamMaTicketVL2");
    }


    /**
     * Crea los vuelos del ticket de los empleados
     */
    public void createFligthByEmployee(RowIterator ri) {
        XxGamMaFlightInf0VORowImpl row = 
            (XxGamMaFlightInf0VORowImpl)ri.createRow();
        row.setNewRowState(OARow.STATUS_NEW);
        ri.insertRow(row);
    }

    /**
     * Crea los vuelos del ticket de los empleados
     */
    public void createFligthRowByEmployee() {

        OAViewObject vo = getXxGamMaFlightInf0VO3();

        if (vo != null) {
            if (!vo.isPreparedForExecution()) {
                vo.executeQuery();
            }

            Row row = vo.createRow();
            row.setNewRowState(Row.STATUS_INITIALIZED);
            vo.insertRow(row);
            vo.setCurrentRow(row);
        }
    }

    /**
     * Crea los vuelos del ticket de los FRANQUICIAS
     */
    public void createFligthByFranchise() {
        XxGamMaFlightInf0VOImpl voXxGamFlightInfo = 
            this.getXxGamMaFlightInf0VO4();
        XxGamMaFlightInf0VORowImpl row = 
            (XxGamMaFlightInf0VORowImpl)voXxGamFlightInfo.createRow();
        row.setNewRowState(OARow.STATUS_NEW);
        voXxGamFlightInfo.insertRow(row);
    }

    /**
     * Crea los vuelos del ticket de los FRANQUICIAS
     */
    public void createFligthRowByFranchise() {
        OAViewObject vo = getXxGamMaFlightInf0VO4();

        if (vo != null) {
            if (!vo.isPreparedForExecution()) {
                vo.executeQuery();
            }

            Row row = vo.createRow();
            row.setNewRowState(Row.STATUS_INITIALIZED);
            vo.insertRow(row);
            vo.setCurrentRow(row);
        }
    }


    /**
     * Busca la instancia de la VO para borrar el registro del vuelo
     * @param FlightId
     */
    public void deleteRowEmployee(Number FlightId) {

        //Verifica nulidad
        if (FlightId == null)
            return;

        //Obtenemos la intancia de la VO # 4 ya que es la asignada especialmente para Franquicias
        XxGamMaFlightInf0VOImpl voXxGamMaFlightInf0 = null;
        voXxGamMaFlightInf0 = getXxGamMaFlightInf0VO3();
        voXxGamMaFlightInf0.deleteFlightEmployee(FlightId);

    }


    /**
     * Busca la instancia de la VO para borrar el registro del vuelo
     * @param FlightId
     */
    public void deleteRowFranchise(Number FlightId) {

        //Verifica nulidad
        if (FlightId == null)
            return;
        //Obtenemos la intancia de la VO # 4 ya que es la asignada especialmente para Franquicias
        XxGamMaFlightInf0VOImpl voXxGamMaFlightInf0 = null;
        voXxGamMaFlightInf0 = getXxGamMaFlightInf0VO4();
        voXxGamMaFlightInf0.deleteFlightEmployee(FlightId);
    }

    /**
     * Busca la instancia de la VO para cancelar el registro del vuelo
     * @param FlightId
     */
    public void cancelRowEmployee(Number FlightId) {

        //Verifica nulidad
        if (FlightId == null)
            return;

        //Obtenemos la intancia de la VO # 4 ya que es la asignada especialmente para Franquicias
        XxGamMaGeneralPaymentTicketPVOImpl voXxGamMaGeneralPaymentTicketP0 = 
            null;
        voXxGamMaGeneralPaymentTicketP0 = getXxGamMaGeneralPaymentTicketPVO1();
        voXxGamMaGeneralPaymentTicketP0.cancelFlightEmployee(FlightId);

    }

    /**
     * Busca la instancia de la VO para cancelar el registro del vuelo
     * @param FlightId
     */
    public void cancelRowFranchise(Number FlightId) {

        //Verifica nulidad
        if (FlightId == null)
            return;

        //Obtenemos la intancia de la VO # 4 ya que es la asignada especialmente para Franquicias
        XxGamMaGeneralAndTicketPVOImpl voXxGamMaGeneralAndTicketP0 = null;
        voXxGamMaGeneralAndTicketP0 = getXxGamMaGeneralAndTicketPVO1();
        voXxGamMaGeneralAndTicketP0.cancelFlightFranchise(FlightId);

    }


    /**
     * Obtiene el valor de la tarjeta virtual correspondiente a la responsabilidad
     * @param responsability contiene la responsabilidad del usuario en sesion
     * @return devuelve true si la asignacion de tarjeta virtual fue correcta o false en caso contrario
     */
    public boolean initVirtualCard(String responsability) {

        boolean isSuccess = false;
        String lookupType = null;
        if (responsability != null) {
            if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsability)) {

                lookupType = 
                        XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_COMISION;
            } else {
                if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsability)) {

                    lookupType = 
                            XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_FRANQUICIAS;
                } else {
                    //Propaga la excepcion
                    throw new OAException("Error al inicializar el valor de la tarjeta virtual, la responsabilidad no es valida", 
                                          OAException.WARNING);
                }
            }
        }

        if (lookupType != null) {
            if (getXxGamMaGeneralReqVO1() != null) {
                if (getXxGamMaGeneralReqVO1().getCurrentRow() != null) {
                    XxGamMaGeneralReqVORowImpl rowGeneralReq = 
                        (XxGamMaGeneralReqVORowImpl)getXxGamMaGeneralReqVO1().getCurrentRow();

                    if (rowGeneralReq != null) {

                        String meaning = null;
                        String lookupCode = null;

                        //Instancia AM de LOV
                        XxGamModAntLovAMImpl amLov = null;
                        amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

                        if (amLov != null) {
                            XxGamMaLookupGenericLovVORowImpl virtualCardLookup = 
                                amLov.getVirtualCardLookup(lookupType, 
                                                           XxGamConstantsUtil.ID_APPLICATION_INTERNET_EXPENSES);

                            if (virtualCardLookup != null) {
                                meaning = virtualCardLookup.getMeaning();
                                lookupCode = virtualCardLookup.getLookupCode();
                            }
                        }

                        if (lookupCode != null && meaning != null) {
                            rowGeneralReq.setVirtualCard(meaning);
                            isSuccess = true;
                        }
                    }
                }
            }
        }
        return isSuccess;
    }

    /**
     * Configura la lista de valores para centro de costos por defecto del usuario
     * @param userName contiene el nombre de usuario
     * @param responsibilityId contiene el id de la responsabilidad del usuario en sesion
     * @return devuelve true si la inicializacion es correcta o false en caso contrario
     */
    public boolean initCostCenter(String userName, Number responsibilityId) {

        boolean isSuccess = false;
        if (userName != null && responsibilityId != null) {
            //Instancia AM de LOV
            XxGamModAntLovAMImpl amLov = null;
            amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

            XxGamMaUserDataLovVORowImpl userDataFound = null;
            if (amLov != null) {
                userDataFound = amLov.getUserDataByUserName(userName);
            }

            String responsibility = null;
            if (amLov != null) {
                XxGamMaResponsibilityAppLovVORowImpl respRow = null;
                respRow = amLov.getResponsibilityAppById(responsibilityId);

                responsibility = 
                        respRow.getResponsibilityKey().toUpperCase().trim();
            }


            String vcLookupType = null;
            if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
                vcLookupType = 
                        XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_COMISION;
            } else {
                if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility)) {
                    vcLookupType = 
                            XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_FRANQUICIAS;
                }
            }

            if (userDataFound != null && vcLookupType != null) {
                if (userDataFound.getPersonId() != null) {
                    //Configura la lista de valores para el centro de costos
                    isSuccess = 
                            amLov.initCostCenter(userDataFound.getPersonId(), 
                                                 vcLookupType);
                }
            }
        }
        return isSuccess;
    }

    /**
     * Configura la lista de valores para centro de costos alterno
     * @param responsibilityId contiene el id de la responsabilidad del usuario en sesion
     * @return devuelve true si la inicializacion es correcta o false en caso contrario
     */
    public boolean initCostCenterFlex(Number responsibilityId) {

        boolean isSuccess = false;
        if (responsibilityId != null) {
            //Instancia AM de LOV
            XxGamModAntLovAMImpl amLov = null;
            amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

            String responsibility = null;
            if (amLov != null) {
                XxGamMaResponsibilityAppLovVORowImpl respRow = null;
                respRow = amLov.getResponsibilityAppById(responsibilityId);

                responsibility = 
                        respRow.getResponsibilityKey().toUpperCase().trim();
            }


            String vcLookupType = null;
            if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
                vcLookupType = 
                        XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_COMISION;
            } else {
                if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility)) {
                    vcLookupType = 
                            XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_FRANQUICIAS;
                }
            }

            if (vcLookupType != null) {
                //Configura la lista de valores para el centro de costos
                isSuccess = amLov.initCostCenterFlex(vcLookupType);
            }
        }
        return isSuccess;
    }

    /**
     * Inicializa el centro de costo alterno con los valores para franquicia y empleado
     * @return devuelve true si existe registros o false en caso contrario
     */
    public boolean initCostCenterFlex() {

        boolean isSuccess = false;
        //Instancia AM de LOV
        XxGamModAntLovAMImpl amLov = null;
        amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

        if (amLov != null) {
            isSuccess = amLov.initCostCenterFlex();
        }
        return isSuccess;
    }

    /**
     * Inicializa la lista de valores de plantillas de anticipo
     * @return devuelve true en caso de una asignacion correcta o false en caso contrario
     */
    public boolean initTemplatePayment() {

        System.out.println("Comienza initTemplatePayment() capa AM");
        boolean isSuccess = false;
        //Instancia AM de LOV
        XxGamModAntLovAMImpl amLov = null;
        amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

        Number costCenterId = null;
        String costCenterFlex = null;
        XxGamMaGeneralReqVOImpl generalImpl = null;
        generalImpl = getXxGamMaGeneralReqVO1();
        if (generalImpl != null) {
            XxGamMaGeneralReqVORowImpl generalRow = null;
            generalRow = 
                    (XxGamMaGeneralReqVORowImpl)generalImpl.getCurrentRow();

            if (generalRow != null) {

                if (generalRow.getCostCenterFlex() != null) {
                    costCenterFlex = generalRow.getCostCenterFlex();
                } else {
                    if (generalRow.getCostCenter() != null) {
                        costCenterId = generalRow.getCostCenter();
                        System.out.println(" Infor initTemplatePayment() capa AM costCenterId:" + 
                                           costCenterId);
                        String virtualCard = null;
                        if (costCenterId != null) {
                            XxGamMaCostCenterByPersonIdLovVOImpl costCenterImpl = 
                                amLov.getXxGamMaCostCenterByPersonIdLovVO1();
                            if (costCenterImpl != null) {
                                XxGamMaCostCenterByPersonIdLovVORowImpl costCenterRow = 
                                    null;
                                RowSetIterator costCenterIter = 
                                    costCenterImpl.getRowSetIterator();
                                if (costCenterIter != null) {
                                    costCenterIter.reset();
                                    while (costCenterIter.hasNext()) {
                                        costCenterRow = 
                                                (XxGamMaCostCenterByPersonIdLovVORowImpl)costCenterIter.next();
                                        if (costCenterRow != null) {
                                            if (costCenterId.equals(costCenterRow.getCodeCombinationId())) {
                                                virtualCard = 
                                                        costCenterRow.getVcMeaning();
                                                break;
                                            }
                                        }
                                    }
                                    costCenterIter.reset();
                                }
                            }
                        }
                        generalRow.setVirtualCard(virtualCard);

                    } else {
                        generalRow.setTemplatePayment(null);
                        generalRow.setTypeTemplateDesc(null);
                        isSuccess = true;
                    }
                }

                if (amLov != null && 
                    (costCenterId != null || costCenterFlex != null)) {

                    Number templateId = null;
                    //Valida y configura la plantilla con el centro de costo actual
                    if (generalRow.getTemplatePayment() != null) {

                        if (costCenterFlex != null) {
                            //Realiza una validacion y actualizacion de valores de la plantilla con respecto al centro de costo alterno
                            XxGamMaTemplatePaymentFlexLovVORowImpl templateRow = 
                                amLov.getTemplatePaymentByFlex(generalRow.getTemplatePayment(), 
                                                               costCenterFlex);
                            if (templateRow != null) {
                                templateId = templateRow.getTemplateId();
                            }
                        } else {

                            //Realiza una validacion y actualizacion de valores de la plantilla con respecto al id de combinacion contable
                            XxGamMaTemplatePaymentLovVORowImpl templateRow = 
                                amLov.getTemplatePaymentById(generalRow.getTemplatePayment(), 
                                                             costCenterId);
                            if (templateRow != null) {
                                templateId = templateRow.getTemplateId();
                            }
                        }
                    }

                    if (templateId != null) {
                        if (!templateId.equals(generalRow.getTemplatePayment())) {
                            generalRow.setTemplatePayment(null);
                            generalRow.setTypeTemplateDesc(null);
                        }
                    } else {
                        generalRow.setTemplatePayment(null);
                        generalRow.setTypeTemplateDesc(null);
                    }

                    //Inicializa la lista de valores de plantilla de anticipo
                    if (costCenterFlex != null) {
                        isSuccess = 
                                amLov.initTemplatePaymentFlexLov(costCenterFlex);
                    }
                    if (costCenterId != null) {
                        isSuccess = amLov.initTemplatePaymentLov(costCenterId);
                    }
                }
            }
        }

        System.out.println("Finaliza initTemplatePayment() capa AM, isSuccess:" + 
                           isSuccess);
        return isSuccess;
    }

    /**
     * Inicializa la lista de valores de aprobadores por jerarquia RH
     * @param jobNameId contiene el id del puesto de trabajo del empleado
     * @param versionId contiene el id de la version de la jerarquia
     * @return devuelve true si la inicializaciÃ³n fue exitosa o false en caso
     * contrario
     */
    public boolean initApproverHierarchy(Number jobNameId, Number versionId) {

        boolean isSuccess = false;
        if (jobNameId != null && versionId != null) {

            //Instancia AM de LOV
            XxGamModAntLovAMImpl amLov = null;
            amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

            if (amLov != null) {
                isSuccess = 
                        amLov.initApproverHierarchyLov(jobNameId, versionId);

                amLov.initApproverAltLov(jobNameId, versionId);
            }
        }
        return isSuccess;
    }

    /**Container's getter for XxGamMaTicketPVO6
     */
    public XxGamMaTicketPVOImpl getXxGamMaTicketPVO6() {
        return (XxGamMaTicketPVOImpl)findViewObject("XxGamMaTicketPVO6");
    }

    /**Container's getter for XxGamMaFlightInf0VO5
     */
    public XxGamMaFlightInf0VOImpl getXxGamMaFlightInf0VO5() {
        return (XxGamMaFlightInf0VOImpl)findViewObject("XxGamMaFlightInf0VO5");
    }


    public Number getSequenceForWorkFlow() {
        Number wfSequence = null;
        String sSecuencia = null;
        sSecuencia = XxGamConstantsUtil.SEQUENCES_WORK_FLOW;
        wfSequence = getOADBTransaction().getSequenceValue(sSecuencia);
        if (wfSequence == null)
            throw new OAException("No es posible generar la clave del registro", 
                                  OAException.ERROR);

        return wfSequence;
    }

    /**
     * Obtiene y configura las descripciones de la solicitud de boleto de anticipo empleado
     */
    public void getMeaningsForAdvance() {
        String description = null;
        XxGamModAntLovAMImpl amXxGamModAntLov = 
            (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();
        XxGamMaTicketOfficeLovVOImpl lovXxGamMaTicketOffice = 
            amXxGamModAntLov.getXxGamMaTicketOfficeLovVO1();
        XxGamMaTypeEmissionLovVOImpl lovXxGamMaTypeEmission = 
            amXxGamModAntLov.getXxGamMaTypeEmissionLovVO1();


        XxGamMaTicketPVOImpl voXxGamMaTicket = this.getXxGamMaTicketPVO3();
        if (voXxGamMaTicket != null) {
            if (lovXxGamMaTicketOffice != null) {
                description = 
                        lovXxGamMaTicketOffice.getTicketOfficeDescription(voXxGamMaTicket.setCurrentRowTicket());

            }
            voXxGamMaTicket.setTicketOfficeDesc(description);

            if (lovXxGamMaTypeEmission != null) {
                description = 
                        lovXxGamMaTypeEmission.getTypeEmissionDescription(voXxGamMaTicket.getTypeEmissionCode());

            }
            voXxGamMaTicket.setTypeEmissionDesc(description);
        }
    }


    /**
     * Obtiene y configura los valores descriptivos para la solicitud de boleto de franquicia
     */
    public void getMeaningsForFranchise() {
        XxGamModAntLovAMImpl amXxGamModAntLov = 
            (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();
        XxGamMaTicketOfficeLovVOImpl lovXxGamMaTicketOffice = 
            amXxGamModAntLov.getXxGamMaTicketOfficeLovVO1();
        XxGamMaRelationShipLovVoImpl lovXxGamMaRelationShip = 
            amXxGamModAntLov.getXxGamMaRelationShipLovVo1();

        XxGamMaBenefitsLovVOImpl lovXxGamMaBenefits = 
            amXxGamModAntLov.getXxGamMaBenefitsLovVO1();

        XxGamMaTicketPVOImpl voXxGamMaTicket = getXxGamMaTicketPVO4();
        if (voXxGamMaTicket != null) {
            String officeDesc = null;
            if (lovXxGamMaTicketOffice != null) {
                officeDesc = 
                        lovXxGamMaTicketOffice.getTicketOfficeDescription(voXxGamMaTicket.setCurrentRowTicket());
            }
            voXxGamMaTicket.setTicketOfficeDesc(officeDesc);

            String relationship = null;
            if (lovXxGamMaRelationShip != null) {
                relationship = 
                        lovXxGamMaRelationShip.getRelationshipDescription(voXxGamMaTicket.getRelationShipCode());
            }
            voXxGamMaTicket.setRelationShip(relationship);

            String benefitsDesc = null;
            if (lovXxGamMaBenefits != null) {
                benefitsDesc = 
                        lovXxGamMaBenefits.getBenefitsDescription(voXxGamMaTicket.getBenefitsCode());
            }
            voXxGamMaTicket.setBenefitsDesc(benefitsDesc);
        }
    }

    /**
     * Obtiene el estatus de la solicitud de anticipo
     * @return devuelve clave del estatus
     */
    public String findGeneralStatus() {
        String status = null;
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = 
            this.getXxGamMaGeneralReqVO1();
        status = voXxGamMaGeneralReq.findStatusGeneral();

        return status;
    }


    /**
     * Obtiene el tipo de solicitud de la solicitud de anticipo
     * @return devuelve descripcion del tipo de solicitud
     */
    public String getRequestType() {
        String requestType = null;
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = 
            getXxGamMaGeneralReqVO1();
        requestType = voXxGamMaGeneralReq.getRequestType();
        return requestType;
    }


    /**
     * Obtiene el id de la solicitud de anticipo
     * @return devuelve numero de solicitud
     */
    public Number getRequestId() {
        Number requestId = null;
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = 
            this.getXxGamMaGeneralReqVO1();
        requestId = voXxGamMaGeneralReq.getRequestId();
        return requestId;
    }


    /**
     * Obtiene el folio de la solicitud de boleto
     * @return devuelve valor de folio
     */
    public String findTicketFolio(String requestType) {
        String folio = null;
        XxGamMaTicketPVOImpl voXxGamMaTicket = null;
        if (requestType.equals(XxGamConstantsUtil.REQUEST_TYPE_ADVANCE)) {
            voXxGamMaTicket = this.getXxGamMaTicketPVO3();
        } else if (requestType.equals(XxGamConstantsUtil.REQUEST_TYPE_FRANCHISE)) {
            voXxGamMaTicket = this.getXxGamMaTicketPVO4();
        }
        folio = voXxGamMaTicket.findTicketFolio();
        return folio;
    }


    /**
     * Asigna el valor de cost center de informacion general al detalle de anticipo en una
     * creacion o edicion de solicitud de anticipo empleado
     * al atributo codeCombinatioId de XxGamMaPaymentReqVO2
     */
    public void setCodeCombinationsIdDetailVO2() {

        XxGamMaGeneralReqVOImpl generalImpl = getXxGamMaGeneralReqVO1();
        if (generalImpl != null) {
            XxGamMaGeneralReqVORowImpl generalRow = 
                (XxGamMaGeneralReqVORowImpl)generalImpl.getCurrentRow();
            if (generalRow != null) {
                if (getXxGamMaPaymentReqVO2() != null) {
                    getXxGamMaPaymentReqVO2().setCodeCombinationsIdFromGeneral(generalRow);
                }
            }
        }
    }

    /**
     * Asigna los valores de divisa a cada registro de anticipo de la solicitud 
     * @param currencyCode contiene el codigo de divisa
     * @param currencyDesc contiene la descripcion de la divisa
     * @return devuelve true si la asignacion es correcta para todos los registros o false en caso contrario
     */
    public boolean setCurrencyAllDetailVO2(String currencyCode, 
                                           String currencyDesc) {
        boolean isSuccess = true;
        if (currencyCode != null && currencyDesc != null) {

            XxGamMaPaymentReqVOImpl detailImpl = getXxGamMaPaymentReqVO2();
            if (detailImpl != null) {
                RowSetIterator detailIter = detailImpl.getRowSetIterator();
                if (detailIter != null) {
                    detailIter.reset();
                    while (detailIter.hasNext()) {
                        XxGamMaPaymentReqVORowImpl detailRow = 
                            (XxGamMaPaymentReqVORowImpl)detailIter.next();
                        if (detailRow != null) {
                            detailRow.setCurrencyCode(currencyCode);
                            detailRow.setCurrencyDesc(currencyDesc);
                            if (!currencyCode.equals(detailRow.getCurrencyCode()) && 
                                !currencyDesc.equals(detailRow.getCurrencyDesc())) {
                                isSuccess = false;
                            }
                        }
                    }
                    detailIter.reset();
                }
            }
        }
        return isSuccess;
    }


    /**
     * Obtiene la oficina de boletos
     * @return numero de oficina de boletos
     */
    public String findTicketOffice() {
        String ticketOffice = null;
        XxGamMaTicketPVOImpl voXxGamMaTicket = this.getXxGamMaTicketPVO3();
        ticketOffice = voXxGamMaTicket.findTicketOffice();
        return ticketOffice;
    }

    /**
     * Obtiene la oficina de boletos
     * @return numero de oficina de boletos
     */
    public String findRouteFlight(String typeEmission, Number idRoute) {
        String routeFlight = null;
        XxGamMaFlightInf0VOImpl voXxGamMaFlightInf = null;
        if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_ADVANCE)) {
            voXxGamMaFlightInf = this.getXxGamMaFlightInf0VO3();
        } else if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_FRANCHISE)) {
            voXxGamMaFlightInf = this.getXxGamMaFlightInf0VO4();
        }
        routeFlight = voXxGamMaFlightInf.findRouteFlight(idRoute);
        return routeFlight;
    }

    /**
     * Obtiene la oficina de boletos
     * @return numero de oficina de boletos
     */
    public String findVirtualCard() {
        String virtualCard = null;
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = 
            this.getXxGamMaGeneralReqVO1();
        virtualCard = voXxGamMaGeneralReq.findVirtualCard();
        return virtualCard;
    }


    /**
     * Obtiene la oficina de boletos
     * @return numero de oficina de boletos
     */
    public Number findEmployeeId() {
        Number employeeId = null;
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = 
            this.getXxGamMaGeneralReqVO1();
        employeeId = voXxGamMaGeneralReq.findEmployeeId();
        return employeeId;
    }

    /**
     * Obtiene el id de la solicitud de anticipo o franquicia
     * @return Id de la solicitud 
     */
    public Number findRequestAdvId() {
        Number requestId = null;
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = 
            this.getXxGamMaGeneralReqVO1();
        requestId = voXxGamMaGeneralReq.requestAdvId();
        return requestId;
    }


    /**
     * Obtiene la oficina de boletos
     * @return numero de oficina de boletos
     */
    public Number findApproverId() {
        Number approverId = null;
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = 
            this.getXxGamMaGeneralReqVO1();
        approverId = voXxGamMaGeneralReq.findApproverId();
        return approverId;
    }


    /**
     * Obtiene la oficina de boletos
     * @return numero de oficina de boletos
     */
    public Number findCombinationCode() {
        Number combinationCode = null;
        XxGamMaPaymentReqVOImpl voXxGamMaPaymentReq = 
            this.getXxGamMaPaymentReqVO2();
        combinationCode = voXxGamMaPaymentReq.findCombinationCode();
        return combinationCode;
    }

    /**
     * Obtiene el PNR
     * @return PNR de Tickets
     */
    public String findPNR() {
        String pnr = null;
        XxGamMaTicketPVOImpl voXxGamMaTicketP = this.getXxGamMaTicketPVO3();
        pnr = voXxGamMaTicketP.findPNR();
        return pnr;
    }

    /**
     * Obtiene el Telefono del contacto
     * @return PNR de Tickets
     */
    public String findContactPhone() {
        String contactPhone = null;
        XxGamMaTicketPVOImpl voXxGamMaTicketP = this.getXxGamMaTicketPVO3();
        contactPhone = voXxGamMaTicketP.findContactPhone();
        return contactPhone;
    }


    /**
     * Obtiene el Telefono del contacto
     * @return PNR de Tickets
     */
    public String findOffice(String typeEmission) {
        String ticketOffice = null;
        XxGamMaTicketPVOImpl voXxGamMaTicketP = null;
        if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_ADVANCE)) {
            voXxGamMaTicketP = this.getXxGamMaTicketPVO3();
        } else if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_FRANCHISE)) {
            voXxGamMaTicketP = this.getXxGamMaTicketPVO4();
        }
        ticketOffice = voXxGamMaTicketP.findOffice();
        return ticketOffice;
    }


    /**
     * Obtiene el Telefono del contacto
     * @return PNR de Tickets
     */
    public String findFolio(String typeEmission) {
        String folio = null;
        XxGamMaTicketPVOImpl voXxGamMaTicketP = null;
        if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_ADVANCE)) {
            voXxGamMaTicketP = this.getXxGamMaTicketPVO3();
        } else if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_FRANCHISE)) {
            voXxGamMaTicketP = this.getXxGamMaTicketPVO4();
        }
        folio = voXxGamMaTicketP.findFolio();
        return folio;
    }


    public String findCostCenter(Number combinationCode) {
        String costCenter = null;
        if (combinationCode == null)
            return null;
        String sqlProcedureName = 
            "{ call xxgam_ap_anticipos_pkg.get_cc_id(?,?,?,?,?,?,?,?,?)}";
        //Crea la transaccion
        OADBTransaction txn = (OADBTransaction)getDBTransaction();
        CallableStatement cs = null;
        //Inicia el proceso almacenado
        if (txn != null) {
            cs = txn.createCallableStatement(sqlProcedureName, 1);
        }
        try {
            //Setea los paranetros
            String combination = combinationCode.toString();
            //combination = "4000";
            int comcod = Integer.valueOf(combination);
            cs.setInt(1, comcod);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.registerOutParameter(3, Types.VARCHAR);
            cs.registerOutParameter(4, Types.VARCHAR);
            cs.registerOutParameter(5, Types.VARCHAR);
            cs.registerOutParameter(6, Types.VARCHAR);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.registerOutParameter(8, Types.VARCHAR);
            cs.registerOutParameter(9, Types.VARCHAR);
            //Ejecuta el proceso
            cs.execute();
            costCenter = cs.getString(4);
            cs.close();
        } catch (SQLException e) {
            costCenter = null;
        }
        //Regresa el resultado
        return costCenter;
    }

    /**
     * Obtiene los datos del supervisor para asignarlo como datos del aprobador
     * en informacion general de la solicitud de anticipo o franquicia
     * @param supervisorId contiene el id del supervisor
     * @return devuelve true en caso de una asignacion exitosa y false en caso
     *         contrario.
     */
    public boolean setAppproverBySupervisorId(Number supervisorId) {

        boolean isSuccess = false;
        XxGamMaGeneralReqVOImpl generalImpl = getXxGamMaGeneralReqVO1();
        if (generalImpl != null && supervisorId != null) {

            Number personId = null;
            String supervisorName = null;
            XxGamModAntLovAMImpl amLov = 
                (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();
            if (amLov != null) {
                XxGamMaSupervisorLovVORowImpl supervisorRow = 
                    amLov.getSupervisorById(supervisorId);
                if (supervisorRow != null) {
                    personId = supervisorRow.getPersonId();

                    if (supervisorRow.getFullName() != null) {
                        supervisorName = supervisorRow.getFullName();
                    } else {
                        supervisorName = 
                                supervisorRow.getFirstName() + " " + supervisorRow.getLastName();
                    }
                }
            }

            XxGamMaGeneralReqVORowImpl generalRow = null;
            generalRow = 
                    (XxGamMaGeneralReqVORowImpl)generalImpl.getCurrentRow();

            if (personId != null && generalRow != null && 
                supervisorName != null) {
                generalRow.setApproverId(personId);
                generalRow.setFullNameApprover(supervisorName);
                generalRow.setIsApproverBySys(true);

                isSuccess = true;
            }
        }
        return isSuccess;
    }

    /**
     * Asigna el valor de la posición del aprobador para formar la lista de
     * aprobadores en la jerarquia RH
     * @param positionId contiene la posición del empleado
     * @param approverId contiene el id de aprobador inmediato
     * @return devuelve true si la asignación es correcta y false en caso contrario
     */
    public boolean setAppproverByHierarchy(Number positionId, 
                                           Number approverId) {
        boolean isSuccess = false;
        XxGamMaGeneralReqVOImpl generalImpl = getXxGamMaGeneralReqVO1();
        if (generalImpl != null && positionId != null) {

            Number jobNameId = null;
            Number versionId = null;

            java.util.Map mapResult = 
                callProceduceGetPositionEmployee(positionId);
            if (mapResult != null) {
                jobNameId = (Number)mapResult.get("jobNameId");
                versionId = (Number)mapResult.get("versionId");
            }

            //Configura lista de valores para aprobadores
            isSuccess = initApproverHierarchy(jobNameId, versionId);

            XxGamMaGeneralReqVORowImpl generalRow = null;
            generalRow = 
                    (XxGamMaGeneralReqVORowImpl)generalImpl.getCurrentRow();

            if (isSuccess && generalRow != null) {

                //Se configuran valores por defecto del aprobador para informacion general
                XxGamModAntLovAMImpl amLov = 
                    (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();
                if (amLov != null) {
                    XxGamMaApproverHierarchyLovVOImpl approverImpl = 
                        amLov.getXxGamMaApproverHierarchyLovVO1();
                    if (approverImpl != null) {

                        XxGamMaApproverHierarchyLovVORowImpl approverRow = 
                            null;
                        if (approverId != null) {

                            RowSetIterator iter = 
                                approverImpl.getRowSetIterator();
                            if (iter != null) {
                                iter.reset();
                                while (iter.hasNext()) {
                                    Row row = iter.next();
                                    approverRow = 
                                            (XxGamMaApproverHierarchyLovVORowImpl)row;
                                    if (approverRow != null) {

                                        if (approverId.equals(approverRow.getApproverId())) {

                                            generalRow.setApproverId(approverRow.getApproverId());
                                            if (approverRow.getApproverFullName() != 
                                                null) {
                                                generalRow.setFullNameApprover(approverRow.getApproverFullName());
                                            } else {
                                                generalRow.setFullNameApprover(approverRow.getApproverFirtName() + 
                                                                               " " + 
                                                                               approverRow.getApproverLastName());
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        } else {

                            approverRow = 
                                    (XxGamMaApproverHierarchyLovVORowImpl)approverImpl.first();
                            if (approverRow != null) {

                                if (approverRow.getApproverId() != null) {
                                    generalRow.setApproverId(approverRow.getApproverId());
                                    if (approverRow.getApproverFullName() != 
                                        null) {
                                        generalRow.setFullNameApprover(approverRow.getApproverFullName());
                                    } else {
                                        generalRow.setFullNameApprover(approverRow.getApproverFirtName() + 
                                                                       " " + 
                                                                       approverRow.getApproverLastName());
                                    }
                                }
                            }
                        }


                    }
                }

                if (generalRow.getApproverId() != null && 
                    generalRow.getFullNameApprover() != null) {
                    isSuccess = true;
                } else {
                    isSuccess = false;
                }

                generalRow.setIsApproverBySys(false);
            }
        }
        return isSuccess;
    }

    /**
     * Devuelve una lista con nombres de los puestos validos para aprobadores
     * @param positionId contiene el id de la posiciÃ³n del empleado
     * @return devuelve un mapa con las siguientes claves:
     *         levelEmployee. De tipo oracle.jbo.domain.Number.
     *                        Contiene el nivel del empleado.
     *         listPositionName. De tipo java.util.List.
     *                        Contiene  una lista de nombre de puestos de trabajo
     */
    public Map getApproversPositionName(Number positionId) {

        Map result = null;
        List<String> positionNameFound = null;
        if (positionId != null) {

            String[] positionName = 
            { XxGamConstantsUtil.JOB_POSITION_NAME_MANAGER, 
              XxGamConstantsUtil.JOB_POSITION_NAME_DEPUTY_DIRECTOR_AREA, 
              XxGamConstantsUtil.JOB_POSITION_NAME_DIRECTOR_AREA, 
              XxGamConstantsUtil.JOB_POSITION_NAME_CORPORATE_DIRECTOR, 
              XxGamConstantsUtil.JOB_POSITION_NAME_GENERAL_DIRECTOR, };
            result = new HashMap();
            positionNameFound = new ArrayList<String>();

            Number level = null;
            Number levelAux = null;
            level = callFunctionLevelEmployee(positionId);

            if (level != null) {
                if (level.intValue() >= 0) {
                    int count = 0;
                    while (count < positionName.length) {

                        if (count == 0) {
                            levelAux = level;
                        } else {
                            if (new Number(-1).equals(levelAux)) {
                                levelAux = level;
                            }
                        }

                        levelAux = 
                                callFunctionLevelPositionManager(levelAux, positionName[count]);
                        if (levelAux != null) {
                            if (levelAux.intValue() >= 0) {
                                positionNameFound.add(positionName[count]);
                            }
                        }
                        count = count + 1;
                    }
                }
            }

            result.put("levelEmployee", level);
            result.put("listPositionName", positionNameFound);
        }
        return result;
    }

    /**
     * Elimina el registro del detalle de anticipo con sus solicitudes de boleto y vuelos en caso de existencia.
     * @param rowRef contiene la referencia del registro del detalle de anticipo
     * @param detailRowVo contiene el registro del detalle de anticipo
     * @param isDeleteAll contiene bandera para indicar si se desea eliminar todo forzosamente
     */
    public void deleteTicketPlaneDetail(String rowRef, 
                                        XxGamMaPaymentReqVORowImpl detailRowVo, 
                                        boolean isDeleteAll) {

        XxGamMaPaymentReqVORowImpl detailRow = null;

        if (rowRef != null) {
            detailRow = (XxGamMaPaymentReqVORowImpl)findRowByRef(rowRef);
        } else {
            detailRow = detailRowVo;
        }

        if (detailRow != null) {

            boolean isDeleted = false;
            if (isDeleteAll) {
                isDeleted = true;
            } else {
                Number typePaymentId = detailRow.getTypePayment();
                if (typePaymentId != null) {

                    XxGamModAntLovAMImpl amLov = 
                        (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();
                    if (amLov != null) {

                        XxGamMaTypePaymentLovVORowImpl typePaymentRow = 
                            amLov.getTypePaymentById(null, typePaymentId);
                        if (typePaymentRow != null) {

                            if (typePaymentRow.getTypePaymentDesc() != null) {

                                if (typePaymentRow.getTypePaymentDesc().toUpperCase().indexOf(XxGamConstantsUtil.TYPE_PAYMENT_TICKET_FLIGHT_AM.toUpperCase()) == 
                                    -1) {
                                    isDeleted = true;
                                }
                            }
                        }
                    }
                }
            }

            if (isDeleted) {

                XxGamMaPaymentReqVOImpl detailImpl = null;
                detailImpl = getXxGamMaPaymentReqVO2();

                detailImpl.setCurrentRow(detailRow);

                XxGamMaTicketPVOImpl ticketImpl = null;
                ticketImpl = getXxGamMaTicketPVO3();

                if (ticketImpl != null) {

                    RowSetIterator rowSetIter = ticketImpl.getRowSetIterator();
                    if (rowSetIter != null) {
                        rowSetIter.reset();
                        while (rowSetIter.hasNext()) {
                            Row ticketRow = rowSetIter.next();
                            if (ticketRow != null) {

                                ticketImpl.setCurrentRow(ticketRow);
                                XxGamMaTicketPVORowImpl ticketRowVo = 
                                    (XxGamMaTicketPVORowImpl)ticketRow;
                                if (ticketRowVo != null) {

                                    if (detailRow.getId().equals(ticketRowVo.getPaymentReqId())) {

                                        XxGamMaFlightInf0VOImpl flightImpl = 
                                            null;
                                        flightImpl = getXxGamMaFlightInf0VO3();

                                        if (flightImpl != null) {

                                            RowSetIterator rowSetIterFlight = 
                                                flightImpl.getRowSetIterator();
                                            if (rowSetIterFlight != null) {
                                                rowSetIterFlight.reset();
                                                while (rowSetIterFlight.hasNext()) {
                                                    Row flightRow = 
                                                        rowSetIterFlight.next();
                                                    if (flightRow != null) {

                                                        XxGamMaFlightInf0VORowImpl flightRowVo = 
                                                            (XxGamMaFlightInf0VORowImpl)flightRow;
                                                        if (flightRowVo != 
                                                            null) {
                                                            if (ticketRowVo.getId().equals(flightRowVo.getTicketPId())) {
                                                                flightRow.remove();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        ticketRow.remove();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**Container's getter for XxGamMaGeneralPaymentTicketPVO1
     */
    public XxGamMaGeneralPaymentTicketPVOImpl getXxGamMaGeneralPaymentTicketPVO1() {
        return (XxGamMaGeneralPaymentTicketPVOImpl)findViewObject("XxGamMaGeneralPaymentTicketPVO1");
    }


    public String getNumberOfRoutes(String requestType) {
        String vuelos = null;
        if (XxGamConstantsUtil.REQUEST_TYPE_ADVANCE.equals(requestType)) {
            XxGamMaTicketPVOImpl voXxGamMaTicketPVOImpl = 
                getXxGamMaTicketPVO3();
            if (voXxGamMaTicketPVOImpl != null) {
                vuelos = voXxGamMaTicketPVOImpl.getNumberOfRoutes();
            }
        } else if (XxGamConstantsUtil.REQUEST_TYPE_FRANCHISE.equals(requestType)) {
            XxGamMaTicketPVOImpl voXxGamMaTicketPVOImpl = 
                getXxGamMaTicketPVO4();
            if (voXxGamMaTicketPVOImpl != null) {
                vuelos = voXxGamMaTicketPVOImpl.getNumberOfRoutes();
            }
        }
        return vuelos;
    }

    /**
     * Duplicate payment request.
     *
     * @param sReference Reference row.
     */
    public void duplicatePayment(String sReference) {

        OADBTransaction txn = getOADBTransaction();
        txn.writeDiagnostics(this, "Entered duplicatePayment", 
                             OAFwkConstants.PROCEDURE);
        //Check nullity.
        if (sReference == null) {
            MessageToken[] tokens = { new MessageToken("MSG_ERROR", "") };
            //Propaga Exception
            throw new OAException(XxGamAOLMessages.GenericType.SHORT_NAME_XBOL, 
                                  XxGamAOLMessages.GenericType.XXGAM_MAF_DUP_ROW_ERROR, 
                                  tokens, OAException.ERROR, null);
        }

        //Declare resources
        XxGamMaPaymentReqVORowImpl rowPyament = null;
        XxGamMaPaymentReqVORowImpl rowPaymentNew = null;
        XxGamMaPaymentReqVOImpl voPayment = null;
        XxGamMaTicketPVOImpl voTicket = null;
        RowIterator iterTickets = null;
        RowIterator iterTicketsNew = null;
        RowIterator iterFlight = null;
        RowIterator iterFligthNew = null;
        XxGamMaTicketPVORowImpl rowTicket = null;
        XxGamMaTicketPVORowImpl rowTicketNew = null;
        XxGamMaFlightInf0VOImpl voFlight = null;
        XxGamMaFlightInf0VORowImpl rowFlight = null;
        XxGamMaFlightInf0VORowImpl rowFlightNew = null;


        //get VOs Impl
        voPayment = getXxGamMaPaymentReqVO2();
        voTicket = getXxGamMaTicketPVO3();
        voFlight = getXxGamMaFlightInf0VO3();

        try {

            //Get current row.
            rowPyament = (XxGamMaPaymentReqVORowImpl)findRowByRef(sReference);

            //Send to catch the error
            if (rowPyament == null)
                throw new OAException("No se puede obtener referencia de la l\u00ednea de anticipo", 
                                      OAException.ERROR);

            //Dulpicate row payment
            rowPaymentNew = voPayment.duplicatePaymentReq(rowPyament);

            iterTicketsNew = rowPaymentNew.getXxGamMaTicketPVO();
            iterTickets = rowPyament.getXxGamMaTicketPVO();

            //Iterate over records requests for aircraft
            while (iterTickets.hasNext()) {

                //Get ticket and create new ticket
                rowTicket = (XxGamMaTicketPVORowImpl)iterTickets.next();
                rowTicketNew = 
                        voTicket.getPaymentReqAirplane(rowTicket, iterTicketsNew);

                //Check nullity
                if (rowTicketNew != null)
                    iterTicketsNew.insertRow(rowTicketNew);

                //Get Flight
                iterFlight = rowTicket.getXxGamMaFlightInf0VO();
                iterFligthNew = rowTicketNew.getXxGamMaFlightInf0VO();

                //Iterate Flight
                while (iterFlight.hasNext()) {

                    rowFlight = (XxGamMaFlightInf0VORowImpl)iterFlight.next();
                    rowFlightNew = 
                            voFlight.getPaymentFlight(rowFlight, iterFligthNew);

                    if (rowFlightNew != null)
                        iterFligthNew.insertRow(rowFlightNew);
                }

            }


        } catch (OAException exception) {

            //Log error
            txn.writeDiagnostics(this, exception.getMessage(), 
                                 OAFwkConstants.ERROR);

            MessageToken[] tokens = 
            { new MessageToken("MSG_ERROR", exception.getMessage()) };
            //Propaga Exception
            throw new OAException(XxGamAOLMessages.GenericType.SHORT_NAME_XBOL, 
                                  XxGamAOLMessages.GenericType.XXGAM_MAF_DUP_ROW_ERROR, 
                                  tokens, OAException.ERROR, null);
        }
        txn.writeDiagnostics(this, "Leaving duplicatePayment", 
                             OAFwkConstants.PROCEDURE);
    }

    /**
     * Verifica que el importe total de la solicitud de anticipo aplique para reserva de fondos
     * @return devuelve true en caso de ser valida o false en caso contrario
     */
    public boolean isValidToReservedFound() {
        boolean isValid = false;
        XxGamMaGeneralReqVOImpl generalImpl = getXxGamMaGeneralReqVO1();
        if (generalImpl != null) {
            XxGamMaGeneralReqVORowImpl generalRow = 
                (XxGamMaGeneralReqVORowImpl)generalImpl.getCurrentRow();
            if (generalRow != null) {

                Number total = generalRow.getTotalPayment();
                if (total.compareTo(new Number(0)) > 0) {
                    isValid = true;
                } else {
                    /*
                  *
                  */
                    XxGamMaPaymentReqVOImpl detailImpl = 
                        getXxGamMaPaymentReqVO2();
                    if (detailImpl != null) {
                        RowSetIterator rowSetIter = 
                            detailImpl.getRowSetIterator();
                        if (rowSetIter != null) {
                            rowSetIter.reset();
                            while (rowSetIter.hasNext()) {
                                Row row = rowSetIter.next();
                                XxGamMaPaymentReqVORowImpl detailRow = 
                                    (XxGamMaPaymentReqVORowImpl)row;

                                if (detailRow != null) {
                                    Number typePaymentId = null;
                                    typePaymentId = detailRow.getTypePayment();
                                    Number templateId = null;
                                    templateId = 
                                            generalRow.getTemplatePayment();
                                    XxGamModAntLovAMImpl amLov = 
                                        (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();
                                    if (typePaymentId != null && 
                                        templateId != null && amLov != null) {
                                        System.out.println("typePaymentId --> " + 
                                                           typePaymentId);
                                        System.out.println("templateId --> " + 
                                                           templateId);
                                        XxGamMaTypePaymentLovVORowImpl typePaymentRow = 
                                            amLov.getTypePaymentById(typePaymentId, 
                                                                     templateId);
                                        if (typePaymentRow != null) {
                                            String typePaymentDesc = null;
                                            typePaymentDesc = 
                                                    typePaymentRow.getTypePaymentDesc();
                                            if (typePaymentDesc != null) {
                                                System.out.println("typePaymentDesc --> " + 
                                                                   typePaymentDesc);
                                                if (typePaymentDesc.toUpperCase().trim().indexOf(XxGamConstantsUtil.TYPE_PAYMENT_TICKET_FLIGHT_AM.toUpperCase()) != 
                                                    -1) {
                                                    isValid = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            rowSetIter.reset();
                        }
                    }
                    /*
                          *
                          */

                }
            }
        }
        return isValid;
    }

    /**Container's getter for XxGamRequestConsultationVO1
     */
    public XxGamRequestConsultationVOImpl getXxGamRequestConsultationVO1() {
        return (XxGamRequestConsultationVOImpl)findViewObject("XxGamRequestConsultationVO1");
    }

    /**
     * Valida los campos para realizar la conversion de divisa a divisa mexicana
     * @param detailRow contiene el registro de la linea de anticipo
     * @return devuelve nullo si los datos son validos o un mensaje de error correspondiente a los valores validados
     */
    public String getValidatesConversionMx(XxGamMaPaymentReqVORowImpl detailRow) {
        String errorMsg = null;
        if (detailRow != null) {
            if (detailRow.getCurrencyCode() == null || 
                "".equals(detailRow.getCurrencyCode())) {
                errorMsg = 
                        "No se puede realizar la conversi\u00F3n, no se pudo obtener el valor de la divisa origen";
            }
            if (detailRow.getAmount() == null) {
                errorMsg = 
                        "No se puede calcular la divisa, falta el valor del importe";
            } else {
                if (detailRow.getAmount().compareTo(new Number(0)) < 0) {
                    errorMsg = 
                            "No se puede calcular la divisa, el valor de importe es negativo";
                }
            }
        }
        return errorMsg;
    }

    /**
     * Valida que los registros de la solicitud de anticipo no contengan tipos de anticipos repetidos
     * @param detailRow contiene el registro del detalle de la solicitud a validar
     * @return devuelve true si es valido o false en caso contrario
     */
    public boolean validatesTypePaymentRepeated(XxGamMaPaymentReqVORowImpl detailRow) {
        boolean isValid = true;
        if (detailRow != null) {
            XxGamMaPaymentReqVOImpl detailImpl = null;
            detailImpl = getXxGamMaPaymentReqVO2();
            if (detailImpl != null) {
                RowSetIterator detailIter = detailImpl.getRowSetIterator();
                if (detailIter != null) {
                    detailIter.reset();
                    while (detailIter.hasNext()) {
                        XxGamMaPaymentReqVORowImpl currentRow = 
                            (XxGamMaPaymentReqVORowImpl)detailIter.next();
                        if (currentRow != null) {
                            if (currentRow.getId() != null && 
                                currentRow.getTypePayment() != null) {
                                if (!currentRow.getId().equals(detailRow.getId())) {
                                    if (currentRow.getTypePayment().equals(detailRow.getTypePayment())) {
                                        detailRow.setTypePayment(null);
                                        detailRow.setIsPaymentValid(false);
                                        detailRow.setIsPaymentNotValid(true);
                                        detailRow.setObservations("No se puede repetir el tipo de anticipo");
                                        isValid = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return isValid;
    }

    /**
     * Ejecuta el procedimiento almacenado para llamar al work flow de notificaciones de cancelacion de boleto de
     * avion.
     * @param employeeId contiene el id persona del empleado
     * @param approverId contiene el id persona del aprobador/
     * @param route contiene las rutas de la solicitud de boleto
     * @return devuelve 0 en caso de exito, -1 en caso de parametros invalidos y 1 en caso de error
     */
    public int callProcedureCancelNotificationTicketP(Number RequestId, 
                                                      Number employeeId, 
                                                      Number approverId, 
                                                      String route, 
                                                      String TicketNum) {
        int intResult = -1;
        System.out.println("***WFBug: AM 0 ***");
        if (employeeId != null && approverId != null && RequestId != null && 
            TicketNum != null) {
            String sqlFunctionName = 
                "apps.xxgam_ap_anticipos_pkg.cancel_boletos_wf(";
            System.out.println("***WFBug: AM 1 ***");

            //Crea la transaccion
            OADBTransaction txn = (OADBTransaction)getDBTransaction();
            CallableStatement cs = null;
            System.out.println("***WFBug: AM 2 ***");

            //Inicia el proceso almacenado
            StringBuffer sqlExecute = new StringBuffer();
            sqlExecute.append(" BEGIN ");
            sqlExecute.append(" " + sqlFunctionName + " ");
            sqlExecute.append(" P_ANTICIPO_ID => :1,");
            sqlExecute.append(" P_EMPLEADO_ID => :2,");
            sqlExecute.append(" P_APROBADOR_ID => :3,");
            sqlExecute.append(" P_RUTA => :4,");
            sqlExecute.append(" P_NUM_BOLETO => :5,");
            sqlExecute.append(" P_STATUS => :6");
            sqlExecute.append(" );");
            sqlExecute.append(" END; ");

            if (txn != null) {
                cs = txn.createCallableStatement(sqlExecute.toString(), 1);
                System.out.println("***WFBug: AM 3 ***");

            }

            try {
                System.out.println("***WFBug: AM 4 ***");

                BigDecimal bigIds = null;
                bigIds = RequestId.getBigDecimalValue();
                cs.setBigDecimal(1, bigIds);

                bigIds = null;
                bigIds = employeeId.getBigDecimalValue();
                cs.setBigDecimal(2, bigIds);

                bigIds = null;
                bigIds = approverId.getBigDecimalValue();
                cs.setBigDecimal(3, bigIds);

                cs.setString(4, route);
                cs.setString(5, TicketNum);
                cs.registerOutParameter(6, Types.NUMERIC);

                //Ejecuta el proceso
                cs.execute();
                System.out.println("***WFBug: AM 5 ***");

                intResult = cs.getInt(6);
                System.out.println("***WFBug: AM 6 ***");

                cs.close();
            } catch (Exception e) {
                intResult = 1;
            }
        }
        return intResult;
    }

    public boolean initCostCenterFlexUpdate(Number responsabilityId, 
                                            OAPageContext pageContext, 
                                            OAWebBean webBean) {
        boolean isSuccess = false;
        //String vcLookupType = null;

        String orgNameEmp = 
            (String)pageContext.getTransactionValue("orgNameEmp");
        //String orgShortNameEmp = orgNameEmp.substring(0, 2);

        XxGamModAntLovAMImpl amLov = null;
        amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

        XxGamMaUserDataLovVORowImpl userDataFound = null;
        if (amLov != null) {
            userDataFound = 
                    amLov.getUserDataByUserName(pageContext.getUserName());
        }

        String responsibility = null;
        if (amLov != null) {
            XxGamMaResponsibilityAppLovVORowImpl respRow = null;
            respRow = amLov.getResponsibilityAppById(responsabilityId);
            if (respRow != null) {
                responsibility = 
                        respRow.getResponsibilityKey().toUpperCase().trim();
            }

        }

        Map mapMaCostCenterByPersonId = new HashMap();
        mapMaCostCenterByPersonId = 
                XxGamMAnticiposUtil2.getMapMaCostCenterByPersonId(responsibility, 
                                                                  userDataFound.getPersonId(), 
                                                                  pageContext, 
                                                                  (OADBTransaction)getTransaction(), 
                                                                  orgNameEmp);

        String localSegment3 = null;
        Number localCodComID = null;
        String localCurCode = null;
        String localCurName = null;
        String localVclDesc = null;
        String localVclType = null;
        String localVclCode = null;

        if (mapMaCostCenterByPersonId != null) {
            localSegment3 = (String)mapMaCostCenterByPersonId.get("segment3");
            localCodComID = (Number)mapMaCostCenterByPersonId.get("codCombId");
            localCurCode = (String)mapMaCostCenterByPersonId.get("curCode");
            localCurName = (String)mapMaCostCenterByPersonId.get("curName");
            localVclDesc = (String)mapMaCostCenterByPersonId.get("vclDesc");
            localVclType = (String)mapMaCostCenterByPersonId.get("vclType");
            localVclCode = (String)mapMaCostCenterByPersonId.get("vclCode");

            if (((Boolean)mapMaCostCenterByPersonId.get("isInitSuccess")).booleanValue()) {
                System.out.println(" Variable para una descripcion tipo CentroDeCostos-Ubicacion localSegment3-->" + 
                                   localSegment3 + 
                                   "\n Variable para el CodeCombinationID del CentroDeCostos localCodComID-->" + 
                                   localCodComID + "\n localCurCode-->" + 
                                   localCurCode + "\n localCurName-->" + 
                                   localCurName + 
                                   "\n Variable para la targeta Virtual que se encuentra en la desc de los lookups configurables localVclDesc-->" + 
                                   localVclDesc + 
                                   "\n Variable para El tipo del LookUp que corresponde deacuerdo a CompaniaVsResponsabilidad localVclType-->" + 
                                   localVclType + "\n localVclCode-->" + 
                                   localVclCode);
                pageContext.writeDiagnostics(XxGamMAnticiposUtil2.class, 
                                             "Variable para una descripcion tipo CentroDeCostos-Ubicacion localSegment3-->" + 
                                             localSegment3 + 
                                             "\n Variable para el CodeCombinationID del CentroDeCostos localCodComID-->" + 
                                             localCodComID + 
                                             "\n localCurCode-->" + 
                                             localCurCode + 
                                             "\n localCurName-->" + 
                                             localCurName + 
                                             "\n Variable para la targeta Virtual que se encuentra en la desc de los lookups configurables localVclDesc-->" + 
                                             localVclDesc + 
                                             "\n Variable para El tipo del LookUp que corresponde deacuerdo a CompaniaVsResponsabilidad localVclType-->" + 
                                             localVclType + 
                                             "\n localVclCode-->" + 
                                             localVclCode, 
                                             OAFwkConstants.PROCEDURE);
                isSuccess = true;

            }

        }

        pageContext.writeDiagnostics(XxGamMAnticiposUtil.class, 
                                     "localVclType Modo Update" + localVclType, 
                                     OAFwkConstants.PROCEDURE);
        System.out.println("localVclType Modo Update" + localVclType);
        if (localVclType != null) {
            isSuccess = amLov.initCostCenterFlex(localVclType);
        }

        return isSuccess;
    }


    /** 10Jul2015  
     * Metodo Sobrecargado para a�adir como criterio de busqueda la unidad operativa y tipos de franquisia
     * @param nameRequester
     * @param numberPayment
     * @param typeEm
     * @param statusReq
     * @param fromDate
     * @param toDate
     * @param officeUser
     * @param statusNotiCode
     * @param operatingUnit
     * @param franchiseType
     * @param requestType
     */
    public void searchTicketRequest(String nameRequester, String numberPayment, 
                                    String typeEm, String statusReq, 
                                    Date fromDate, Date toDate, 
                                    String officeUser, String statusNotiCode, 
                                    String operatingUnit, String franchiseType, 
                                    String requestType) {
        //Verifica nulidad
        if (officeUser == null)
            return;

        XxGamMaGeneralAndTicketPVOImpl voXxGamMaGeneralAndTicket = null;
        voXxGamMaGeneralAndTicket = getXxGamMaGeneralAndTicketPVO1();
        voXxGamMaGeneralAndTicket.searchTicket(nameRequester, numberPayment, 
                                               typeEm, statusReq, fromDate, 
                                               toDate, officeUser, 
                                               statusNotiCode, operatingUnit, 
                                               franchiseType, requestType);
        XxGamMaGeneralPaymentTicketPVOImpl voXxGamMaGeneralPaymentTicketP = 
            null;
        voXxGamMaGeneralPaymentTicketP = getXxGamMaGeneralPaymentTicketPVO1();
        voXxGamMaGeneralPaymentTicketP.searchTicket(nameRequester, 
                                                    numberPayment, typeEm, 
                                                    statusReq, fromDate, 
                                                    toDate, officeUser, 
                                                    statusNotiCode, 
                                                    operatingUnit, 
                                                    franchiseType, 
                                                    requestType);

    }

    /**
     * Metodo Sobrecargado crear un criterio de busqueda con Unidad Operativa /
     * @param advanceNum N�mero de anticipo.
     * @param employeeName Nombre del empleado.
     * @param nameApprover Nombre del proveedor.
     * @param costCenter Centro de costos.
     * @param costCenterFlex Flex del centro de costos
     * @param virtualCard Tarjeta virtual.
     * @param statusRequest Estatus de la solicitud.
     * @param statusTicket Estatus del boleto.
     * @param dateFrom Fecha inicio.
     * @param dateTo Fecha fin.
     * @param operatingUnit Unidad Operativa
     */
    public void searchAdvanceConsultantion(String advanceNum, 
                                           String employeeName, 
                                           String nameApprover, 
                                           String costCenter, 
                                           String costCenterFlex, 
                                           String virtualCard, 
                                           String statusRequest, 
                                           String statusTicket, Date dateFrom, 
                                           Date dateTo, String operatingUnit) {

        //Obtiene la view object de solicitud general
        XxGamRequestConsultationVOImpl consultationImpl = null;
        consultationImpl = getXxGamRequestConsultationVO1();

        //Inicia el proceso de busqueda.
        consultationImpl.searchAdvanceConsultantion(advanceNum, employeeName, 
                                                    nameApprover, costCenter, 
                                                    costCenterFlex, 
                                                    virtualCard, statusRequest, 
                                                    statusTicket, dateFrom, 
                                                    dateTo, operatingUnit);

    }

    /**
     * Obtiene el Id del aprovador Alterno
     * @return numero Id del aprovador Alterno
     */
    public

    Number findApproverAltId() {
        Number approverAltId = null;
        XxGamMaGeneralReqVOImpl voXxGamMaGeneralReq = 
            this.getXxGamMaGeneralReqVO1();
        approverAltId = voXxGamMaGeneralReq.findApproverAltId();
        return approverAltId;
    }


    /**Container's getter for XxGamMaPasajerosInfoVO1
     */
    public XxGamMaPasajerosInfoVOImpl getXxGamMaPasajerosInfoVO1() {
        return (XxGamMaPasajerosInfoVOImpl)findViewObject("XxGamMaPasajerosInfoVO1");
    }

    /**Container's getter for XxGamMaPasajerosInfoVO4
     */
    public XxGamMaPasajerosInfoVOImpl getXxGamMaPasajerosInfoVO4() {
        return (XxGamMaPasajerosInfoVOImpl)findViewObject("XxGamMaPasajerosInfoVO4");
    }

    /**Container's getter for XxGamMaPasajerosInfoToXxGamMaTicketPVL1
     */
    public ViewLinkImpl getXxGamMaPasajerosInfoToXxGamMaTicketPVL1() {
        return (ViewLinkImpl)findViewLink("XxGamMaPasajerosInfoToXxGamMaTicketPVL1");
    }

    /**
     * Crea los pasajeros del ticket para FRANQUICIAS
     */
    public

    void createRowPasajerosInfoForFranchise() {
        OAViewObject vo = getXxGamMaPasajerosInfoVO4();
        if (vo != null) {
            System.out.println(vo.isPreparedForExecution());
            if (!vo.isPreparedForExecution()) {
                vo.executeQuery();
            }

            Row row = vo.createRow();
            row.setNewRowState(Row.STATUS_INITIALIZED);
            vo.insertRow(row);
            vo.setCurrentRow(row);
        }
    }

    /**
     * Busca el registros por id.
     */
    public void searchPasajerosInfo(Number ticketId, String typeEmission) {
        if (ticketId == null) {
            return;
        }
        XxGamMaPasajerosInfoVOImpl PasajerosInfoVOImpl = null;
        PasajerosInfoVOImpl = getXxGamMaPasajerosInfoVO4();
        if (typeEmission.equals("Franquicias")) {
            PasajerosInfoVOImpl.searchPasajerosInfo(ticketId, null);
        }

    }

    /** Funcion para borrar registros de los view objects que contienen la informacion de los pasajeros 
     **
     **/
    public void deleteRowPasajerosInfoForFranchise(Number nInfoPasajeroId) {

        if (nInfoPasajeroId == null) {
            return;
        }
        XxGamMaPasajerosInfoVOImpl PasajerosInfoVOImpl = null;
        PasajerosInfoVOImpl = getXxGamMaPasajerosInfoVO4();
        PasajerosInfoVOImpl.deleteRowPasajerosInfo(nInfoPasajeroId);

    }


    /***
     * Metodo para obtener el ticket ID
     */
    public Number searchTicketId(Number requestId) {
        Number ticketID = null;
        XxGamMaTicketPVOImpl voXxGamMaTicketPVO = null;

        voXxGamMaTicketPVO = getXxGamMaTicketPVO4();
        if (null != voXxGamMaTicketPVO) {
            ticketID = voXxGamMaTicketPVO.searchTicketByGeneralReq(requestId);
        }

        return ticketID;
    }

    /***
     * Metodo para validar si se trata de una nueva o vieja franquicia 
     */
    public String searchOldNewTicket(Number ticketId, String typeEmission) {

        String retval = "";

        XxGamMaPasajerosInfoVOImpl voXxGamMaPasajerosInfo = null;
        if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_ADVANCE)) {
            voXxGamMaPasajerosInfo = getXxGamMaPasajerosInfoVO4();
            retval = "OLD";
        } else if (typeEmission.equals(XxGamConstantsUtil.REQUEST_TYPE_FRANCHISE)) {
            voXxGamMaPasajerosInfo = getXxGamMaPasajerosInfoVO4();
            String getResultStr = null;
            getResultStr = 
                    voXxGamMaPasajerosInfo.searchOldNewFranchise(ticketId);
            if (!"".equals(getResultStr) && null != getResultStr) {
                retval = getResultStr;
            }
        }
        return retval;
    }

    /**
     * Metodo para validar la cancelacion de boletos en oficina de boletos 
     * @param ticketIdNum
     * @param paymentIdNum
     * @param generalIdNum
     * @param tipoSolicitudStr
     */
    public void validateTicketsCancel(Number ticketIdNum, Number paymentIdNum, 
                                      Number generalIdNum, 
                                      String tipoSolicitudStr) {
        boolean isValidToCancelTickets = true;
        boolean isValidToCancelTicketAnticipo = 
            false; /*** Recordar if("0".equals(folio)){retval = false; } ***/

        System.out.println("Comienza validacion cancelacion de boletos capa AM");
        XxGamMaPasajerosInfoVOImpl PasajerosInfoVOImpl = null;
        //XxGamMaPasajerosInfoVORowImpl PasajerosInfoVORowImpl = null;
        PasajerosInfoVOImpl = getXxGamMaPasajerosInfoVO4();
        if (null != PasajerosInfoVOImpl) {
            if (PasajerosInfoVOImpl.getEstimatedRowCount() > 0) {
                isValidToCancelTickets = 
                        PasajerosInfoVOImpl.validateTicketsCancel();
            } else {
                /************Modificado por GnosisHCM para validar cancelaciones de boletos ligadas a Solicitudes de Anticipos *****************/
                System.out.println(" Se puede tratar de un anticipo una franquicia vieja o el objeto para franquicias nuevas no trae registros");
                if (null != tipoSolicitudStr && 
                    "Solicitud de anticipos".equals(tipoSolicitudStr)) {
                    isValidToCancelTicketAnticipo = 
                            validateTicketsCancelAnticipo(ticketIdNum, 
                                                          paymentIdNum, 
                                                          generalIdNum, 
                                                          tipoSolicitudStr);
                }
            }
        } else {
            System.out.println("EXCEPCION al recuperar informacion de Pasajeros en la validacion de los boletos a asociar");
        }

        if (!isValidToCancelTickets) {
            throw new OAException("El campo de los boletos deben cancelarse con 0.", 
                                  OAException.ERROR);
        }

        if (isValidToCancelTicketAnticipo) {
            throw new OAException("El campo de los boletos deben cancelarse con 0 para Boletos de Avion Solicitados en un Anticipo.", 
                                  OAException.ERROR);
        }

        System.out.println("Finaliza validacion cancelacion de boletos capa AM");
    }

    /** Metodo Sobrecargado para incluir OAWebBean
     * Inicializa el registro de una nueva solicitud de anticipos, asignando los datos del
     * solicitante y configurando las listas de valores
     * @param userName contiene el nombre de usuario
     * @param responsibilityId contiene el id de la responsabilidad
     * @return devuelve true cuando todas la validaciones fueron correctas
     */
    public boolean initNewPaymentRequest(String userName, 
                                         Number responsibilityId, 
                                         OAPageContext pageContext, 
                                         OAWebBean webBean) {
        boolean isInitSuccess = false;
        System.out.println("Comienza Capa App Model initNewPaymentRequest");
        System.out.println("Informacion Capa App Model initNewPaymentRequest orgNameEmp -->" + 
                           pageContext.getTransactionValue("orgNameEmp"));

        String orgNameEmp = 
            (String)pageContext.getTransactionValue("orgNameEmp");
        String orgShortNameEmp = orgNameEmp.substring(0, 2);

        if (userName != null && responsibilityId != null) {
            //Instancia AM de LOV
            XxGamModAntLovAMImpl amLov = null;
            amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

            XxGamMaUserDataLovVORowImpl userDataFound = null;
            if (amLov != null) {
                userDataFound = amLov.getUserDataByUserName(userName);
            }

            String responsibility = null;
            if (amLov != null) {
                XxGamMaResponsibilityAppLovVORowImpl respRow = null;
                respRow = amLov.getResponsibilityAppById(responsibilityId);
                if (respRow != null) {
                    responsibility = 
                            respRow.getResponsibilityKey().toUpperCase().trim();
                }
            }

            boolean isFranchise = false;
            String vcLookupType = null;
            if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
                vcLookupType = 
                        XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_COMISION;
            } else if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility) || 
                       XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(pageContext.getParameter("pRequest"))) {
                vcLookupType = 
                        XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_FRANQUICIAS;
                isFranchise = true;
            }

            /** ****************************************************************************** **/
            /** Se agrega los ifs para manipular las organizaciones que no sean 02_AEROMEXICO**/
            /** ****************************************************************************** **/
            if (orgShortNameEmp != null && (orgShortNameEmp.equals("02"))) {
                System.out.println("Comienza para una organizacion -->" + 
                                   orgShortNameEmp);
                // Comienza  Lineas que aplican para 02_AEROMEXICO

                if (userDataFound != null && vcLookupType != null) {
                    if (userDataFound.getPersonId() != null) {
                        if (getXxGamMaGeneralReqVO1() != null) {
                            boolean isCreate = true;
                            //Crea un nuevo registro de solicitud de anticipo para informacion general
                            System.out.println("Crea un nuevo registro de solicitud de anticipo para informacion general");
                            isCreate = createNewPaymentRequest();
                            System.out.println("createNewPaymentRequest");
                            if (isCreate) {
                                XxGamMaGeneralReqVORowImpl generalReqRow = 
                                    null;
                                //Obtiene el registro actual de los datos generales de la nueva solicitud
                                System.out.println("Obtiene el registro actual de los datos generales de la nueva solicitud");
                                generalReqRow = 
                                        (XxGamMaGeneralReqVORowImpl)getXxGamMaGeneralReqVO1().getCurrentRow();
                                if (generalReqRow != null) {
                                    //Asigna el id del solicitante
                                    System.out.println("Asigna el id del solicitante");
                                    generalReqRow.setEmployeeId(userDataFound.getPersonId());
                                    //Asigna el nombre completo del solicitante
                                    System.out.println("Asigna el nombre completo del solicitante");
                                    if (userDataFound.getFullName() != null) {
                                        generalReqRow.setFullNameEmployee(userDataFound.getFullName());
                                    } else {
                                        generalReqRow.setFullNameEmployee(userDataFound.getFirstName() + 
                                                                          " " + 
                                                                          userDataFound.getLastName());
                                    }

                                    if (generalReqRow.getEmployeeId() != 
                                        null && 
                                        generalReqRow.getFullNameEmployee() != 
                                        null) {
                                        //Configura la lista de valores para el centro de costos
                                        System.out.println("Configura la lista de valores para el centro de costos");
                                        isInitSuccess = 
                                                amLov.initCostCenter(userDataFound.getPersonId(), 
                                                                     vcLookupType);
                                        XxGamMaCostCenterByPersonIdLovVOImpl costCenterImpl = 
                                            amLov.getXxGamMaCostCenterByPersonIdLovVO1();
                                        if (costCenterImpl != null && 
                                            isInitSuccess) {
                                            XxGamMaCostCenterByPersonIdLovVORowImpl costCenterRow = 
                                                (XxGamMaCostCenterByPersonIdLovVORowImpl)costCenterImpl.first();
                                            if (costCenterRow != null) {
                                                if (costCenterRow.getCodeCombinationId() != 
                                                    null) {
                                                    generalReqRow.setCostCenter(costCenterRow.getCodeCombinationId());
                                                    if (costCenterRow.getSegment3() != 
                                                        null) {
                                                        generalReqRow.setCostCenterDesc(costCenterRow.getSegment3());
                                                    }
                                                    if (costCenterRow.getVcMeaning() != 
                                                        null) {
                                                        generalReqRow.setVirtualCard(costCenterRow.getVcMeaning());
                                                    }
                                                    if (costCenterRow.getVcMeaningxx() != 
                                                        null) {
                                                        generalReqRow.setVcMeaningxx(costCenterRow.getVcMeaningxx());
                                                    }
                                                    if (costCenterRow.getCurrencyCode() != 
                                                        null) {
                                                        generalReqRow.setCurrencyCode(costCenterRow.getCurrencyCode());
                                                    }
                                                    if (costCenterRow.getCurrencyName() != 
                                                        null) {
                                                        generalReqRow.setCurrencyDesc(costCenterRow.getCurrencyName());
                                                    }
                                                    /// Agregado para llenar el campo de Unidad Operativa 08/06/2015
                                                    System.out.println("Agregado para llenar el campo de Unidad Operativa 08/06/2015");
                                                    if (null != orgNameEmp) {
                                                        generalReqRow.setOperatingUnit(orgNameEmp);
                                                    }
                                                    if (null != 
                                                        pageContext.getParameter("pfranchiseType") && 
                                                        !"".equals(pageContext.getParameter("pfranchiseType"))) {
                                                        generalReqRow.setOrigin(pageContext.getParameter("pfranchiseType"));
                                                    }

                                                }
                                            } else { // Error en el Centro de Costos BY DIHU   13 Octubre 2014
                                            System.out.println("Error en el Centro de Costos BY DIHU   13 Octubre 2014");
                                                if (!isInitSuccess)
                                                    pageContext.putParameter("ErrorEspecifico", 
                                                                             " CosC #3 "); //Add by dihu 16 Octubre 2014 Error al configurar la lista de Valores para el Centro de Costos                        
                                                System.out.println("Add by dihu 16 Octubre 2014 Error al configurar la lista de Valores para el Centro de Costos                        ");
                                            }

                                            System.out.println("*****Deben agregarse esta inicializacion de lista de valores porque no necesariamente tienen que activar el evento lov ****");
                                            amLov.initPurposeLov();
                                            amLov.initCostCenterFlex(vcLookupType);
                                            System.out.println("Comentado por recustrucion del metodo para que sea MultiOrg \n  isInitSuccess = initTemplatePayment();");
                                            isInitSuccess = 
                                                    XxGamMAnticiposUtil2.initTemplatePayment(pageContext, 
                                                                                             webBean);

                                            if (!isInitSuccess) // Error en la plantilla by DIHU 13 Octubre 2014
                                            System.out.println("Error en la plantilla by DIHU 13 Octubre 2014");
                                                pageContext.putParameter("ErrorEspecifico", 
                                                                         " TemPay #1");


                                        } else { // Error en el Centro de Costos BY DIHU 13 Octubre 2014   
                                        System.out.println("Error en el Centro de Costos BY DIHU 13 Octubre 2014   ");
                                            System.out.println("Add by dihu 16 Octubre 2014 Error al configurar la lista de Valores para el Centro de Costos");
                                            if (!isInitSuccess)
                                                
                                                pageContext.putParameter("ErrorEspecifico", 
                                                                         " CosC #1 "); //Add by dihu 16 Octubre 2014 Error al configurar la lista de Valores para el Centro de Costos
                                        
                                            else if (costCenterImpl != null)
                                                pageContext.putParameter("ErrorEspecifico", 
                                                                         " CosC #2 "); //Add by dihu 16 Octubre 2014 Error al configurar la lista de Valores para el Centro de Costos
                                                                         System.out.println("Add by dihu 16 Octubre 2014 Error al configurar la lista de Valores para el Centro de Costos");
                                            //pageContext.putParameter("ErrorEspecifico","Error No se encontro centro de Costos");
                                        }
                                    }
                                    if (isFranchise) {
                                        if (generalReqRow.getFullNameEmployee() != 
                                            null && 
                                            generalReqRow.getFullNameApprover() != 
                                            null && 
                                            generalReqRow.getCostCenterDesc() != 
                                            null && 
                                            generalReqRow.getVirtualCard() != 
                                            null && isInitSuccess) {
                                            isInitSuccess = true;
                                        }
                                    } else {
                                        if (generalReqRow.getFullNameEmployee() != 
                                            null && 
                                            generalReqRow.getFullNameApprover() != 
                                            null && 
                                            generalReqRow.getCostCenterDesc() != 
                                            null && 
                                            generalReqRow.getVirtualCard() != 
                                            null && isInitSuccess) {
                                            isInitSuccess = true;
                                        }
                                    }
                                }
                            }
                        } else {
                            pageContext.putParameter("ErrorEspecifico", 
                                                     " Other #1 "); //Add by dihu 17 Octubre 2014 Error No fue posible crear el registro.
                        }
                    } else {
                        pageContext.putParameter("ErrorEspecifico", 
                                                 " User #2 "); //Add by dihu 17 Octubre 2014 Error No se encontro PersonId
                    }
                } else {
                    if (userDataFound == null)
                        pageContext.putParameter("ErrorEspecifico", 
                                                 " User #1 "); //Add by dihu 17 Octubre 2014 Error No se encontro datos en la Lista de Valores correspondientes al usuario
                    else if (vcLookupType == null)
                        pageContext.putParameter("ErrorEspecifico", 
                                                 " VirCard #1 "); //Add by dihu 17 Octubre 2014 Error No Fue posible encontran el Nombre de la Tarjeta Virual (lookup).
                }

                // Finaliza Lineas que aplican para 02_AEROMEXICO
                System.out.println("Finaliza Lineas que aplican para 02_AEROMEXICO");
            } else if (orgShortNameEmp != null && 
                       !(orgShortNameEmp.equals("02"))) {
                System.out.println("Comienza para una organizacion --->" + 
                                   orgShortNameEmp);
                if (userDataFound != null && vcLookupType != null) {
                    if (userDataFound.getPersonId() != null) {
                        if (getXxGamMaGeneralReqVO1() != null) {
                            boolean isCreate = true;
                            //Crea un nuevo registro de solicitud de anticipo para informacion general
                            isCreate = createNewPaymentRequest();

                            if (isCreate) {
                                XxGamMaGeneralReqVORowImpl generalReqRow = 
                                    null;
                                //Obtiene el registro actual de los datos generales de la nueva solicitud
                                System.out.println("Obtiene el registro actual de los datos generales de la nueva solicitud");
                                generalReqRow = 
                                        (XxGamMaGeneralReqVORowImpl)getXxGamMaGeneralReqVO1().getCurrentRow();
                                if (generalReqRow != null) {
                                    //Asigna el id del solicitante
                                    System.out.println("Asigna el id del solicitante");
                                    generalReqRow.setEmployeeId(userDataFound.getPersonId());
                                    //Asigna el nombre completo del solicitante
                                    System.out.println("Asigna el nombre completo del solicitante");
                                    if (userDataFound.getFullName() != null) {
                                        generalReqRow.setFullNameEmployee(userDataFound.getFullName());
                                    } else {
                                        generalReqRow.setFullNameEmployee(userDataFound.getFirstName() + 
                                                                          " " + 
                                                                          userDataFound.getLastName());
                                    }

                                    if (generalReqRow.getEmployeeId() != 
                                        null && 
                                        generalReqRow.getFullNameEmployee() != 
                                        null) {
                                        //Configura la lista de valores para el centro de costos
                                        System.out.println("Comentado por GnosisHCM isInitSuccess = amLov.initCostCenter(userDataFound.getPersonId(),vcLookupType);" + 
                                                           "\n Ya que el formulario se llenara a partir de valores obtenidos por un nuevo procedimiento Almacenado");

                                    }

                                    Map mapMaCostCenterByPersonId = 
                                        new HashMap(); //Porque me encuentro en la capa AM
                                        mapMaCostCenterByPersonId = 
                                            XxGamMAnticiposUtil2.getMapMaCostCenterByPersonId(responsibility, 
                                                                                              userDataFound.getPersonId(), 
                                                                                              pageContext, 
                                                                                              (OADBTransaction)getTransaction(), 
                                                                                              orgNameEmp);


                                    String localSegment3 = null;
                                    Number localCodComID = null;
                                    String localCurCode = null;
                                    String localCurName = null;
                                    String localVclDesc = null;
                                    String localVclType = null;
                                    String localVclCode = null;
                                    String tempLocalVclDescXX = null;
                                    String localVclDescXX = null;

                                    if (mapMaCostCenterByPersonId != null) {

                                        localSegment3 = 
                                                (String)mapMaCostCenterByPersonId.get("segment3");
                                        localCodComID = 
                                                (Number)mapMaCostCenterByPersonId.get("codCombId");
                                        localCurCode = 
                                                (String)mapMaCostCenterByPersonId.get("curCode");
                                        localCurName = 
                                                (String)mapMaCostCenterByPersonId.get("curName");
                                        localVclDesc = 
                                                (String)mapMaCostCenterByPersonId.get("vclDesc");
                                        localVclType = 
                                                (String)mapMaCostCenterByPersonId.get("vclType");
                                        localVclCode = 
                                                (String)mapMaCostCenterByPersonId.get("vclCode");
                                        tempLocalVclDescXX = 
                                                (String)mapMaCostCenterByPersonId.get("vclDesc");
                                        localVclDescXX = 
                                                tempLocalVclDescXX.substring(0, 
                                                                             tempLocalVclDescXX.length() - 
                                                                             2).concat("XX");

                                        if (((Boolean)mapMaCostCenterByPersonId.get("isInitSuccess")).booleanValue()) {

                                            System.out.println(" Variable para una descripcion tipo CentroDeCostos-Ubicacion localSegment3-->" + 
                                                               localSegment3 + 
                                                               "\n Variable para el CodeCombinationID del CentroDeCostos localCodComID-->" + 
                                                               localCodComID + 
                                                               "\n localCurCode-->" + 
                                                               localCurCode + 
                                                               "\n localCurName-->" + 
                                                               localCurName + 
                                                               "\n Variable para la targeta Virtual que se encuentra en la desc de los lookups configurables localVclDesc-->" + 
                                                               localVclDesc + 
                                                               "\n Variable para El tipo del LookUp que corresponde deacuerdo a CompaniaVsResponsabilidad localVclType-->" + 
                                                               localVclType + 
                                                               "\n localVclCode-->" + 
                                                               localVclCode);


                                            generalReqRow.setCostCenter(localCodComID);
                                            generalReqRow.setCostCenterDesc(localSegment3);
                                            generalReqRow.setVirtualCard(localVclDesc);
                                            generalReqRow.setVcMeaningxx(localVclDescXX);
                                            generalReqRow.setCurrencyCode(localCurCode);
                                            generalReqRow.setCurrencyDesc(localCurName);
                                            /// Agregado para llenar el campo de Unidad Operativa 08/06/2015
                                            if (null != orgNameEmp) {
                                                generalReqRow.setOperatingUnit(orgNameEmp);
                                            }
                                            if (null != 
                                                pageContext.getParameter("pfranchiseType") && 
                                                !"".equals(pageContext.getParameter("pfranchiseType"))) {
                                                generalReqRow.setOrigin(pageContext.getParameter("pfranchiseType"));
                                            }

                                            String paramLocalVclType = null;
                                            paramLocalVclType = 
                                                    (String)pageContext.getTransactionValue("paramVclType");

                                            if (paramLocalVclType == null) {
                                                pageContext.putTransactionValue("paramVclType", 
                                                                                localVclType);
                                            } else if (paramLocalVclType != 
                                                       null && 
                                                       !(paramLocalVclType.equals(""))) {
                                                pageContext.putTransactionValue("paramVclType", 
                                                                                paramLocalVclType);
                                            }


                                            System.out.println("paramLocalVclType-->" + 
                                                               paramLocalVclType);
                                            System.out.println("localVclType-->" + 
                                                               localVclType);
                                            System.out.println("isInitSuccess = true;  Sin Embargo Al principio las listas de valores deben estar inicializadas");
                                            amLov.initPurposeLov();
                                            amLov.initCostCenterFlex(localVclType);
                                            isInitSuccess = 
                                                    XxGamMAnticiposUtil2.initTemplatePayment(pageContext, 
                                                                                             webBean);

                                        } // END  if(((Boolean)mapMaCostCenterByPersonId.get("isInitSuccess")).booleanValue()){     
                                    } // END if(mapMaCostCenterByPersonId!=null){          
                                } // END if (generalReqRow != null) {  
                            } // END if (isCreate) {
                        } // END if (getXxGamMaGeneralReqVO1() != null) {
                    } // END if (userDataFound.getPersonId() != null) {
                } // END if (userDataFound != null && vcLookupType != null) {  

            } // END else if(orgShortNameEmp!=null&&!(orgShortNameEmp.equals("02"))){

        } // END if (userName != null && responsibilityId != null) {

        return isInitSuccess;
    }

    /** Agregado por GnosisHCM
     * Valida que los registros de la solicitud de anticipo no contengan mas de una categoria 
     * @param detailRow contiene el registro del detalle de la solicitud a validar
     * @return devuelve true si es valido o false en caso contrario
     */
    public

    boolean validatesTypePaymentCategory(OAPageContext pageContext, 
                                         OAWebBean webBean, 
                                         XxGamMaPaymentReqVORowImpl detailRow) {
        boolean isValid = true;
        String msgError = null;

        if (detailRow != null) {
            XxGamMaPaymentReqVORowImpl row = detailRow;
            if (row != null) {
                Number typePaymentId = null;
                typePaymentId = row.getTypePayment();
                System.out.println("Get type payment id of Detail Row: " + 
                                   typePaymentId);
                if (typePaymentId != null) {
                    XxGamModAntLovAMImpl amLov = 
                        (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();
                    XxGamMaGeneralReqVOImpl generalImpl = 
                        getXxGamMaGeneralReqVO1();
                    XxGamMaGeneralReqVORowImpl generalRow = null;
                    if (generalImpl != null) {
                        generalRow = 
                                (XxGamMaGeneralReqVORowImpl)generalImpl.getCurrentRow();
                        System.out.println("Get current General Information Row ");
                    }
                    Number templateId = null;
                    if (generalRow != null) {
                        templateId = generalRow.getTemplatePayment();
                        System.out.println("Get template Id of Detail Row : " + 
                                           templateId);
                    }
                    if ((amLov != null) && (templateId != null)) {
                        XxGamMaTypePaymentLovVORowImpl typePaymentRow = 
                            amLov.getTypePaymentById(typePaymentId, 
                                                     templateId);
                        if (typePaymentRow != null) {
                            String typePaymentDesc = null;
                            typePaymentDesc = 
                                    typePaymentRow.getTypePaymentDesc();
                            if (null != typePaymentDesc && 
                                !"".equals(typePaymentDesc)) {
                                System.out.println("Get template Desc of Detail Row : " + 
                                                   typePaymentDesc);
                                XxGamMaCategoriaGastoLovVOImpl CategoriaGastoLovVOImpl = 
                                    null;
                                CategoriaGastoLovVOImpl = 
                                        amLov.getXxGamMaCategoriaGastoLovVO1();
                                if (null != CategoriaGastoLovVOImpl) {
                                    CategoriaGastoLovVOImpl.executeQuery();
                                    RowSetIterator detailIterCatGasto = 
                                        CategoriaGastoLovVOImpl.getRowSetIterator();
                                    if (detailIterCatGasto != null) {
                                        detailIterCatGasto.reset();
                                        while (detailIterCatGasto.hasNext()) {
                                            XxGamMaCategoriaGastoLovVORowImpl CategoriaGastoLovVORowImpl = 
                                                (XxGamMaCategoriaGastoLovVORowImpl)detailIterCatGasto.next();
                                            System.out.println(CategoriaGastoLovVORowImpl.getMeaning() + 
                                                               ":" + 
                                                               CategoriaGastoLovVORowImpl.getLookupCode());
                                            String cadena = null;
                                            String patron = null;
                                            cadena = typePaymentDesc;
                                            patron = 
                                                    CategoriaGastoLovVORowImpl.getMeaning();
                                            Pattern pat = 
                                                Pattern.compile(".*" + patron + 
                                                                ".*");
                                            Matcher mat = pat.matcher(cadena);
                                            if (mat.matches()) {
                                                System.out.println("SI COINCIDE");
                                                boolean isValid2 = true;
                                                if (detailRow != null) {
                                                    XxGamMaPaymentReqVOImpl detailImpl = 
                                                        null;
                                                    detailImpl = 
                                                            getXxGamMaPaymentReqVO2();
                                                    if (detailImpl != null) {
                                                        RowSetIterator detailIter = 
                                                            detailImpl.getRowSetIterator();
                                                        if (detailIter != 
                                                            null) {
                                                            String[] Descripciones = 
                                                                new String[100];
                                                            int count = 0;
                                                            int countMatch = 0;
                                                            detailIter.reset();
                                                            while (detailIter.hasNext()) {
                                                                XxGamMaPaymentReqVORowImpl currentRow = 
                                                                    (XxGamMaPaymentReqVORowImpl)detailIter.next();
                                                                if ((currentRow != 
                                                                     null) && 
                                                                    (currentRow.getId() != 
                                                                     null) && 
                                                                    (currentRow.getTypePayment() != 
                                                                     null) && 
                                                                    (!currentRow.getId().equals(detailRow.getId()))) {

                                                                    typePaymentRow = 
                                                                            null;
                                                                    typePaymentRow = 
                                                                            amLov.getTypePaymentById(currentRow.getTypePayment(), 
                                                                                                     templateId);
                                                                    if (typePaymentRow != 
                                                                        null) {
                                                                        Descripciones[count] = 
                                                                                typePaymentRow.getTypePaymentDesc();
                                                                        System.out.println("Descripciones: " + 
                                                                                           count + 
                                                                                           " " + 
                                                                                           typePaymentRow.getTypePaymentDesc());
                                                                        count = 
                                                                                count + 
                                                                                1;
                                                                        mat = 
null;
                                                                        mat = 
pat.matcher(typePaymentRow.getTypePaymentDesc());
                                                                        if (mat.matches()) {
                                                                            System.out.println("2nd SI COINCIDE");
                                                                            countMatch = 
                                                                                    countMatch + 
                                                                                    1;
                                                                        } else {
                                                                            System.out.println("2nd NO COINCIDE");
                                                                        }
                                                                        if (countMatch > 
                                                                            0) {
                                                                            isValid2 = 
                                                                                    false;
                                                                            isValid = 
                                                                                    isValid2;
                                                                            detailRow.setTypePayment(null);
                                                                            detailRow.setIsPaymentValid(Boolean.valueOf(false));
                                                                            detailRow.setIsPaymentNotValid(Boolean.valueOf(true));
                                                                            msgError = 
                                                                                    pageContext.getMessage("XBOL", 
                                                                                                           "XXGAM_MAF_VAL_CATEGORY_MSG", 
                                                                                                           null);
                                                                            detailRow.setObservations(msgError);
                                                                            break;
                                                                        }

                                                                    }

                                                                    // break;
                                                                }
                                                            } //END while (detailIter.hasNext()) {
                                                        }
                                                    } // END if (detailImpl != null) {
                                                } // END if (detailRow != null) {
                                            } else {
                                                System.out.println("NO COINCIDE");
                                            }
                                            // break;
                                        } // while (detailIterCatGasto.hasNext())
                                    }
                                }

                            }
                        }
                    }
                }
            }
        }
        System.out.println("Finaliza Capa AM validatesTypePaymentCategory isValid " + 
                           isValid);
        return isValid;
    }

    /**
     * Metodo para encontrar el status de los boletos en Oficina de Boletos 
     * @param requestType
     * @return
     */
    public String findEstatusFoliosTickets(String requestType) {
        String retval = null;
        //int count = 0;
        XxGamMaPasajerosInfoVOImpl PasajerosInfoVOImpl = null;


        if (requestType.equals("Franquicias")) {
            PasajerosInfoVOImpl = getXxGamMaPasajerosInfoVO4();
            if (null != PasajerosInfoVOImpl) {
                retval = PasajerosInfoVOImpl.findEstatusFoliosTickets();
            } else {
                System.out.println("EXCEPCION Al recuperar el VO PasajerosInfoVOImpl");
            }

        }
        return retval;
    }

    /**
     * Metodo para validar los boletos a emitir que no contengan 0
     * @param ticketIdNum
     * @param paymentIdNum
     * @param generalIdNum
     * @param tipoSolicitudStr
     */
    public void validateTicketsSendConfirmation(Number ticketIdNum, 
                                                Number paymentIdNum, 
                                                Number generalIdNum, 
                                                String tipoSolicitudStr) {
        boolean isValidToCancelTickets = true;
        boolean isValidToCancelTicketAnticipo = 
            true; /*** Recordar if("0".equals(folio)){retval = false; } ***/

        System.out.println("Comienza validacion emision de boletos capa AM");
        XxGamMaPasajerosInfoVOImpl PasajerosInfoVOImpl = null;
        //XxGamMaPasajerosInfoVORowImpl PasajerosInfoVORowImpl = null;
        PasajerosInfoVOImpl = getXxGamMaPasajerosInfoVO4();
        if (null != PasajerosInfoVOImpl) {
            if (PasajerosInfoVOImpl.getEstimatedRowCount() > 0) {
                isValidToCancelTickets = 
                        PasajerosInfoVOImpl.validateTicketsSendConfirmation();
            } else {
                System.out.println(" Se puede tratar de un anticipo una franquicia vieja o el objeto para franquicias nuevas no trae registros o un boleto de avion ligado a un anticipo");
                /***********Agregado por Gnosis HCM 06/07/2015 **************************/
                if (null != tipoSolicitudStr && 
                    "Solicitud de anticipos".equals(tipoSolicitudStr)) {
                    isValidToCancelTicketAnticipo = 
                            validateTicketsCancelAnticipo(ticketIdNum, 
                                                          paymentIdNum, 
                                                          generalIdNum, 
                                                          tipoSolicitudStr);
                }
            }
        } else {
            System.out.println("EXCEPCION al recuperar informacion de Pasajeros en la validacion de los boletos a asociar");
        }

        if (!isValidToCancelTickets) {
            throw new OAException("El campo de los boletos a emitir no deben contener 0.", 
                                  OAException.ERROR);
        }

        if (!isValidToCancelTicketAnticipo) {
            throw new OAException("El campo de los boletos no debe asociarce con 0 para Boletos de Avion Solicitados en un Anticipo.", 
                                  OAException.ERROR);
        }

        System.out.println("Finaliza validacion emision de boletos capa AM");
    }

    /**
     * Metodo para validar que un boleto de avion solicitado mediante un anticipo pueda cancelarse solo con 0 en la oficina de boletos
     * @param ticketIdNum
     * @param paymentIdNum
     * @param generalIdNum
     * @param tipoSolicitudStr
     * @return
     */
    private boolean validateTicketsCancelAnticipo(Number ticketIdNum, 
                                                  Number paymentIdNum, 
                                                  Number generalIdNum, 
                                                  String tipoSolicitudStr) {
        boolean retval = true;
        String folio = null;
        XxGamMaTicketPVOImpl voXxGamMaTicket = null;
        XxGamMaTicketPVORowImpl voXxGamMaTicketRow = null;
        if (tipoSolicitudStr.equals("Solicitud de anticipos"))
            voXxGamMaTicket = getXxGamMaTicketPVO3();
        else if (tipoSolicitudStr.equals("Franquicias")) {
            voXxGamMaTicket = getXxGamMaTicketPVO4();
        }
        if (null != voXxGamMaTicket) {
            voXxGamMaTicketRow = 
                    (XxGamMaTicketPVORowImpl)voXxGamMaTicket.getCurrentRow();
            if (null != voXxGamMaTicketRow) {
                folio = voXxGamMaTicketRow.getFolio();
                if ("0".equals(folio)) {
                    retval = false;
                }
            }
        }
        return retval;
    }

    /**
     * 
     * @param ticketIdNum
     * @param paymentIdNum
     * @param generalIdNum
     * @param tipoSolicitudStr
     */
    public void cleanTickestValues(Number ticketIdNum, Number paymentIdNum, 
                                   Number generalIdNum, 
                                   String tipoSolicitudStr) {

        XxGamMaPasajerosInfoVOImpl PasajerosInfoVOImpl = null;
        //XxGamMaPasajerosInfoVORowImpl PasajerosInfoVORowImpl = null;
        PasajerosInfoVOImpl = getXxGamMaPasajerosInfoVO4();

        boolean isValidToCleanTicketAnticipo = true;

        if (null != PasajerosInfoVOImpl) {
            if (PasajerosInfoVOImpl.getEstimatedRowCount() > 0) {
                PasajerosInfoVOImpl.cleanTickestValues();
            } else {
                /************ Modificado por GnosisHCM para limpieza de asociacion de boletos ligadas a Solicitudes de Anticipos y Franquicias normales*****************/
                /************ Se puede tratar de un anticipo una franquicia vieja o el objeto para franquicias nuevas no trae registros" ********/
                if (XxGamConstantsUtil.REQUEST_TYPE_ADVANCE.equals(tipoSolicitudStr)) {
                    System.out.println("Se trata de un anticipo, se limpiaran los boletos");
                    isValidToCleanTicketAnticipo = 
                            cleanTicketsSolAnticipos(ticketIdNum, paymentIdNum, 
                                                     generalIdNum, 
                                                     tipoSolicitudStr);
                }

                if (!isValidToCleanTicketAnticipo) {
                    throw new OAException(" A Ocurrido una Excepcion al limpiar los boletos por asociar", 
                                          OAException.ERROR);
                }
            }
        }


    }

    /**
     * Metodo Sobrecargado  que incluye pageContext y webBean para auxiliarse con franquicias no nacionales
     * @param responsibilityId
     * @return
     */
    public boolean initCostCenterFlex(Number responsibilityId, 
                                      OAPageContext pageContext, 
                                      OAWebBean webBean) {

        XxGamMAnticiposUtil.debugMessage(XxGamConstantsUtil.DEBUG_OUTLINE_MODE, 
                                         "Request iCCF: " + 
                                         pageContext.getParameter("pRequest"), 
                                         pageContext, webBean);

        String strSFranchiseType = null;
        String strSRequestType = null;
        String nvlRequestType = null;

        strSFranchiseType = 
                (String)pageContext.getSessionValue("sfranchiseType");
        strSRequestType = (String)pageContext.getSessionValue("sRequest");
        nvlRequestType = 
                (null == pageContext.getParameter("pRequest")) ? strSRequestType : 
                pageContext.getParameter("pRequest");


        boolean isSuccess = false;
        if (responsibilityId != null) {
            //Instancia AM de LOV
            XxGamModAntLovAMImpl amLov = null;
            amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

            String responsibility = null;
            if (amLov != null) {
                XxGamMaResponsibilityAppLovVORowImpl respRow = null;
                respRow = amLov.getResponsibilityAppById(responsibilityId);

                responsibility = 
                        respRow.getResponsibilityKey().toUpperCase().trim();
            }


            String vcLookupType = null;
            if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
                vcLookupType = 
                        XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_COMISION;
            } else {
                if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility) || 
                    XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(nvlRequestType)) {
                    vcLookupType = 
                            XxGamConstantsUtil.LOOKUP_TYPE_TARJETA_VIRTUAL_FRANQUICIAS;
                }
            }

            if (vcLookupType != null) {
                //Configura la lista de valores para el centro de costos
                isSuccess = amLov.initCostCenterFlex(vcLookupType);
            }
        }
        return isSuccess;
    }


    /**
     * Metodo sobrecargado que incluye pageContext y webBean para auxiliarse con franquicias no nacionales
     * @param responsibilityId
     * @param pageContext
     * @param webBean
     * @return
     */
    public boolean setNumberPayment(Number responsibilityId, 
                                    OAPageContext pageContext, 
                                    OAWebBean webBean) {
        boolean isSuccess = false;

        XxGamMAnticiposUtil.debugMessage(XxGamConstantsUtil.DEBUG_OUTLINE_MODE, 
                                         "franchiseType SNP: " + 
                                         pageContext.getParameter("pfranchiseType"), 
                                         pageContext, webBean);
        XxGamMAnticiposUtil.debugMessage(XxGamConstantsUtil.DEBUG_OUTLINE_MODE, 
                                         "Request SNP: " + 
                                         pageContext.getParameter("pRequest"), 
                                         pageContext, webBean);


        if (responsibilityId != null) {

            //Instancia AM de LOV
            XxGamModAntLovAMImpl amLov = null;
            amLov = (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

            String responsibility = null;
            if (amLov != null) {
                XxGamMaResponsibilityAppLovVORowImpl respRow = null;
                respRow = amLov.getResponsibilityAppById(responsibilityId);
                if (respRow != null) {
                    responsibility = 
                            respRow.getResponsibilityKey().toUpperCase().trim();
                }
            }

            XxGamMaGeneralReqVOImpl voGeneralReq = null;
            voGeneralReq = getXxGamMaGeneralReqVO1();
            if (voGeneralReq != null) {
                Row row = null;
                row = voGeneralReq.getCurrentRow();
                if (row != null) {
                    XxGamMaGeneralReqVORowImpl generalReqRow = 
                        (XxGamMaGeneralReqVORowImpl)row;
                    if (generalReqRow != null) {

                        if (generalReqRow.getNumberPayment() == null) {
                            String prefix = null;
                            String sequenceName = null;
                            if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
                                prefix = 
                                        XxGamConstantsUtil.PREFIX_NUMBER_EMPLOYEE;
                                sequenceName = 
                                        XxGamConstantsUtil.SEQUENCES_NUMBER_EMPLOYEE;
                            } else {
                                if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility) || 
                                    XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(pageContext.getParameter("pRequest"))) {
                                    prefix = 
                                            XxGamConstantsUtil.PREFIX_NUMBER_FRANCHISE;
                                    sequenceName = 
                                            XxGamConstantsUtil.SEQUENCES_NUMBER_FRANCHISE;
                                }
                            }

                            if (prefix != null && sequenceName != null) {
                                Number seqNum = null;
                                OADBTransaction trx = getOADBTransaction();
                                if (trx != null) {
                                    seqNum = 
                                            trx.getSequenceValue(sequenceName);
                                }

                                if (seqNum != null) {
                                    generalReqRow.setNumberPayment(prefix + 
                                                                   seqNum.toString());

                                    if (generalReqRow.getNumberPayment() != 
                                        null) {
                                        isSuccess = true;
                                    }
                                }
                            }
                        } else {
                            isSuccess = true;
                        }
                    }
                }
            }
        }
        return isSuccess;
    }


    /**
     * Metodo sobrecargado que incluye pageContext y webBean para auxiliarse con franquicias no nacionales
     * @param responsibilityId
     * @return
     */
    public boolean setValuesStatusInProgress(Number responsibilityId, 
                                             OAPageContext pageContext, 
                                             OAWebBean webBean) {

        boolean isSuccess = false;
        if (responsibilityId != null) {
            XxGamMaGeneralReqVOImpl voGeneralReq = null;
            voGeneralReq = getXxGamMaGeneralReqVO1();
            if (voGeneralReq != null) {
                Row row = null;
                row = voGeneralReq.getCurrentRow();
                if (row != null) {
                    XxGamMaGeneralReqVORowImpl generalReqRow = 
                        (XxGamMaGeneralReqVORowImpl)row;
                    if (generalReqRow != null) {

                        XxGamModAntLovAMImpl amLov = 
                            (XxGamModAntLovAMImpl)getXxGamModAntLovAM1();

                        String responsibility = null;
                        if (amLov != null) {
                            XxGamMaResponsibilityAppLovVORowImpl respRow = 
                                null;
                            respRow = 
                                    amLov.getResponsibilityAppById(responsibilityId);

                            if (respRow != null) {
                                responsibility = 
                                        respRow.getResponsibilityKey().toUpperCase().trim();
                            }
                        }

                        if (XxGamConstantsUtil.RESPONSABILITY_EMPLOYEE.equals(responsibility)) {
                            if (generalReqRow.getStatusRequest() == null) {
                                generalReqRow.setStatusRequest(XxGamConstantsUtil.XXGAM_MA_INPROGRESS_CODE);
                                isSuccess = true;
                            } else {
                                isSuccess = true;
                            }
                        } else {
                            if (XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(responsibility) || 
                                XxGamConstantsUtil.RESPONSABILITY_FRANCHISE.equals(pageContext.getParameter("pRequest"))) {
                                if (generalReqRow.getStatusFranchise() == 
                                    null) {
                                    generalReqRow.setStatusFranchise(XxGamConstantsUtil.XXGAM_MA_INPROGRESS_CODE);
                                    isSuccess = true;
                                } else {
                                    isSuccess = true;
                                }
                            }
                        }
                    }
                }
            }
        }

        return isSuccess;
    }

    /**
     * Metodo agregado para limpiar los valores de los boletos en caso de no emitir una cancelacion para solicitudes de anticipos y franquicias viejas
     * @param ticketIdNum
     * @param paymentIdNum
     * @param generalIdNum
     * @param tipoSolicitudStr
     * @return
     */
    private boolean cleanTicketsSolAnticipos(Number ticketIdNum, 
                                             Number paymentIdNum, 
                                             Number generalIdNum, 
                                             String tipoSolicitudStr) {

        boolean retval = false;
        String folio = null;
        XxGamMaTicketPVOImpl voXxGamMaTicket = null;
        XxGamMaTicketPVORowImpl voXxGamMaTicketRow = null;
        if (tipoSolicitudStr.equals("Solicitud de anticipos"))
            voXxGamMaTicket = getXxGamMaTicketPVO3();
        else if (tipoSolicitudStr.equals("Franquicias")) {
            voXxGamMaTicket = getXxGamMaTicketPVO4();
        }
        if (null != voXxGamMaTicket) {
            voXxGamMaTicketRow = 
                    (XxGamMaTicketPVORowImpl)voXxGamMaTicket.getCurrentRow();
            if (null != voXxGamMaTicketRow) {
                folio = voXxGamMaTicketRow.getFolio();
                if (null != folio) {
                    voXxGamMaTicketRow.setFolio(null);
                    retval = true;
                }
            }
        }
        return retval;

    }

    /**Container's getter for XxGamMaVsMcpPeriodsAmountVO1
     */
    public XxGamMaVsMcpPeriodsAmountVOImpl getXxGamMaVsMcpPeriodsAmountVO1() {
        return (XxGamMaVsMcpPeriodsAmountVOImpl)findViewObject("XxGamMaVsMcpPeriodsAmountVO1");
    }

    /**
     * Metodo que valida las categorias del anticipo si se tiene que validar contra el presupuesto
     * algunas categorias gravan lineas en la poliza y otras no
     * @param lExpenseReportID
     * @param lParameterID
     * @param lInitialDate
     * @param lFinalDate
     * @param lCurrencyCode
     * @return
     */
    public String[] validateExpenseCategoryVsXxgamMcp(Number lExpenseReportID, 
                                                      Number lParameterID, 
                                                      Date lInitialDate, 
                                                      Date lFinalDate, 
                                                      String lCurrencyCode) {
        String retval[] = new String[5];
        retval[0] = null;
        retval[1] = "0";
        retval[2] = null;
        retval[3] = null;
        retval[4] = null;
        String errmsgOUT = null;
        String errcodOUT = "0";
        String codCombIDStr = null;
        String lFlexConcatenated = null;

        StringBuffer stmt = new StringBuffer();
        stmt.append(" BEGIN");
        stmt.append(" APPS.VALIDATE_FUNDS_VS_MAF_TEMPLATE ( PSO_ERRMSG            => :1");
        stmt.append(" , PSO_ERRCOD            => :2 ");
        stmt.append(" , PDI_FECHA_INIC        => :3 ");
        stmt.append(" , PDI_FECHA_FIN         => :4 ");
        stmt.append(" , PNI_EXPENSE_REPORT_ID => :5 ");
        stmt.append(" , PNI_PARAMETER_ID      => :6 ");
        stmt.append(" , PSI_CURRENCY_CODE     => :7 ");
        stmt.append(" , PSO_CODE_COMB_ID_STR     => :8 ");
        stmt.append(" , PSO_FLEX_CONCATENATED  => :9); ");
        stmt.append(" COMMIT;");
        stmt.append(" END;");

        OADBTransaction oadbtrans = (OADBTransaction)getTransaction();
        OracleCallableStatement cs = 
            (OracleCallableStatement)oadbtrans.createCallableStatement(stmt.toString(), 
                                                                       DBTransaction.DEFAULT);

        try {

            cs.registerOutParameter(1, Types.VARCHAR);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.setDATE(3, lInitialDate);
            cs.setDATE(4, lFinalDate);
            cs.setInt(5, lExpenseReportID.intValue());
            cs.setInt(6, lParameterID.intValue());
            cs.setString(7, lCurrencyCode);
            cs.registerOutParameter(8, Types.VARCHAR);
            cs.registerOutParameter(9, Types.VARCHAR);

            cs.execute();
            errmsgOUT = cs.getString(1);
            errcodOUT = cs.getString(2);
            codCombIDStr = cs.getString(8);
            lFlexConcatenated = cs.getString(9);
        } catch (Exception exception2) {
            throw OAException.wrapperException(exception2);
        }


        retval[0] = errmsgOUT;
        retval[1] = errcodOUT;
        retval[2] = codCombIDStr;
        retval[3] = lFlexConcatenated;
        return retval;

    }


    /**Container's getter for XxGamMaVsMcpBudgetControlVO1
     */
    public XxGamMaVsMcpBudgetControlVOImpl getXxGamMaVsMcpBudgetControlVO1() {
        return (XxGamMaVsMcpBudgetControlVOImpl)findViewObject("XxGamMaVsMcpBudgetControlVO1");
    }
    
    
    /**
     * Llama a la funcion para verificar que la filial sea valida
     * AGAA
     * @param filial nombre de filial
     * @return 1 si es valida. 0 si no es valida
     */
    public int callFunctionExistsFilial(String filial) {
        CallableStatement stmt = null;
        Connection conn = null;
        int exists = 0;
        try {
            conn = getOADBTransaction().getJdbcConnection();
            String sql = 
                "BEGIN :1 := apps.XXGAM_OIE_UTILS_PKG.get_filial_boletos_exists(:2); END;";
            stmt = conn.prepareCall(sql);
            stmt.registerOutParameter(1, Types.INTEGER);
            stmt.setString(2, filial);
            stmt.execute();
            exists = stmt.getInt(1);
        } catch (Exception ex) {
            ex.printStackTrace();
            try {
                if (null != stmt)
                    stmt.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } finally {
            try {
                if (null != stmt)
                    stmt.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return exists;
    }


    /**Container's getter for XxgamValidaTipoPersonaVO1
     */
    public XxgamValidaTipoPersonaVOImpl getXxgamValidaTipoPersonaVO1() {
        return (XxgamValidaTipoPersonaVOImpl)findViewObject("XxgamValidaTipoPersonaVO1");
    }
    
    public boolean obtieneTipoPerson(int userId) {
       String tipoPersona = "0";
       String tipoValido = "EMPLEADO PLANTA";
       int intIndex;
       boolean vReturn = false;
       
       XxgamValidaTipoPersonaVOImpl tipoPersonaVO = getXxgamValidaTipoPersonaVO1();
       tipoPersonaVO.clearCache();
       
       Number idUser = new Number(userId);
       tipoPersonaVO.obtieneTipoPersona(idUser);
       
       if(tipoPersonaVO != null) {
          XxgamValidaTipoPersonaVORowImpl row = (XxgamValidaTipoPersonaVORowImpl)tipoPersonaVO.first();
          if(row != null) {
           vReturn = true;
          }
       
       
        }
        return vReturn;
    }
}